
Boat_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08007074  08007074  00017074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007550  08007550  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007550  08007550  00017550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007558  08007558  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007558  08007558  00017558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800755c  0800755c  0001755c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000070  080075d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080075d0  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120a9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002aa6  00000000  00000000  00032149  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  00034bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf8  00000000  00000000  00035a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023c88  00000000  00000000  00036730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e6b6  00000000  00000000  0005a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1ceb  00000000  00000000  00068a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013a759  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e0c  00000000  00000000  0013a7d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800705c 	.word	0x0800705c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800705c 	.word	0x0800705c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_Init+0x40>)
 8000da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_Init+0x40>)
 8000db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_Init+0x40>)
 8000dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 fd51 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 f808 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f005 fbae 	bl	8006530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_InitTick+0x54>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_InitTick+0x58>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fd69 	bl	80018d6 <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00e      	b.n	8000e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d80a      	bhi.n	8000e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f000 fd31 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <HAL_InitTick+0x5c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000004 	.word	0x20000004
 8000e3c:	20000000 	.word	0x20000000

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000004 	.word	0x20000004
 8000e64:	200000b0 	.word	0x200000b0

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	200000b0 	.word	0x200000b0

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_Delay+0x40>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e033      	b.n	8000f42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d109      	bne.n	8000ef6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f004 ffb6 	bl	8005e54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d118      	bne.n	8000f34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f0a:	f023 0302 	bic.w	r3, r3, #2
 8000f0e:	f043 0202 	orr.w	r2, r3, #2
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 fa5a 	bl	80013d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f023 0303 	bic.w	r3, r3, #3
 8000f2a:	f043 0201 	orr.w	r2, r3, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40
 8000f32:	e001      	b.n	8000f38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d101      	bne.n	8000f6a <HAL_ADC_Start_DMA+0x1e>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e0cc      	b.n	8001104 <HAL_ADC_Start_DMA+0x1b8>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d018      	beq.n	8000fb2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0201 	orr.w	r2, r2, #1
 8000f8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f90:	4b5e      	ldr	r3, [pc, #376]	; (800110c <HAL_ADC_Start_DMA+0x1c0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a5e      	ldr	r2, [pc, #376]	; (8001110 <HAL_ADC_Start_DMA+0x1c4>)
 8000f96:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9a:	0c9a      	lsrs	r2, r3, #18
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000fa4:	e002      	b.n	8000fac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f9      	bne.n	8000fa6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	f040 80a0 	bne.w	8001102 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fca:	f023 0301 	bic.w	r3, r3, #1
 8000fce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d007      	beq.n	8000ff4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001000:	d106      	bne.n	8001010 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f023 0206 	bic.w	r2, r3, #6
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	645a      	str	r2, [r3, #68]	; 0x44
 800100e:	e002      	b.n	8001016 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2200      	movs	r2, #0
 8001014:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800101e:	4b3d      	ldr	r3, [pc, #244]	; (8001114 <HAL_ADC_Start_DMA+0x1c8>)
 8001020:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001026:	4a3c      	ldr	r2, [pc, #240]	; (8001118 <HAL_ADC_Start_DMA+0x1cc>)
 8001028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102e:	4a3b      	ldr	r2, [pc, #236]	; (800111c <HAL_ADC_Start_DMA+0x1d0>)
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001036:	4a3a      	ldr	r2, [pc, #232]	; (8001120 <HAL_ADC_Start_DMA+0x1d4>)
 8001038:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001042:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001052:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001062:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	334c      	adds	r3, #76	; 0x4c
 800106e:	4619      	mov	r1, r3
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f000 fcea 	bl	8001a4c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	2b00      	cmp	r3, #0
 8001082:	d12a      	bne.n	80010da <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a26      	ldr	r2, [pc, #152]	; (8001124 <HAL_ADC_Start_DMA+0x1d8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d015      	beq.n	80010ba <HAL_ADC_Start_DMA+0x16e>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a25      	ldr	r2, [pc, #148]	; (8001128 <HAL_ADC_Start_DMA+0x1dc>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d105      	bne.n	80010a4 <HAL_ADC_Start_DMA+0x158>
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <HAL_ADC_Start_DMA+0x1c8>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00a      	beq.n	80010ba <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a20      	ldr	r2, [pc, #128]	; (800112c <HAL_ADC_Start_DMA+0x1e0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d129      	bne.n	8001102 <HAL_ADC_Start_DMA+0x1b6>
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_ADC_Start_DMA+0x1c8>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	d823      	bhi.n	8001102 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d11c      	bne.n	8001102 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	e013      	b.n	8001102 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <HAL_ADC_Start_DMA+0x1d8>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d10e      	bne.n	8001102 <HAL_ADC_Start_DMA+0x1b6>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d107      	bne.n	8001102 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001100:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000008 	.word	0x20000008
 8001110:	431bde83 	.word	0x431bde83
 8001114:	40012300 	.word	0x40012300
 8001118:	080015c9 	.word	0x080015c9
 800111c:	08001683 	.word	0x08001683
 8001120:	0800169f 	.word	0x0800169f
 8001124:	40012000 	.word	0x40012000
 8001128:	40012100 	.word	0x40012100
 800112c:	40012200 	.word	0x40012200

08001130 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001180:	2b01      	cmp	r3, #1
 8001182:	d101      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x1c>
 8001184:	2302      	movs	r3, #2
 8001186:	e113      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x244>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b09      	cmp	r3, #9
 8001196:	d925      	bls.n	80011e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68d9      	ldr	r1, [r3, #12]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	3b1e      	subs	r3, #30
 80011ae:	2207      	movs	r2, #7
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43da      	mvns	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	400a      	ands	r2, r1
 80011bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68d9      	ldr	r1, [r3, #12]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	4603      	mov	r3, r0
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4403      	add	r3, r0
 80011d6:	3b1e      	subs	r3, #30
 80011d8:	409a      	lsls	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	e022      	b.n	800122a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6919      	ldr	r1, [r3, #16]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	4613      	mov	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4413      	add	r3, r2
 80011f8:	2207      	movs	r2, #7
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	400a      	ands	r2, r1
 8001206:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6919      	ldr	r1, [r3, #16]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	4603      	mov	r3, r0
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4403      	add	r3, r0
 8001220:	409a      	lsls	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b06      	cmp	r3, #6
 8001230:	d824      	bhi.n	800127c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	3b05      	subs	r3, #5
 8001244:	221f      	movs	r2, #31
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	400a      	ands	r2, r1
 8001252:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	3b05      	subs	r3, #5
 800126e:	fa00 f203 	lsl.w	r2, r0, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	635a      	str	r2, [r3, #52]	; 0x34
 800127a:	e04c      	b.n	8001316 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b0c      	cmp	r3, #12
 8001282:	d824      	bhi.n	80012ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	3b23      	subs	r3, #35	; 0x23
 8001296:	221f      	movs	r2, #31
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43da      	mvns	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	400a      	ands	r2, r1
 80012a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	3b23      	subs	r3, #35	; 0x23
 80012c0:	fa00 f203 	lsl.w	r2, r0, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	631a      	str	r2, [r3, #48]	; 0x30
 80012cc:	e023      	b.n	8001316 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	3b41      	subs	r3, #65	; 0x41
 80012e0:	221f      	movs	r2, #31
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	400a      	ands	r2, r1
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3b41      	subs	r3, #65	; 0x41
 800130a:	fa00 f203 	lsl.w	r2, r0, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <HAL_ADC_ConfigChannel+0x250>)
 8001318:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a28      	ldr	r2, [pc, #160]	; (80013c0 <HAL_ADC_ConfigChannel+0x254>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d10f      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x1d8>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b12      	cmp	r3, #18
 800132a:	d10b      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <HAL_ADC_ConfigChannel+0x254>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d12b      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x23a>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <HAL_ADC_ConfigChannel+0x258>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d003      	beq.n	8001360 <HAL_ADC_ConfigChannel+0x1f4>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b11      	cmp	r3, #17
 800135e:	d122      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <HAL_ADC_ConfigChannel+0x258>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d111      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_ADC_ConfigChannel+0x25c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a11      	ldr	r2, [pc, #68]	; (80013cc <HAL_ADC_ConfigChannel+0x260>)
 8001388:	fba2 2303 	umull	r2, r3, r2, r3
 800138c:	0c9a      	lsrs	r2, r3, #18
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001398:	e002      	b.n	80013a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	3b01      	subs	r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f9      	bne.n	800139a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	40012300 	.word	0x40012300
 80013c0:	40012000 	.word	0x40012000
 80013c4:	10000012 	.word	0x10000012
 80013c8:	20000008 	.word	0x20000008
 80013cc:	431bde83 	.word	0x431bde83

080013d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013d8:	4b79      	ldr	r3, [pc, #484]	; (80015c0 <ADC_Init+0x1f0>)
 80013da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001404:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6859      	ldr	r1, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	021a      	lsls	r2, r3, #8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001428:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6859      	ldr	r1, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800144a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6899      	ldr	r1, [r3, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001462:	4a58      	ldr	r2, [pc, #352]	; (80015c4 <ADC_Init+0x1f4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d022      	beq.n	80014ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001476:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6899      	ldr	r1, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001498:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6899      	ldr	r1, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	e00f      	b.n	80014ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0202 	bic.w	r2, r2, #2
 80014dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6899      	ldr	r1, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7e1b      	ldrb	r3, [r3, #24]
 80014e8:	005a      	lsls	r2, r3, #1
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d01b      	beq.n	8001534 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800150a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800151a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6859      	ldr	r1, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	3b01      	subs	r3, #1
 8001528:	035a      	lsls	r2, r3, #13
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	e007      	b.n	8001544 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001542:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	3b01      	subs	r3, #1
 8001560:	051a      	lsls	r2, r3, #20
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001578:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6899      	ldr	r1, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001586:	025a      	lsls	r2, r3, #9
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800159e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6899      	ldr	r1, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	029a      	lsls	r2, r3, #10
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	609a      	str	r2, [r3, #8]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40012300 	.word	0x40012300
 80015c4:	0f000001 	.word	0x0f000001

080015c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d13c      	bne.n	800165c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d12b      	bne.n	8001654 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001600:	2b00      	cmp	r3, #0
 8001602:	d127      	bne.n	8001654 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800160e:	2b00      	cmp	r3, #0
 8001610:	d006      	beq.n	8001620 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800161c:	2b00      	cmp	r3, #0
 800161e:	d119      	bne.n	8001654 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0220 	bic.w	r2, r2, #32
 800162e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d105      	bne.n	8001654 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f043 0201 	orr.w	r2, r3, #1
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f7ff fd6b 	bl	8001130 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800165a:	e00e      	b.n	800167a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7ff fd75 	bl	8001158 <HAL_ADC_ErrorCallback>
}
 800166e:	e004      	b.n	800167a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	4798      	blx	r3
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff fd57 	bl	8001144 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2240      	movs	r2, #64	; 0x40
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f043 0204 	orr.w	r2, r3, #4
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f7ff fd4a 	bl	8001158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db0b      	blt.n	800175a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 021f 	and.w	r2, r3, #31
 8001748:	4907      	ldr	r1, [pc, #28]	; (8001768 <__NVIC_EnableIRQ+0x38>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	2001      	movs	r0, #1
 8001752:	fa00 f202 	lsl.w	r2, r0, r2
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	; (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	; (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	; 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff8e 	bl	800176c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff29 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff3e 	bl	8001714 <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff8e 	bl	80017c0 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5d 	bl	800176c <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff31 	bl	8001730 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa2 	bl	8001828 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff fab4 	bl	8000e68 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e099      	b.n	8001a40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800192c:	e00f      	b.n	800194e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800192e:	f7ff fa9b 	bl	8000e68 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b05      	cmp	r3, #5
 800193a:	d908      	bls.n	800194e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2220      	movs	r2, #32
 8001940:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2203      	movs	r2, #3
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e078      	b.n	8001a40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1e8      	bne.n	800192e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_DMA_Init+0x158>)
 8001968:	4013      	ands	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800197a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d107      	bne.n	80019b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	4313      	orrs	r3, r2
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f023 0307 	bic.w	r3, r3, #7
 80019ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d117      	bne.n	8001a12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00e      	beq.n	8001a12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fa6f 	bl	8001ed8 <DMA_CheckFifoParam>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2240      	movs	r2, #64	; 0x40
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e016      	b.n	8001a40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 fa26 	bl	8001e6c <DMA_CalcBaseAndBitshift>
 8001a20:	4603      	mov	r3, r0
 8001a22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	223f      	movs	r2, #63	; 0x3f
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	f010803f 	.word	0xf010803f

08001a4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_DMA_Start_IT+0x26>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e040      	b.n	8001af4 <HAL_DMA_Start_IT+0xa8>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d12f      	bne.n	8001ae6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2202      	movs	r2, #2
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 f9b8 	bl	8001e10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa4:	223f      	movs	r2, #63	; 0x3f
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0216 	orr.w	r2, r2, #22
 8001aba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0208 	orr.w	r2, r2, #8
 8001ad2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e005      	b.n	8001af2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001aee:	2302      	movs	r3, #2
 8001af0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b08:	4b92      	ldr	r3, [pc, #584]	; (8001d54 <HAL_DMA_IRQHandler+0x258>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a92      	ldr	r2, [pc, #584]	; (8001d58 <HAL_DMA_IRQHandler+0x25c>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0a9b      	lsrs	r3, r3, #10
 8001b14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b26:	2208      	movs	r2, #8
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d01a      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0204 	bic.w	r2, r2, #4
 8001b4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	2208      	movs	r2, #8
 8001b56:	409a      	lsls	r2, r3
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	f043 0201 	orr.w	r2, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d012      	beq.n	8001b9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00b      	beq.n	8001b9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b96:	f043 0202 	orr.w	r2, r3, #2
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d012      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00b      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	f043 0204 	orr.w	r2, r3, #4
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	2210      	movs	r2, #16
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d043      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d03c      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d018      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d108      	bne.n	8001c2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d024      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	4798      	blx	r3
 8001c2a:	e01f      	b.n	8001c6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01b      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	4798      	blx	r3
 8001c3c:	e016      	b.n	8001c6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0208 	bic.w	r2, r2, #8
 8001c5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c70:	2220      	movs	r2, #32
 8001c72:	409a      	lsls	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 808e 	beq.w	8001d9a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 8086 	beq.w	8001d9a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c92:	2220      	movs	r2, #32
 8001c94:	409a      	lsls	r2, r3
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b05      	cmp	r3, #5
 8001ca4:	d136      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0216 	bic.w	r2, r2, #22
 8001cb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d103      	bne.n	8001cd6 <HAL_DMA_IRQHandler+0x1da>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0208 	bic.w	r2, r2, #8
 8001ce4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cea:	223f      	movs	r2, #63	; 0x3f
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d07d      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
        }
        return;
 8001d12:	e078      	b.n	8001e06 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d01c      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d108      	bne.n	8001d42 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d030      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	4798      	blx	r3
 8001d40:	e02b      	b.n	8001d9a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d027      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	4798      	blx	r3
 8001d52:	e022      	b.n	8001d9a <HAL_DMA_IRQHandler+0x29e>
 8001d54:	20000008 	.word	0x20000008
 8001d58:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10f      	bne.n	8001d8a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0210 	bic.w	r2, r2, #16
 8001d78:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d032      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d022      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2205      	movs	r2, #5
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d307      	bcc.n	8001de2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f2      	bne.n	8001dc6 <HAL_DMA_IRQHandler+0x2ca>
 8001de0:	e000      	b.n	8001de4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001de2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	e000      	b.n	8001e08 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001e06:	bf00      	nop
    }
  }
}
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop

08001e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b40      	cmp	r3, #64	; 0x40
 8001e3c:	d108      	bne.n	8001e50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e4e:	e007      	b.n	8001e60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	60da      	str	r2, [r3, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	3b10      	subs	r3, #16
 8001e7c:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <DMA_CalcBaseAndBitshift+0x64>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e86:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d909      	bls.n	8001eae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ea2:	f023 0303 	bic.w	r3, r3, #3
 8001ea6:	1d1a      	adds	r2, r3, #4
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	659a      	str	r2, [r3, #88]	; 0x58
 8001eac:	e007      	b.n	8001ebe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eb6:	f023 0303 	bic.w	r3, r3, #3
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	aaaaaaab 	.word	0xaaaaaaab
 8001ed4:	080074fc 	.word	0x080074fc

08001ed8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d11f      	bne.n	8001f32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d855      	bhi.n	8001fa4 <DMA_CheckFifoParam+0xcc>
 8001ef8:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <DMA_CheckFifoParam+0x28>)
 8001efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efe:	bf00      	nop
 8001f00:	08001f11 	.word	0x08001f11
 8001f04:	08001f23 	.word	0x08001f23
 8001f08:	08001f11 	.word	0x08001f11
 8001f0c:	08001fa5 	.word	0x08001fa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d045      	beq.n	8001fa8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f20:	e042      	b.n	8001fa8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f2a:	d13f      	bne.n	8001fac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f30:	e03c      	b.n	8001fac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3a:	d121      	bne.n	8001f80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d836      	bhi.n	8001fb0 <DMA_CheckFifoParam+0xd8>
 8001f42:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <DMA_CheckFifoParam+0x70>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08001f59 	.word	0x08001f59
 8001f4c:	08001f5f 	.word	0x08001f5f
 8001f50:	08001f59 	.word	0x08001f59
 8001f54:	08001f71 	.word	0x08001f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f5c:	e02f      	b.n	8001fbe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d024      	beq.n	8001fb4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f6e:	e021      	b.n	8001fb4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f78:	d11e      	bne.n	8001fb8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f7e:	e01b      	b.n	8001fb8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d902      	bls.n	8001f8c <DMA_CheckFifoParam+0xb4>
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d003      	beq.n	8001f92 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f8a:	e018      	b.n	8001fbe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f90:	e015      	b.n	8001fbe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00e      	beq.n	8001fbc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa2:	e00b      	b.n	8001fbc <DMA_CheckFifoParam+0xe4>
      break;
 8001fa4:	bf00      	nop
 8001fa6:	e00a      	b.n	8001fbe <DMA_CheckFifoParam+0xe6>
      break;
 8001fa8:	bf00      	nop
 8001faa:	e008      	b.n	8001fbe <DMA_CheckFifoParam+0xe6>
      break;
 8001fac:	bf00      	nop
 8001fae:	e006      	b.n	8001fbe <DMA_CheckFifoParam+0xe6>
      break;
 8001fb0:	bf00      	nop
 8001fb2:	e004      	b.n	8001fbe <DMA_CheckFifoParam+0xe6>
      break;
 8001fb4:	bf00      	nop
 8001fb6:	e002      	b.n	8001fbe <DMA_CheckFifoParam+0xe6>
      break;   
 8001fb8:	bf00      	nop
 8001fba:	e000      	b.n	8001fbe <DMA_CheckFifoParam+0xe6>
      break;
 8001fbc:	bf00      	nop
    }
  } 
  
  return status; 
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e165      	b.n	80022b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	429a      	cmp	r2, r3
 8002002:	f040 8154 	bne.w	80022ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d00b      	beq.n	8002026 <HAL_GPIO_Init+0x5a>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d007      	beq.n	8002026 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800201a:	2b11      	cmp	r3, #17
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b12      	cmp	r3, #18
 8002024:	d130      	bne.n	8002088 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 0201 	and.w	r2, r3, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0xfc>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b12      	cmp	r3, #18
 80020c6:	d123      	bne.n	8002110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	08da      	lsrs	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3208      	adds	r2, #8
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	220f      	movs	r2, #15
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	69b9      	ldr	r1, [r7, #24]
 800210c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0203 	and.w	r2, r3, #3
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80ae 	beq.w	80022ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b5c      	ldr	r3, [pc, #368]	; (80022c8 <HAL_GPIO_Init+0x2fc>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	4a5b      	ldr	r2, [pc, #364]	; (80022c8 <HAL_GPIO_Init+0x2fc>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002160:	6453      	str	r3, [r2, #68]	; 0x44
 8002162:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <HAL_GPIO_Init+0x2fc>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800216e:	4a57      	ldr	r2, [pc, #348]	; (80022cc <HAL_GPIO_Init+0x300>)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4e      	ldr	r2, [pc, #312]	; (80022d0 <HAL_GPIO_Init+0x304>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d025      	beq.n	80021e6 <HAL_GPIO_Init+0x21a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4d      	ldr	r2, [pc, #308]	; (80022d4 <HAL_GPIO_Init+0x308>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01f      	beq.n	80021e2 <HAL_GPIO_Init+0x216>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4c      	ldr	r2, [pc, #304]	; (80022d8 <HAL_GPIO_Init+0x30c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d019      	beq.n	80021de <HAL_GPIO_Init+0x212>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4b      	ldr	r2, [pc, #300]	; (80022dc <HAL_GPIO_Init+0x310>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_GPIO_Init+0x20e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4a      	ldr	r2, [pc, #296]	; (80022e0 <HAL_GPIO_Init+0x314>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00d      	beq.n	80021d6 <HAL_GPIO_Init+0x20a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a49      	ldr	r2, [pc, #292]	; (80022e4 <HAL_GPIO_Init+0x318>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <HAL_GPIO_Init+0x206>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a48      	ldr	r2, [pc, #288]	; (80022e8 <HAL_GPIO_Init+0x31c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_GPIO_Init+0x202>
 80021ca:	2306      	movs	r3, #6
 80021cc:	e00c      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021ce:	2307      	movs	r3, #7
 80021d0:	e00a      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021d2:	2305      	movs	r3, #5
 80021d4:	e008      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021d6:	2304      	movs	r3, #4
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021da:	2303      	movs	r3, #3
 80021dc:	e004      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021de:	2302      	movs	r3, #2
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021e6:	2300      	movs	r3, #0
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	f002 0203 	and.w	r2, r2, #3
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	4093      	lsls	r3, r2
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f8:	4934      	ldr	r1, [pc, #208]	; (80022cc <HAL_GPIO_Init+0x300>)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3302      	adds	r3, #2
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002206:	4b39      	ldr	r3, [pc, #228]	; (80022ec <HAL_GPIO_Init+0x320>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800222a:	4a30      	ldr	r2, [pc, #192]	; (80022ec <HAL_GPIO_Init+0x320>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002230:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <HAL_GPIO_Init+0x320>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002254:	4a25      	ldr	r2, [pc, #148]	; (80022ec <HAL_GPIO_Init+0x320>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_GPIO_Init+0x320>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800227e:	4a1b      	ldr	r2, [pc, #108]	; (80022ec <HAL_GPIO_Init+0x320>)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_GPIO_Init+0x320>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022a8:	4a10      	ldr	r2, [pc, #64]	; (80022ec <HAL_GPIO_Init+0x320>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3301      	adds	r3, #1
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b0f      	cmp	r3, #15
 80022b8:	f67f ae96 	bls.w	8001fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	3724      	adds	r7, #36	; 0x24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40013800 	.word	0x40013800
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40020400 	.word	0x40020400
 80022d8:	40020800 	.word	0x40020800
 80022dc:	40020c00 	.word	0x40020c00
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40021400 	.word	0x40021400
 80022e8:	40021800 	.word	0x40021800
 80022ec:	40013c00 	.word	0x40013c00

080022f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800230c:	e003      	b.n	8002316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	041a      	lsls	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	619a      	str	r2, [r3, #24]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e11f      	b.n	8002576 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f003 fecc 	bl	80060e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2224      	movs	r2, #36	; 0x24
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002376:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002386:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002388:	f000 fe2c 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 800238c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4a7b      	ldr	r2, [pc, #492]	; (8002580 <HAL_I2C_Init+0x25c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d807      	bhi.n	80023a8 <HAL_I2C_Init+0x84>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a7a      	ldr	r2, [pc, #488]	; (8002584 <HAL_I2C_Init+0x260>)
 800239c:	4293      	cmp	r3, r2
 800239e:	bf94      	ite	ls
 80023a0:	2301      	movls	r3, #1
 80023a2:	2300      	movhi	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e006      	b.n	80023b6 <HAL_I2C_Init+0x92>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a77      	ldr	r2, [pc, #476]	; (8002588 <HAL_I2C_Init+0x264>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	bf94      	ite	ls
 80023b0:	2301      	movls	r3, #1
 80023b2:	2300      	movhi	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0db      	b.n	8002576 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4a72      	ldr	r2, [pc, #456]	; (800258c <HAL_I2C_Init+0x268>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0c9b      	lsrs	r3, r3, #18
 80023c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a64      	ldr	r2, [pc, #400]	; (8002580 <HAL_I2C_Init+0x25c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d802      	bhi.n	80023f8 <HAL_I2C_Init+0xd4>
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	3301      	adds	r3, #1
 80023f6:	e009      	b.n	800240c <HAL_I2C_Init+0xe8>
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	4a63      	ldr	r2, [pc, #396]	; (8002590 <HAL_I2C_Init+0x26c>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	099b      	lsrs	r3, r3, #6
 800240a:	3301      	adds	r3, #1
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	430b      	orrs	r3, r1
 8002412:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800241e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4956      	ldr	r1, [pc, #344]	; (8002580 <HAL_I2C_Init+0x25c>)
 8002428:	428b      	cmp	r3, r1
 800242a:	d80d      	bhi.n	8002448 <HAL_I2C_Init+0x124>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1e59      	subs	r1, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fbb1 f3f3 	udiv	r3, r1, r3
 800243a:	3301      	adds	r3, #1
 800243c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002440:	2b04      	cmp	r3, #4
 8002442:	bf38      	it	cc
 8002444:	2304      	movcc	r3, #4
 8002446:	e04f      	b.n	80024e8 <HAL_I2C_Init+0x1c4>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d111      	bne.n	8002474 <HAL_I2C_Init+0x150>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1e58      	subs	r0, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	440b      	add	r3, r1
 800245e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002462:	3301      	adds	r3, #1
 8002464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	e012      	b.n	800249a <HAL_I2C_Init+0x176>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1e58      	subs	r0, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	0099      	lsls	r1, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	fbb0 f3f3 	udiv	r3, r0, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Init+0x17e>
 800249e:	2301      	movs	r3, #1
 80024a0:	e022      	b.n	80024e8 <HAL_I2C_Init+0x1c4>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10e      	bne.n	80024c8 <HAL_I2C_Init+0x1a4>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1e58      	subs	r0, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	440b      	add	r3, r1
 80024b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c6:	e00f      	b.n	80024e8 <HAL_I2C_Init+0x1c4>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e58      	subs	r0, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	0099      	lsls	r1, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	fbb0 f3f3 	udiv	r3, r0, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	6809      	ldr	r1, [r1, #0]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69da      	ldr	r2, [r3, #28]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6911      	ldr	r1, [r2, #16]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68d2      	ldr	r2, [r2, #12]
 8002522:	4311      	orrs	r1, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	430b      	orrs	r3, r1
 800252a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	000186a0 	.word	0x000186a0
 8002584:	001e847f 	.word	0x001e847f
 8002588:	003d08ff 	.word	0x003d08ff
 800258c:	431bde83 	.word	0x431bde83
 8002590:	10624dd3 	.word	0x10624dd3

08002594 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	460b      	mov	r3, r1
 80025a2:	817b      	strh	r3, [r7, #10]
 80025a4:	4613      	mov	r3, r2
 80025a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a8:	f7fe fc5e 	bl	8000e68 <HAL_GetTick>
 80025ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	f040 80e0 	bne.w	800277c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2319      	movs	r3, #25
 80025c2:	2201      	movs	r2, #1
 80025c4:	4970      	ldr	r1, [pc, #448]	; (8002788 <HAL_I2C_Master_Transmit+0x1f4>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fa92 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
 80025d4:	e0d3      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_I2C_Master_Transmit+0x50>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e0cc      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d007      	beq.n	800260a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002618:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2221      	movs	r2, #33	; 0x21
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2210      	movs	r2, #16
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	893a      	ldrh	r2, [r7, #8]
 800263a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a50      	ldr	r2, [pc, #320]	; (800278c <HAL_I2C_Master_Transmit+0x1f8>)
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800264c:	8979      	ldrh	r1, [r7, #10]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	6a3a      	ldr	r2, [r7, #32]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f9ca 	bl	80029ec <I2C_MasterRequestWrite>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e08d      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002678:	e066      	b.n	8002748 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	6a39      	ldr	r1, [r7, #32]
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fb0c 	bl	8002c9c <I2C_WaitOnTXEFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00d      	beq.n	80026a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b04      	cmp	r3, #4
 8002690:	d107      	bne.n	80026a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e06b      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d11b      	bne.n	800271c <HAL_I2C_Master_Transmit+0x188>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d017      	beq.n	800271c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	6a39      	ldr	r1, [r7, #32]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fafc 	bl	8002d1e <I2C_WaitOnBTFFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	2b04      	cmp	r3, #4
 8002732:	d107      	bne.n	8002744 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002742:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e01a      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	d194      	bne.n	800267a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
  }
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	00100002 	.word	0x00100002
 800278c:	ffff0000 	.word	0xffff0000

08002790 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	460b      	mov	r3, r1
 800279e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7fe fb62 	bl	8000e68 <HAL_GetTick>
 80027a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80027a6:	2301      	movs	r3, #1
 80027a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	f040 8111 	bne.w	80029da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2319      	movs	r3, #25
 80027be:	2201      	movs	r2, #1
 80027c0:	4988      	ldr	r1, [pc, #544]	; (80029e4 <HAL_I2C_IsDeviceReady+0x254>)
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f994 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
 80027d0:	e104      	b.n	80029dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_I2C_IsDeviceReady+0x50>
 80027dc:	2302      	movs	r3, #2
 80027de:	e0fd      	b.n	80029dc <HAL_I2C_IsDeviceReady+0x24c>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d007      	beq.n	8002806 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002814:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2224      	movs	r2, #36	; 0x24
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4a70      	ldr	r2, [pc, #448]	; (80029e8 <HAL_I2C_IsDeviceReady+0x258>)
 8002828:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002838:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2200      	movs	r2, #0
 8002842:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f952 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002860:	d103      	bne.n	800286a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0b6      	b.n	80029dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800286e:	897b      	ldrh	r3, [r7, #10]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800287c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800287e:	f7fe faf3 	bl	8000e68 <HAL_GetTick>
 8002882:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b02      	cmp	r3, #2
 8002890:	bf0c      	ite	eq
 8002892:	2301      	moveq	r3, #1
 8002894:	2300      	movne	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028b2:	e025      	b.n	8002900 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028b4:	f7fe fad8 	bl	8000e68 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d302      	bcc.n	80028ca <HAL_I2C_IsDeviceReady+0x13a>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	22a0      	movs	r2, #160	; 0xa0
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2ba0      	cmp	r3, #160	; 0xa0
 800290a:	d005      	beq.n	8002918 <HAL_I2C_IsDeviceReady+0x188>
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <HAL_I2C_IsDeviceReady+0x188>
 8002912:	7dbb      	ldrb	r3, [r7, #22]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0cd      	beq.n	80028b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b02      	cmp	r3, #2
 800292c:	d129      	bne.n	8002982 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2319      	movs	r3, #25
 800295a:	2201      	movs	r2, #1
 800295c:	4921      	ldr	r1, [pc, #132]	; (80029e4 <HAL_I2C_IsDeviceReady+0x254>)
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f8c6 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e036      	b.n	80029dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e02c      	b.n	80029dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002990:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800299a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2319      	movs	r3, #25
 80029a2:	2201      	movs	r2, #1
 80029a4:	490f      	ldr	r1, [pc, #60]	; (80029e4 <HAL_I2C_IsDeviceReady+0x254>)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f8a2 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e012      	b.n	80029dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	f4ff af32 	bcc.w	800282a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80029da:	2302      	movs	r3, #2
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	00100002 	.word	0x00100002
 80029e8:	ffff0000 	.word	0xffff0000

080029ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	460b      	mov	r3, r1
 80029fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d006      	beq.n	8002a16 <I2C_MasterRequestWrite+0x2a>
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d003      	beq.n	8002a16 <I2C_MasterRequestWrite+0x2a>
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a14:	d108      	bne.n	8002a28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	e00b      	b.n	8002a40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	2b12      	cmp	r3, #18
 8002a2e:	d107      	bne.n	8002a40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f84f 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a66:	d103      	bne.n	8002a70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e035      	b.n	8002ae0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a7c:	d108      	bne.n	8002a90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a7e:	897b      	ldrh	r3, [r7, #10]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a8c:	611a      	str	r2, [r3, #16]
 8002a8e:	e01b      	b.n	8002ac8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a90:	897b      	ldrh	r3, [r7, #10]
 8002a92:	11db      	asrs	r3, r3, #7
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f003 0306 	and.w	r3, r3, #6
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f063 030f 	orn	r3, r3, #15
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <I2C_MasterRequestWrite+0xfc>)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f875 	bl	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e010      	b.n	8002ae0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4907      	ldr	r1, [pc, #28]	; (8002aec <I2C_MasterRequestWrite+0x100>)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f865 	bl	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	00010008 	.word	0x00010008
 8002aec:	00010002 	.word	0x00010002

08002af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b00:	e025      	b.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d021      	beq.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7fe f9ad 	bl	8000e68 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d116      	bne.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f043 0220 	orr.w	r2, r3, #32
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e023      	b.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d10d      	bne.n	8002b74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4013      	ands	r3, r2
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf0c      	ite	eq
 8002b6a:	2301      	moveq	r3, #1
 8002b6c:	2300      	movne	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	e00c      	b.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf0c      	ite	eq
 8002b86:	2301      	moveq	r3, #1
 8002b88:	2300      	movne	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d0b6      	beq.n	8002b02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bac:	e051      	b.n	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbc:	d123      	bne.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f043 0204 	orr.w	r2, r3, #4
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e046      	b.n	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d021      	beq.n	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7fe f92b 	bl	8000e68 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d116      	bne.n	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f043 0220 	orr.w	r2, r3, #32
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e020      	b.n	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d10c      	bne.n	8002c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4013      	ands	r3, r2
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e00b      	b.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4013      	ands	r3, r2
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d18d      	bne.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ca8:	e02d      	b.n	8002d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f878 	bl	8002da0 <I2C_IsAcknowledgeFailed>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e02d      	b.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d021      	beq.n	8002d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7fe f8d1 	bl	8000e68 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d116      	bne.n	8002d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e007      	b.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d1ca      	bne.n	8002caa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d2a:	e02d      	b.n	8002d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f837 	bl	8002da0 <I2C_IsAcknowledgeFailed>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e02d      	b.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d42:	d021      	beq.n	8002d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d44:	f7fe f890 	bl	8000e68 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d302      	bcc.n	8002d5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d116      	bne.n	8002d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e007      	b.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d1ca      	bne.n	8002d2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db6:	d11b      	bne.n	8002df0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f043 0204 	orr.w	r2, r3, #4
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0cc      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e14:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d90c      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b65      	ldr	r3, [pc, #404]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b63      	ldr	r3, [pc, #396]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0b8      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d020      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e54:	4b59      	ldr	r3, [pc, #356]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a58      	ldr	r2, [pc, #352]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e6c:	4b53      	ldr	r3, [pc, #332]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e78:	4b50      	ldr	r3, [pc, #320]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	494d      	ldr	r1, [pc, #308]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d044      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d107      	bne.n	8002eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d119      	bne.n	8002ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e07f      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d003      	beq.n	8002ebe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebe:	4b3f      	ldr	r3, [pc, #252]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e06f      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ece:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e067      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ede:	4b37      	ldr	r3, [pc, #220]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f023 0203 	bic.w	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4934      	ldr	r1, [pc, #208]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef0:	f7fd ffba 	bl	8000e68 <HAL_GetTick>
 8002ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef8:	f7fd ffb6 	bl	8000e68 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e04f      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 020c 	and.w	r2, r3, #12
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d1eb      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d20c      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e032      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4916      	ldr	r1, [pc, #88]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	490e      	ldr	r1, [pc, #56]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f86:	f000 f855 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002f8a:	4601      	mov	r1, r0
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	5cd3      	ldrb	r3, [r2, r3]
 8002f9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f9e:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd ff1a 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023c00 	.word	0x40023c00
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	08007504 	.word	0x08007504
 8002fc4:	20000008 	.word	0x20000008
 8002fc8:	20000000 	.word	0x20000000

08002fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000008 	.word	0x20000008

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fe8:	f7ff fff0 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fec:	4601      	mov	r1, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0a9b      	lsrs	r3, r3, #10
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4a03      	ldr	r2, [pc, #12]	; (8003008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	08007514 	.word	0x08007514

0800300c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003010:	f7ff ffdc 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8003014:	4601      	mov	r1, r0
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	0b5b      	lsrs	r3, r3, #13
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4a03      	ldr	r2, [pc, #12]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40023800 	.word	0x40023800
 8003030:	08007514 	.word	0x08007514

08003034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304e:	4bc6      	ldr	r3, [pc, #792]	; (8003368 <HAL_RCC_GetSysClockFreq+0x334>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b0c      	cmp	r3, #12
 8003058:	f200 817e 	bhi.w	8003358 <HAL_RCC_GetSysClockFreq+0x324>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <HAL_RCC_GetSysClockFreq+0x30>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003099 	.word	0x08003099
 8003068:	08003359 	.word	0x08003359
 800306c:	08003359 	.word	0x08003359
 8003070:	08003359 	.word	0x08003359
 8003074:	0800309f 	.word	0x0800309f
 8003078:	08003359 	.word	0x08003359
 800307c:	08003359 	.word	0x08003359
 8003080:	08003359 	.word	0x08003359
 8003084:	080030a5 	.word	0x080030a5
 8003088:	08003359 	.word	0x08003359
 800308c:	08003359 	.word	0x08003359
 8003090:	08003359 	.word	0x08003359
 8003094:	08003201 	.word	0x08003201
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003098:	4bb4      	ldr	r3, [pc, #720]	; (800336c <HAL_RCC_GetSysClockFreq+0x338>)
 800309a:	613b      	str	r3, [r7, #16]
       break;
 800309c:	e15f      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800309e:	4bb4      	ldr	r3, [pc, #720]	; (8003370 <HAL_RCC_GetSysClockFreq+0x33c>)
 80030a0:	613b      	str	r3, [r7, #16]
      break;
 80030a2:	e15c      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a4:	4bb0      	ldr	r3, [pc, #704]	; (8003368 <HAL_RCC_GetSysClockFreq+0x334>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ac:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ae:	4bae      	ldr	r3, [pc, #696]	; (8003368 <HAL_RCC_GetSysClockFreq+0x334>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d04a      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ba:	4bab      	ldr	r3, [pc, #684]	; (8003368 <HAL_RCC_GetSysClockFreq+0x334>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	099b      	lsrs	r3, r3, #6
 80030c0:	f04f 0400 	mov.w	r4, #0
 80030c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	ea03 0501 	and.w	r5, r3, r1
 80030d0:	ea04 0602 	and.w	r6, r4, r2
 80030d4:	4629      	mov	r1, r5
 80030d6:	4632      	mov	r2, r6
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	f04f 0400 	mov.w	r4, #0
 80030e0:	0154      	lsls	r4, r2, #5
 80030e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030e6:	014b      	lsls	r3, r1, #5
 80030e8:	4619      	mov	r1, r3
 80030ea:	4622      	mov	r2, r4
 80030ec:	1b49      	subs	r1, r1, r5
 80030ee:	eb62 0206 	sbc.w	r2, r2, r6
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	f04f 0400 	mov.w	r4, #0
 80030fa:	0194      	lsls	r4, r2, #6
 80030fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003100:	018b      	lsls	r3, r1, #6
 8003102:	1a5b      	subs	r3, r3, r1
 8003104:	eb64 0402 	sbc.w	r4, r4, r2
 8003108:	f04f 0100 	mov.w	r1, #0
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	00e2      	lsls	r2, r4, #3
 8003112:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003116:	00d9      	lsls	r1, r3, #3
 8003118:	460b      	mov	r3, r1
 800311a:	4614      	mov	r4, r2
 800311c:	195b      	adds	r3, r3, r5
 800311e:	eb44 0406 	adc.w	r4, r4, r6
 8003122:	f04f 0100 	mov.w	r1, #0
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	0262      	lsls	r2, r4, #9
 800312c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003130:	0259      	lsls	r1, r3, #9
 8003132:	460b      	mov	r3, r1
 8003134:	4614      	mov	r4, r2
 8003136:	4618      	mov	r0, r3
 8003138:	4621      	mov	r1, r4
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f04f 0400 	mov.w	r4, #0
 8003140:	461a      	mov	r2, r3
 8003142:	4623      	mov	r3, r4
 8003144:	f7fd fcaa 	bl	8000a9c <__aeabi_uldivmod>
 8003148:	4603      	mov	r3, r0
 800314a:	460c      	mov	r4, r1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e049      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003150:	4b85      	ldr	r3, [pc, #532]	; (8003368 <HAL_RCC_GetSysClockFreq+0x334>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	099b      	lsrs	r3, r3, #6
 8003156:	f04f 0400 	mov.w	r4, #0
 800315a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	ea03 0501 	and.w	r5, r3, r1
 8003166:	ea04 0602 	and.w	r6, r4, r2
 800316a:	4629      	mov	r1, r5
 800316c:	4632      	mov	r2, r6
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	f04f 0400 	mov.w	r4, #0
 8003176:	0154      	lsls	r4, r2, #5
 8003178:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800317c:	014b      	lsls	r3, r1, #5
 800317e:	4619      	mov	r1, r3
 8003180:	4622      	mov	r2, r4
 8003182:	1b49      	subs	r1, r1, r5
 8003184:	eb62 0206 	sbc.w	r2, r2, r6
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	f04f 0400 	mov.w	r4, #0
 8003190:	0194      	lsls	r4, r2, #6
 8003192:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003196:	018b      	lsls	r3, r1, #6
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	eb64 0402 	sbc.w	r4, r4, r2
 800319e:	f04f 0100 	mov.w	r1, #0
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	00e2      	lsls	r2, r4, #3
 80031a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031ac:	00d9      	lsls	r1, r3, #3
 80031ae:	460b      	mov	r3, r1
 80031b0:	4614      	mov	r4, r2
 80031b2:	195b      	adds	r3, r3, r5
 80031b4:	eb44 0406 	adc.w	r4, r4, r6
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	02a2      	lsls	r2, r4, #10
 80031c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031c6:	0299      	lsls	r1, r3, #10
 80031c8:	460b      	mov	r3, r1
 80031ca:	4614      	mov	r4, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	4621      	mov	r1, r4
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f04f 0400 	mov.w	r4, #0
 80031d6:	461a      	mov	r2, r3
 80031d8:	4623      	mov	r3, r4
 80031da:	f7fd fc5f 	bl	8000a9c <__aeabi_uldivmod>
 80031de:	4603      	mov	r3, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031e4:	4b60      	ldr	r3, [pc, #384]	; (8003368 <HAL_RCC_GetSysClockFreq+0x334>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	3301      	adds	r3, #1
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	613b      	str	r3, [r7, #16]
      break;
 80031fe:	e0ae      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003200:	4b59      	ldr	r3, [pc, #356]	; (8003368 <HAL_RCC_GetSysClockFreq+0x334>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003208:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800320a:	4b57      	ldr	r3, [pc, #348]	; (8003368 <HAL_RCC_GetSysClockFreq+0x334>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d04a      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003216:	4b54      	ldr	r3, [pc, #336]	; (8003368 <HAL_RCC_GetSysClockFreq+0x334>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	099b      	lsrs	r3, r3, #6
 800321c:	f04f 0400 	mov.w	r4, #0
 8003220:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	ea03 0501 	and.w	r5, r3, r1
 800322c:	ea04 0602 	and.w	r6, r4, r2
 8003230:	4629      	mov	r1, r5
 8003232:	4632      	mov	r2, r6
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	f04f 0400 	mov.w	r4, #0
 800323c:	0154      	lsls	r4, r2, #5
 800323e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003242:	014b      	lsls	r3, r1, #5
 8003244:	4619      	mov	r1, r3
 8003246:	4622      	mov	r2, r4
 8003248:	1b49      	subs	r1, r1, r5
 800324a:	eb62 0206 	sbc.w	r2, r2, r6
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	f04f 0400 	mov.w	r4, #0
 8003256:	0194      	lsls	r4, r2, #6
 8003258:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800325c:	018b      	lsls	r3, r1, #6
 800325e:	1a5b      	subs	r3, r3, r1
 8003260:	eb64 0402 	sbc.w	r4, r4, r2
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	00e2      	lsls	r2, r4, #3
 800326e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003272:	00d9      	lsls	r1, r3, #3
 8003274:	460b      	mov	r3, r1
 8003276:	4614      	mov	r4, r2
 8003278:	195b      	adds	r3, r3, r5
 800327a:	eb44 0406 	adc.w	r4, r4, r6
 800327e:	f04f 0100 	mov.w	r1, #0
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	0262      	lsls	r2, r4, #9
 8003288:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800328c:	0259      	lsls	r1, r3, #9
 800328e:	460b      	mov	r3, r1
 8003290:	4614      	mov	r4, r2
 8003292:	4618      	mov	r0, r3
 8003294:	4621      	mov	r1, r4
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f04f 0400 	mov.w	r4, #0
 800329c:	461a      	mov	r2, r3
 800329e:	4623      	mov	r3, r4
 80032a0:	f7fd fbfc 	bl	8000a9c <__aeabi_uldivmod>
 80032a4:	4603      	mov	r3, r0
 80032a6:	460c      	mov	r4, r1
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e049      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ac:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCC_GetSysClockFreq+0x334>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	099b      	lsrs	r3, r3, #6
 80032b2:	f04f 0400 	mov.w	r4, #0
 80032b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	ea03 0501 	and.w	r5, r3, r1
 80032c2:	ea04 0602 	and.w	r6, r4, r2
 80032c6:	4629      	mov	r1, r5
 80032c8:	4632      	mov	r2, r6
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	f04f 0400 	mov.w	r4, #0
 80032d2:	0154      	lsls	r4, r2, #5
 80032d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032d8:	014b      	lsls	r3, r1, #5
 80032da:	4619      	mov	r1, r3
 80032dc:	4622      	mov	r2, r4
 80032de:	1b49      	subs	r1, r1, r5
 80032e0:	eb62 0206 	sbc.w	r2, r2, r6
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	f04f 0400 	mov.w	r4, #0
 80032ec:	0194      	lsls	r4, r2, #6
 80032ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032f2:	018b      	lsls	r3, r1, #6
 80032f4:	1a5b      	subs	r3, r3, r1
 80032f6:	eb64 0402 	sbc.w	r4, r4, r2
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	00e2      	lsls	r2, r4, #3
 8003304:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003308:	00d9      	lsls	r1, r3, #3
 800330a:	460b      	mov	r3, r1
 800330c:	4614      	mov	r4, r2
 800330e:	195b      	adds	r3, r3, r5
 8003310:	eb44 0406 	adc.w	r4, r4, r6
 8003314:	f04f 0100 	mov.w	r1, #0
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	02a2      	lsls	r2, r4, #10
 800331e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003322:	0299      	lsls	r1, r3, #10
 8003324:	460b      	mov	r3, r1
 8003326:	4614      	mov	r4, r2
 8003328:	4618      	mov	r0, r3
 800332a:	4621      	mov	r1, r4
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f04f 0400 	mov.w	r4, #0
 8003332:	461a      	mov	r2, r3
 8003334:	4623      	mov	r3, r4
 8003336:	f7fd fbb1 	bl	8000a9c <__aeabi_uldivmod>
 800333a:	4603      	mov	r3, r0
 800333c:	460c      	mov	r4, r1
 800333e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_RCC_GetSysClockFreq+0x334>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	0f1b      	lsrs	r3, r3, #28
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	613b      	str	r3, [r7, #16]
      break;
 8003356:	e002      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003358:	4b04      	ldr	r3, [pc, #16]	; (800336c <HAL_RCC_GetSysClockFreq+0x338>)
 800335a:	613b      	str	r3, [r7, #16]
      break;
 800335c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335e:	693b      	ldr	r3, [r7, #16]
}
 8003360:	4618      	mov	r0, r3
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003368:	40023800 	.word	0x40023800
 800336c:	00f42400 	.word	0x00f42400
 8003370:	007a1200 	.word	0x007a1200

08003374 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8083 	beq.w	8003494 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800338e:	4b95      	ldr	r3, [pc, #596]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b04      	cmp	r3, #4
 8003398:	d019      	beq.n	80033ce <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800339a:	4b92      	ldr	r3, [pc, #584]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d106      	bne.n	80033b4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033a6:	4b8f      	ldr	r3, [pc, #572]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b2:	d00c      	beq.n	80033ce <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b4:	4b8b      	ldr	r3, [pc, #556]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	d112      	bne.n	80033e6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c0:	4b88      	ldr	r3, [pc, #544]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033cc:	d10b      	bne.n	80033e6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ce:	4b85      	ldr	r3, [pc, #532]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d05b      	beq.n	8003492 <HAL_RCC_OscConfig+0x11e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d157      	bne.n	8003492 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e216      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ee:	d106      	bne.n	80033fe <HAL_RCC_OscConfig+0x8a>
 80033f0:	4b7c      	ldr	r3, [pc, #496]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a7b      	ldr	r2, [pc, #492]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80033f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	e01d      	b.n	800343a <HAL_RCC_OscConfig+0xc6>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003406:	d10c      	bne.n	8003422 <HAL_RCC_OscConfig+0xae>
 8003408:	4b76      	ldr	r3, [pc, #472]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a75      	ldr	r2, [pc, #468]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800340e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b73      	ldr	r3, [pc, #460]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a72      	ldr	r2, [pc, #456]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800341a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	e00b      	b.n	800343a <HAL_RCC_OscConfig+0xc6>
 8003422:	4b70      	ldr	r3, [pc, #448]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a6f      	ldr	r2, [pc, #444]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	4b6d      	ldr	r3, [pc, #436]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a6c      	ldr	r2, [pc, #432]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003438:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d013      	beq.n	800346a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fd fd11 	bl	8000e68 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800344a:	f7fd fd0d 	bl	8000e68 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b64      	cmp	r3, #100	; 0x64
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e1db      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345c:	4b61      	ldr	r3, [pc, #388]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0xd6>
 8003468:	e014      	b.n	8003494 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fd fcfd 	bl	8000e68 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003472:	f7fd fcf9 	bl	8000e68 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b64      	cmp	r3, #100	; 0x64
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e1c7      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003484:	4b57      	ldr	r3, [pc, #348]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f0      	bne.n	8003472 <HAL_RCC_OscConfig+0xfe>
 8003490:	e000      	b.n	8003494 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003492:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d06f      	beq.n	8003580 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034a0:	4b50      	ldr	r3, [pc, #320]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d017      	beq.n	80034dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034ac:	4b4d      	ldr	r3, [pc, #308]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d105      	bne.n	80034c4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034b8:	4b4a      	ldr	r3, [pc, #296]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00b      	beq.n	80034dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c4:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d11c      	bne.n	800350a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d0:	4b44      	ldr	r3, [pc, #272]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d116      	bne.n	800350a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034dc:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_OscConfig+0x180>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e18f      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f4:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4938      	ldr	r1, [pc, #224]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003504:	4313      	orrs	r3, r2
 8003506:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003508:	e03a      	b.n	8003580 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d020      	beq.n	8003554 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003512:	4b35      	ldr	r3, [pc, #212]	; (80035e8 <HAL_RCC_OscConfig+0x274>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fd fca6 	bl	8000e68 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003520:	f7fd fca2 	bl	8000e68 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e170      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003532:	4b2c      	ldr	r3, [pc, #176]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353e:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4925      	ldr	r1, [pc, #148]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]
 8003552:	e015      	b.n	8003580 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003554:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_RCC_OscConfig+0x274>)
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fd fc85 	bl	8000e68 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003562:	f7fd fc81 	bl	8000e68 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e14f      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003574:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d037      	beq.n	80035fc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d016      	beq.n	80035c2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003594:	4b15      	ldr	r3, [pc, #84]	; (80035ec <HAL_RCC_OscConfig+0x278>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fd fc65 	bl	8000e68 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fd fc61 	bl	8000e68 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e12f      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 80035b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x22e>
 80035c0:	e01c      	b.n	80035fc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <HAL_RCC_OscConfig+0x278>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fd fc4e 	bl	8000e68 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ce:	e00f      	b.n	80035f0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d0:	f7fd fc4a 	bl	8000e68 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d908      	bls.n	80035f0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e118      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800
 80035e8:	42470000 	.word	0x42470000
 80035ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	4b8a      	ldr	r3, [pc, #552]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 80035f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e9      	bne.n	80035d0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8097 	beq.w	8003738 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360e:	4b83      	ldr	r3, [pc, #524]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10f      	bne.n	800363a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	4b7f      	ldr	r3, [pc, #508]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	4a7e      	ldr	r2, [pc, #504]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	6413      	str	r3, [r2, #64]	; 0x40
 800362a:	4b7c      	ldr	r3, [pc, #496]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003636:	2301      	movs	r3, #1
 8003638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363a:	4b79      	ldr	r3, [pc, #484]	; (8003820 <HAL_RCC_OscConfig+0x4ac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d118      	bne.n	8003678 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003646:	4b76      	ldr	r3, [pc, #472]	; (8003820 <HAL_RCC_OscConfig+0x4ac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a75      	ldr	r2, [pc, #468]	; (8003820 <HAL_RCC_OscConfig+0x4ac>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003652:	f7fd fc09 	bl	8000e68 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365a:	f7fd fc05 	bl	8000e68 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e0d3      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366c:	4b6c      	ldr	r3, [pc, #432]	; (8003820 <HAL_RCC_OscConfig+0x4ac>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d106      	bne.n	800368e <HAL_RCC_OscConfig+0x31a>
 8003680:	4b66      	ldr	r3, [pc, #408]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a65      	ldr	r2, [pc, #404]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6713      	str	r3, [r2, #112]	; 0x70
 800368c:	e01c      	b.n	80036c8 <HAL_RCC_OscConfig+0x354>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b05      	cmp	r3, #5
 8003694:	d10c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x33c>
 8003696:	4b61      	ldr	r3, [pc, #388]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	4a60      	ldr	r2, [pc, #384]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 800369c:	f043 0304 	orr.w	r3, r3, #4
 80036a0:	6713      	str	r3, [r2, #112]	; 0x70
 80036a2:	4b5e      	ldr	r3, [pc, #376]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	4a5d      	ldr	r2, [pc, #372]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6713      	str	r3, [r2, #112]	; 0x70
 80036ae:	e00b      	b.n	80036c8 <HAL_RCC_OscConfig+0x354>
 80036b0:	4b5a      	ldr	r3, [pc, #360]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	4a59      	ldr	r2, [pc, #356]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 80036b6:	f023 0301 	bic.w	r3, r3, #1
 80036ba:	6713      	str	r3, [r2, #112]	; 0x70
 80036bc:	4b57      	ldr	r3, [pc, #348]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	4a56      	ldr	r2, [pc, #344]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 80036c2:	f023 0304 	bic.w	r3, r3, #4
 80036c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d015      	beq.n	80036fc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fd fbca 	bl	8000e68 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d8:	f7fd fbc6 	bl	8000e68 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e092      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ee:	4b4b      	ldr	r3, [pc, #300]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0ee      	beq.n	80036d8 <HAL_RCC_OscConfig+0x364>
 80036fa:	e014      	b.n	8003726 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fd fbb4 	bl	8000e68 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003702:	e00a      	b.n	800371a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7fd fbb0 	bl	8000e68 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e07c      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371a:	4b40      	ldr	r3, [pc, #256]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1ee      	bne.n	8003704 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003726:	7dfb      	ldrb	r3, [r7, #23]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d105      	bne.n	8003738 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372c:	4b3b      	ldr	r3, [pc, #236]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	4a3a      	ldr	r2, [pc, #232]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 8003732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003736:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d068      	beq.n	8003812 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003740:	4b36      	ldr	r3, [pc, #216]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 030c 	and.w	r3, r3, #12
 8003748:	2b08      	cmp	r3, #8
 800374a:	d060      	beq.n	800380e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d145      	bne.n	80037e0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003754:	4b33      	ldr	r3, [pc, #204]	; (8003824 <HAL_RCC_OscConfig+0x4b0>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fd fb85 	bl	8000e68 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003762:	f7fd fb81 	bl	8000e68 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e04f      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003774:	4b29      	ldr	r3, [pc, #164]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f0      	bne.n	8003762 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	019b      	lsls	r3, r3, #6
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	3b01      	subs	r3, #1
 800379a:	041b      	lsls	r3, r3, #16
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	061b      	lsls	r3, r3, #24
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	071b      	lsls	r3, r3, #28
 80037ac:	491b      	ldr	r1, [pc, #108]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b2:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <HAL_RCC_OscConfig+0x4b0>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fd fb56 	bl	8000e68 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fd fb52 	bl	8000e68 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e020      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	4b12      	ldr	r3, [pc, #72]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x44c>
 80037de:	e018      	b.n	8003812 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e0:	4b10      	ldr	r3, [pc, #64]	; (8003824 <HAL_RCC_OscConfig+0x4b0>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fd fb3f 	bl	8000e68 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ee:	f7fd fb3b 	bl	8000e68 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e009      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_RCC_OscConfig+0x4a8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x47a>
 800380c:	e001      	b.n	8003812 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40023800 	.word	0x40023800
 8003820:	40007000 	.word	0x40007000
 8003824:	42470060 	.word	0x42470060

08003828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e056      	b.n	80038e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f002 fdf3 	bl	8006440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003870:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	ea42 0103 	orr.w	r1, r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	f003 0104 	and.w	r1, r3, #4
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_SPI_Transmit+0x22>
 800390e:	2302      	movs	r3, #2
 8003910:	e11e      	b.n	8003b50 <HAL_SPI_Transmit+0x260>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800391a:	f7fd faa5 	bl	8000e68 <HAL_GetTick>
 800391e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	d002      	beq.n	8003936 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003930:	2302      	movs	r3, #2
 8003932:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003934:	e103      	b.n	8003b3e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_SPI_Transmit+0x52>
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003946:	e0fa      	b.n	8003b3e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2203      	movs	r2, #3
 800394c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398e:	d107      	bne.n	80039a0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800399e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d007      	beq.n	80039be <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c6:	d14b      	bne.n	8003a60 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_SPI_Transmit+0xe6>
 80039d0:	8afb      	ldrh	r3, [r7, #22]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d13e      	bne.n	8003a54 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	881a      	ldrh	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	1c9a      	adds	r2, r3, #2
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039fa:	e02b      	b.n	8003a54 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d112      	bne.n	8003a30 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	881a      	ldrh	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	1c9a      	adds	r2, r3, #2
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a2e:	e011      	b.n	8003a54 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a30:	f7fd fa1a 	bl	8000e68 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d803      	bhi.n	8003a48 <HAL_SPI_Transmit+0x158>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d102      	bne.n	8003a4e <HAL_SPI_Transmit+0x15e>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a52:	e074      	b.n	8003b3e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ce      	bne.n	80039fc <HAL_SPI_Transmit+0x10c>
 8003a5e:	e04c      	b.n	8003afa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_SPI_Transmit+0x17e>
 8003a68:	8afb      	ldrh	r3, [r7, #22]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d140      	bne.n	8003af0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	7812      	ldrb	r2, [r2, #0]
 8003a7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a94:	e02c      	b.n	8003af0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d113      	bne.n	8003acc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	7812      	ldrb	r2, [r2, #0]
 8003ab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003aca:	e011      	b.n	8003af0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003acc:	f7fd f9cc 	bl	8000e68 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d803      	bhi.n	8003ae4 <HAL_SPI_Transmit+0x1f4>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d102      	bne.n	8003aea <HAL_SPI_Transmit+0x1fa>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d102      	bne.n	8003af0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003aee:	e026      	b.n	8003b3e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1cd      	bne.n	8003a96 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	6839      	ldr	r1, [r7, #0]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fba4 	bl	800424c <SPI_EndRxTxTransaction>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	77fb      	strb	r3, [r7, #31]
 8003b3a:	e000      	b.n	8003b3e <HAL_SPI_Transmit+0x24e>
  }

error:
 8003b3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b74:	d112      	bne.n	8003b9c <HAL_SPI_Receive+0x44>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10e      	bne.n	8003b9c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2204      	movs	r2, #4
 8003b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b86:	88fa      	ldrh	r2, [r7, #6]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f8e9 	bl	8003d6a <HAL_SPI_TransmitReceive>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	e0e2      	b.n	8003d62 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_SPI_Receive+0x52>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e0db      	b.n	8003d62 <HAL_SPI_Receive+0x20a>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bb2:	f7fd f959 	bl	8000e68 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d002      	beq.n	8003bca <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bc8:	e0c2      	b.n	8003d50 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_SPI_Receive+0x7e>
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bda:	e0b9      	b.n	8003d50 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2204      	movs	r2, #4
 8003be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	88fa      	ldrh	r2, [r7, #6]
 8003bf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	88fa      	ldrh	r2, [r7, #6]
 8003bfa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c22:	d107      	bne.n	8003c34 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c32:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d007      	beq.n	8003c52 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c50:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d162      	bne.n	8003d20 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c5a:	e02e      	b.n	8003cba <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d115      	bne.n	8003c96 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f103 020c 	add.w	r2, r3, #12
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	7812      	ldrb	r2, [r2, #0]
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c94:	e011      	b.n	8003cba <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c96:	f7fd f8e7 	bl	8000e68 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d803      	bhi.n	8003cae <HAL_SPI_Receive+0x156>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d102      	bne.n	8003cb4 <HAL_SPI_Receive+0x15c>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d102      	bne.n	8003cba <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cb8:	e04a      	b.n	8003d50 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1cb      	bne.n	8003c5c <HAL_SPI_Receive+0x104>
 8003cc4:	e031      	b.n	8003d2a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d113      	bne.n	8003cfc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	b292      	uxth	r2, r2
 8003ce0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	1c9a      	adds	r2, r3, #2
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cfa:	e011      	b.n	8003d20 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cfc:	f7fd f8b4 	bl	8000e68 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d803      	bhi.n	8003d14 <HAL_SPI_Receive+0x1bc>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d102      	bne.n	8003d1a <HAL_SPI_Receive+0x1c2>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d1e:	e017      	b.n	8003d50 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1cd      	bne.n	8003cc6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	6839      	ldr	r1, [r7, #0]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fa27 	bl	8004182 <SPI_EndRxTransaction>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	75fb      	strb	r3, [r7, #23]
 8003d4c:	e000      	b.n	8003d50 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003d4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b08c      	sub	sp, #48	; 0x30
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_SPI_TransmitReceive+0x26>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e18a      	b.n	80040a6 <HAL_SPI_TransmitReceive+0x33c>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d98:	f7fd f866 	bl	8000e68 <HAL_GetTick>
 8003d9c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003dae:	887b      	ldrh	r3, [r7, #2]
 8003db0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003db2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d00f      	beq.n	8003dda <HAL_SPI_TransmitReceive+0x70>
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc0:	d107      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x68>
 8003dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d003      	beq.n	8003dda <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dd8:	e15b      	b.n	8004092 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_SPI_TransmitReceive+0x82>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_SPI_TransmitReceive+0x82>
 8003de6:	887b      	ldrh	r3, [r7, #2]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d103      	bne.n	8003df4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003df2:	e14e      	b.n	8004092 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d003      	beq.n	8003e08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2205      	movs	r2, #5
 8003e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	887a      	ldrh	r2, [r7, #2]
 8003e18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	887a      	ldrh	r2, [r7, #2]
 8003e1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	887a      	ldrh	r2, [r7, #2]
 8003e2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	887a      	ldrh	r2, [r7, #2]
 8003e30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d007      	beq.n	8003e5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e64:	d178      	bne.n	8003f58 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x10a>
 8003e6e:	8b7b      	ldrh	r3, [r7, #26]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d166      	bne.n	8003f42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	881a      	ldrh	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	1c9a      	adds	r2, r3, #2
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e98:	e053      	b.n	8003f42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d11b      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x176>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_SPI_TransmitReceive+0x176>
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d113      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	881a      	ldrh	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	1c9a      	adds	r2, r3, #2
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d119      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x1b8>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d014      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	b292      	uxth	r2, r2
 8003f04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	1c9a      	adds	r2, r3, #2
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f22:	f7fc ffa1 	bl	8000e68 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d807      	bhi.n	8003f42 <HAL_SPI_TransmitReceive+0x1d8>
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d003      	beq.n	8003f42 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f40:	e0a7      	b.n	8004092 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1a6      	bne.n	8003e9a <HAL_SPI_TransmitReceive+0x130>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1a1      	bne.n	8003e9a <HAL_SPI_TransmitReceive+0x130>
 8003f56:	e07c      	b.n	8004052 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <HAL_SPI_TransmitReceive+0x1fc>
 8003f60:	8b7b      	ldrh	r3, [r7, #26]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d16b      	bne.n	800403e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	7812      	ldrb	r2, [r2, #0]
 8003f72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f8c:	e057      	b.n	800403e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d11c      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x26c>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d017      	beq.n	8003fd6 <HAL_SPI_TransmitReceive+0x26c>
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d114      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	7812      	ldrb	r2, [r2, #0]
 8003fb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d119      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x2ae>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d014      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004014:	2301      	movs	r3, #1
 8004016:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004018:	f7fc ff26 	bl	8000e68 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004024:	429a      	cmp	r2, r3
 8004026:	d803      	bhi.n	8004030 <HAL_SPI_TransmitReceive+0x2c6>
 8004028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d102      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x2cc>
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800403c:	e029      	b.n	8004092 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1a2      	bne.n	8003f8e <HAL_SPI_TransmitReceive+0x224>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d19d      	bne.n	8003f8e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f8f8 	bl	800424c <SPI_EndRxTxTransaction>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800406e:	e010      	b.n	8004092 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	e000      	b.n	8004092 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004090:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3730      	adds	r7, #48	; 0x30
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	603b      	str	r3, [r7, #0]
 80040ba:	4613      	mov	r3, r2
 80040bc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040be:	e04c      	b.n	800415a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c6:	d048      	beq.n	800415a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80040c8:	f7fc fece 	bl	8000e68 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d902      	bls.n	80040de <SPI_WaitFlagStateUntilTimeout+0x30>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d13d      	bne.n	800415a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f6:	d111      	bne.n	800411c <SPI_WaitFlagStateUntilTimeout+0x6e>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004100:	d004      	beq.n	800410c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410a:	d107      	bne.n	800411c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004124:	d10f      	bne.n	8004146 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e00f      	b.n	800417a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4013      	ands	r3, r2
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	bf0c      	ite	eq
 800416a:	2301      	moveq	r3, #1
 800416c:	2300      	movne	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	429a      	cmp	r2, r3
 8004176:	d1a3      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b086      	sub	sp, #24
 8004186:	af02      	add	r7, sp, #8
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004196:	d111      	bne.n	80041bc <SPI_EndRxTransaction+0x3a>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a0:	d004      	beq.n	80041ac <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041aa:	d107      	bne.n	80041bc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ba:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c4:	d12a      	bne.n	800421c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ce:	d012      	beq.n	80041f6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2200      	movs	r2, #0
 80041d8:	2180      	movs	r1, #128	; 0x80
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f7ff ff67 	bl	80040ae <SPI_WaitFlagStateUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d02d      	beq.n	8004242 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	f043 0220 	orr.w	r2, r3, #32
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e026      	b.n	8004244 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2200      	movs	r2, #0
 80041fe:	2101      	movs	r1, #1
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff ff54 	bl	80040ae <SPI_WaitFlagStateUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01a      	beq.n	8004242 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004210:	f043 0220 	orr.w	r2, r3, #32
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e013      	b.n	8004244 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2200      	movs	r2, #0
 8004224:	2101      	movs	r1, #1
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f7ff ff41 	bl	80040ae <SPI_WaitFlagStateUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f043 0220 	orr.w	r2, r3, #32
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e000      	b.n	8004244 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004258:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <SPI_EndRxTxTransaction+0x7c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <SPI_EndRxTxTransaction+0x80>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	0d5b      	lsrs	r3, r3, #21
 8004264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004276:	d112      	bne.n	800429e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2200      	movs	r2, #0
 8004280:	2180      	movs	r1, #128	; 0x80
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f7ff ff13 	bl	80040ae <SPI_WaitFlagStateUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	f043 0220 	orr.w	r2, r3, #32
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e00f      	b.n	80042be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b4:	2b80      	cmp	r3, #128	; 0x80
 80042b6:	d0f2      	beq.n	800429e <SPI_EndRxTxTransaction+0x52>
 80042b8:	e000      	b.n	80042bc <SPI_EndRxTxTransaction+0x70>
        break;
 80042ba:	bf00      	nop
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000008 	.word	0x20000008
 80042cc:	165e9f81 	.word	0x165e9f81

080042d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e03f      	b.n	8004362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f002 f9e6 	bl	80066c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2224      	movs	r2, #36	; 0x24
 8004300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f90b 	bl	8004530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695a      	ldr	r2, [r3, #20]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b088      	sub	sp, #32
 800436e:	af02      	add	r7, sp, #8
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b20      	cmp	r3, #32
 8004388:	f040 8083 	bne.w	8004492 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_UART_Transmit+0x2e>
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e07b      	b.n	8004494 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_UART_Transmit+0x40>
 80043a6:	2302      	movs	r3, #2
 80043a8:	e074      	b.n	8004494 <HAL_UART_Transmit+0x12a>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2221      	movs	r2, #33	; 0x21
 80043bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80043c0:	f7fc fd52 	bl	8000e68 <HAL_GetTick>
 80043c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	88fa      	ldrh	r2, [r7, #6]
 80043ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	88fa      	ldrh	r2, [r7, #6]
 80043d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80043da:	e042      	b.n	8004462 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f2:	d122      	bne.n	800443a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2200      	movs	r2, #0
 80043fc:	2180      	movs	r1, #128	; 0x80
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f84c 	bl	800449c <UART_WaitOnFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e042      	b.n	8004494 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004420:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	3302      	adds	r3, #2
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	e017      	b.n	8004462 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	3301      	adds	r3, #1
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	e013      	b.n	8004462 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2200      	movs	r2, #0
 8004442:	2180      	movs	r1, #128	; 0x80
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f829 	bl	800449c <UART_WaitOnFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e01f      	b.n	8004494 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	60ba      	str	r2, [r7, #8]
 800445a:	781a      	ldrb	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1b7      	bne.n	80043dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2200      	movs	r2, #0
 8004474:	2140      	movs	r1, #64	; 0x40
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 f810 	bl	800449c <UART_WaitOnFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e006      	b.n	8004494 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e000      	b.n	8004494 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004492:	2302      	movs	r3, #2
  }
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ac:	e02c      	b.n	8004508 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d028      	beq.n	8004508 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <UART_WaitOnFlagUntilTimeout+0x30>
 80044bc:	f7fc fcd4 	bl	8000e68 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d21d      	bcs.n	8004508 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e00f      	b.n	8004528 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4013      	ands	r3, r2
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	429a      	cmp	r2, r3
 8004516:	bf0c      	ite	eq
 8004518:	2301      	moveq	r3, #1
 800451a:	2300      	movne	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	429a      	cmp	r2, r3
 8004524:	d0c3      	beq.n	80044ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004572:	f023 030c 	bic.w	r3, r3, #12
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	68f9      	ldr	r1, [r7, #12]
 800457c:	430b      	orrs	r3, r1
 800457e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800459e:	f040 818b 	bne.w	80048b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4ac1      	ldr	r2, [pc, #772]	; (80048ac <UART_SetConfig+0x37c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d005      	beq.n	80045b8 <UART_SetConfig+0x88>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4abf      	ldr	r2, [pc, #764]	; (80048b0 <UART_SetConfig+0x380>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	f040 80bd 	bne.w	8004732 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045b8:	f7fe fd28 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 80045bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	461d      	mov	r5, r3
 80045c2:	f04f 0600 	mov.w	r6, #0
 80045c6:	46a8      	mov	r8, r5
 80045c8:	46b1      	mov	r9, r6
 80045ca:	eb18 0308 	adds.w	r3, r8, r8
 80045ce:	eb49 0409 	adc.w	r4, r9, r9
 80045d2:	4698      	mov	r8, r3
 80045d4:	46a1      	mov	r9, r4
 80045d6:	eb18 0805 	adds.w	r8, r8, r5
 80045da:	eb49 0906 	adc.w	r9, r9, r6
 80045de:	f04f 0100 	mov.w	r1, #0
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045f2:	4688      	mov	r8, r1
 80045f4:	4691      	mov	r9, r2
 80045f6:	eb18 0005 	adds.w	r0, r8, r5
 80045fa:	eb49 0106 	adc.w	r1, r9, r6
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	461d      	mov	r5, r3
 8004604:	f04f 0600 	mov.w	r6, #0
 8004608:	196b      	adds	r3, r5, r5
 800460a:	eb46 0406 	adc.w	r4, r6, r6
 800460e:	461a      	mov	r2, r3
 8004610:	4623      	mov	r3, r4
 8004612:	f7fc fa43 	bl	8000a9c <__aeabi_uldivmod>
 8004616:	4603      	mov	r3, r0
 8004618:	460c      	mov	r4, r1
 800461a:	461a      	mov	r2, r3
 800461c:	4ba5      	ldr	r3, [pc, #660]	; (80048b4 <UART_SetConfig+0x384>)
 800461e:	fba3 2302 	umull	r2, r3, r3, r2
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	461d      	mov	r5, r3
 800462c:	f04f 0600 	mov.w	r6, #0
 8004630:	46a9      	mov	r9, r5
 8004632:	46b2      	mov	sl, r6
 8004634:	eb19 0309 	adds.w	r3, r9, r9
 8004638:	eb4a 040a 	adc.w	r4, sl, sl
 800463c:	4699      	mov	r9, r3
 800463e:	46a2      	mov	sl, r4
 8004640:	eb19 0905 	adds.w	r9, r9, r5
 8004644:	eb4a 0a06 	adc.w	sl, sl, r6
 8004648:	f04f 0100 	mov.w	r1, #0
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004654:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004658:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800465c:	4689      	mov	r9, r1
 800465e:	4692      	mov	sl, r2
 8004660:	eb19 0005 	adds.w	r0, r9, r5
 8004664:	eb4a 0106 	adc.w	r1, sl, r6
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	461d      	mov	r5, r3
 800466e:	f04f 0600 	mov.w	r6, #0
 8004672:	196b      	adds	r3, r5, r5
 8004674:	eb46 0406 	adc.w	r4, r6, r6
 8004678:	461a      	mov	r2, r3
 800467a:	4623      	mov	r3, r4
 800467c:	f7fc fa0e 	bl	8000a9c <__aeabi_uldivmod>
 8004680:	4603      	mov	r3, r0
 8004682:	460c      	mov	r4, r1
 8004684:	461a      	mov	r2, r3
 8004686:	4b8b      	ldr	r3, [pc, #556]	; (80048b4 <UART_SetConfig+0x384>)
 8004688:	fba3 1302 	umull	r1, r3, r3, r2
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	2164      	movs	r1, #100	; 0x64
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	3332      	adds	r3, #50	; 0x32
 800469a:	4a86      	ldr	r2, [pc, #536]	; (80048b4 <UART_SetConfig+0x384>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046a8:	4498      	add	r8, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	461d      	mov	r5, r3
 80046ae:	f04f 0600 	mov.w	r6, #0
 80046b2:	46a9      	mov	r9, r5
 80046b4:	46b2      	mov	sl, r6
 80046b6:	eb19 0309 	adds.w	r3, r9, r9
 80046ba:	eb4a 040a 	adc.w	r4, sl, sl
 80046be:	4699      	mov	r9, r3
 80046c0:	46a2      	mov	sl, r4
 80046c2:	eb19 0905 	adds.w	r9, r9, r5
 80046c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80046ca:	f04f 0100 	mov.w	r1, #0
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046de:	4689      	mov	r9, r1
 80046e0:	4692      	mov	sl, r2
 80046e2:	eb19 0005 	adds.w	r0, r9, r5
 80046e6:	eb4a 0106 	adc.w	r1, sl, r6
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	461d      	mov	r5, r3
 80046f0:	f04f 0600 	mov.w	r6, #0
 80046f4:	196b      	adds	r3, r5, r5
 80046f6:	eb46 0406 	adc.w	r4, r6, r6
 80046fa:	461a      	mov	r2, r3
 80046fc:	4623      	mov	r3, r4
 80046fe:	f7fc f9cd 	bl	8000a9c <__aeabi_uldivmod>
 8004702:	4603      	mov	r3, r0
 8004704:	460c      	mov	r4, r1
 8004706:	461a      	mov	r2, r3
 8004708:	4b6a      	ldr	r3, [pc, #424]	; (80048b4 <UART_SetConfig+0x384>)
 800470a:	fba3 1302 	umull	r1, r3, r3, r2
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	2164      	movs	r1, #100	; 0x64
 8004712:	fb01 f303 	mul.w	r3, r1, r3
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	3332      	adds	r3, #50	; 0x32
 800471c:	4a65      	ldr	r2, [pc, #404]	; (80048b4 <UART_SetConfig+0x384>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	f003 0207 	and.w	r2, r3, #7
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4442      	add	r2, r8
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	e26f      	b.n	8004c12 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004732:	f7fe fc57 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8004736:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	461d      	mov	r5, r3
 800473c:	f04f 0600 	mov.w	r6, #0
 8004740:	46a8      	mov	r8, r5
 8004742:	46b1      	mov	r9, r6
 8004744:	eb18 0308 	adds.w	r3, r8, r8
 8004748:	eb49 0409 	adc.w	r4, r9, r9
 800474c:	4698      	mov	r8, r3
 800474e:	46a1      	mov	r9, r4
 8004750:	eb18 0805 	adds.w	r8, r8, r5
 8004754:	eb49 0906 	adc.w	r9, r9, r6
 8004758:	f04f 0100 	mov.w	r1, #0
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004764:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004768:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800476c:	4688      	mov	r8, r1
 800476e:	4691      	mov	r9, r2
 8004770:	eb18 0005 	adds.w	r0, r8, r5
 8004774:	eb49 0106 	adc.w	r1, r9, r6
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	461d      	mov	r5, r3
 800477e:	f04f 0600 	mov.w	r6, #0
 8004782:	196b      	adds	r3, r5, r5
 8004784:	eb46 0406 	adc.w	r4, r6, r6
 8004788:	461a      	mov	r2, r3
 800478a:	4623      	mov	r3, r4
 800478c:	f7fc f986 	bl	8000a9c <__aeabi_uldivmod>
 8004790:	4603      	mov	r3, r0
 8004792:	460c      	mov	r4, r1
 8004794:	461a      	mov	r2, r3
 8004796:	4b47      	ldr	r3, [pc, #284]	; (80048b4 <UART_SetConfig+0x384>)
 8004798:	fba3 2302 	umull	r2, r3, r3, r2
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	461d      	mov	r5, r3
 80047a6:	f04f 0600 	mov.w	r6, #0
 80047aa:	46a9      	mov	r9, r5
 80047ac:	46b2      	mov	sl, r6
 80047ae:	eb19 0309 	adds.w	r3, r9, r9
 80047b2:	eb4a 040a 	adc.w	r4, sl, sl
 80047b6:	4699      	mov	r9, r3
 80047b8:	46a2      	mov	sl, r4
 80047ba:	eb19 0905 	adds.w	r9, r9, r5
 80047be:	eb4a 0a06 	adc.w	sl, sl, r6
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047d6:	4689      	mov	r9, r1
 80047d8:	4692      	mov	sl, r2
 80047da:	eb19 0005 	adds.w	r0, r9, r5
 80047de:	eb4a 0106 	adc.w	r1, sl, r6
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	461d      	mov	r5, r3
 80047e8:	f04f 0600 	mov.w	r6, #0
 80047ec:	196b      	adds	r3, r5, r5
 80047ee:	eb46 0406 	adc.w	r4, r6, r6
 80047f2:	461a      	mov	r2, r3
 80047f4:	4623      	mov	r3, r4
 80047f6:	f7fc f951 	bl	8000a9c <__aeabi_uldivmod>
 80047fa:	4603      	mov	r3, r0
 80047fc:	460c      	mov	r4, r1
 80047fe:	461a      	mov	r2, r3
 8004800:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <UART_SetConfig+0x384>)
 8004802:	fba3 1302 	umull	r1, r3, r3, r2
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	2164      	movs	r1, #100	; 0x64
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	3332      	adds	r3, #50	; 0x32
 8004814:	4a27      	ldr	r2, [pc, #156]	; (80048b4 <UART_SetConfig+0x384>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004822:	4498      	add	r8, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	461d      	mov	r5, r3
 8004828:	f04f 0600 	mov.w	r6, #0
 800482c:	46a9      	mov	r9, r5
 800482e:	46b2      	mov	sl, r6
 8004830:	eb19 0309 	adds.w	r3, r9, r9
 8004834:	eb4a 040a 	adc.w	r4, sl, sl
 8004838:	4699      	mov	r9, r3
 800483a:	46a2      	mov	sl, r4
 800483c:	eb19 0905 	adds.w	r9, r9, r5
 8004840:	eb4a 0a06 	adc.w	sl, sl, r6
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004850:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004854:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004858:	4689      	mov	r9, r1
 800485a:	4692      	mov	sl, r2
 800485c:	eb19 0005 	adds.w	r0, r9, r5
 8004860:	eb4a 0106 	adc.w	r1, sl, r6
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	461d      	mov	r5, r3
 800486a:	f04f 0600 	mov.w	r6, #0
 800486e:	196b      	adds	r3, r5, r5
 8004870:	eb46 0406 	adc.w	r4, r6, r6
 8004874:	461a      	mov	r2, r3
 8004876:	4623      	mov	r3, r4
 8004878:	f7fc f910 	bl	8000a9c <__aeabi_uldivmod>
 800487c:	4603      	mov	r3, r0
 800487e:	460c      	mov	r4, r1
 8004880:	461a      	mov	r2, r3
 8004882:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <UART_SetConfig+0x384>)
 8004884:	fba3 1302 	umull	r1, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	2164      	movs	r1, #100	; 0x64
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	3332      	adds	r3, #50	; 0x32
 8004896:	4a07      	ldr	r2, [pc, #28]	; (80048b4 <UART_SetConfig+0x384>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f003 0207 	and.w	r2, r3, #7
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4442      	add	r2, r8
 80048a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80048aa:	e1b2      	b.n	8004c12 <UART_SetConfig+0x6e2>
 80048ac:	40011000 	.word	0x40011000
 80048b0:	40011400 	.word	0x40011400
 80048b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4ad7      	ldr	r2, [pc, #860]	; (8004c1c <UART_SetConfig+0x6ec>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d005      	beq.n	80048ce <UART_SetConfig+0x39e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4ad6      	ldr	r2, [pc, #856]	; (8004c20 <UART_SetConfig+0x6f0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	f040 80d1 	bne.w	8004a70 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80048ce:	f7fe fb9d 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 80048d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	469a      	mov	sl, r3
 80048d8:	f04f 0b00 	mov.w	fp, #0
 80048dc:	46d0      	mov	r8, sl
 80048de:	46d9      	mov	r9, fp
 80048e0:	eb18 0308 	adds.w	r3, r8, r8
 80048e4:	eb49 0409 	adc.w	r4, r9, r9
 80048e8:	4698      	mov	r8, r3
 80048ea:	46a1      	mov	r9, r4
 80048ec:	eb18 080a 	adds.w	r8, r8, sl
 80048f0:	eb49 090b 	adc.w	r9, r9, fp
 80048f4:	f04f 0100 	mov.w	r1, #0
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004900:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004904:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004908:	4688      	mov	r8, r1
 800490a:	4691      	mov	r9, r2
 800490c:	eb1a 0508 	adds.w	r5, sl, r8
 8004910:	eb4b 0609 	adc.w	r6, fp, r9
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4619      	mov	r1, r3
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	f04f 0400 	mov.w	r4, #0
 8004926:	0094      	lsls	r4, r2, #2
 8004928:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800492c:	008b      	lsls	r3, r1, #2
 800492e:	461a      	mov	r2, r3
 8004930:	4623      	mov	r3, r4
 8004932:	4628      	mov	r0, r5
 8004934:	4631      	mov	r1, r6
 8004936:	f7fc f8b1 	bl	8000a9c <__aeabi_uldivmod>
 800493a:	4603      	mov	r3, r0
 800493c:	460c      	mov	r4, r1
 800493e:	461a      	mov	r2, r3
 8004940:	4bb8      	ldr	r3, [pc, #736]	; (8004c24 <UART_SetConfig+0x6f4>)
 8004942:	fba3 2302 	umull	r2, r3, r3, r2
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	469b      	mov	fp, r3
 8004950:	f04f 0c00 	mov.w	ip, #0
 8004954:	46d9      	mov	r9, fp
 8004956:	46e2      	mov	sl, ip
 8004958:	eb19 0309 	adds.w	r3, r9, r9
 800495c:	eb4a 040a 	adc.w	r4, sl, sl
 8004960:	4699      	mov	r9, r3
 8004962:	46a2      	mov	sl, r4
 8004964:	eb19 090b 	adds.w	r9, r9, fp
 8004968:	eb4a 0a0c 	adc.w	sl, sl, ip
 800496c:	f04f 0100 	mov.w	r1, #0
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004978:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800497c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004980:	4689      	mov	r9, r1
 8004982:	4692      	mov	sl, r2
 8004984:	eb1b 0509 	adds.w	r5, fp, r9
 8004988:	eb4c 060a 	adc.w	r6, ip, sl
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	4619      	mov	r1, r3
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	f04f 0400 	mov.w	r4, #0
 800499e:	0094      	lsls	r4, r2, #2
 80049a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049a4:	008b      	lsls	r3, r1, #2
 80049a6:	461a      	mov	r2, r3
 80049a8:	4623      	mov	r3, r4
 80049aa:	4628      	mov	r0, r5
 80049ac:	4631      	mov	r1, r6
 80049ae:	f7fc f875 	bl	8000a9c <__aeabi_uldivmod>
 80049b2:	4603      	mov	r3, r0
 80049b4:	460c      	mov	r4, r1
 80049b6:	461a      	mov	r2, r3
 80049b8:	4b9a      	ldr	r3, [pc, #616]	; (8004c24 <UART_SetConfig+0x6f4>)
 80049ba:	fba3 1302 	umull	r1, r3, r3, r2
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2164      	movs	r1, #100	; 0x64
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	3332      	adds	r3, #50	; 0x32
 80049cc:	4a95      	ldr	r2, [pc, #596]	; (8004c24 <UART_SetConfig+0x6f4>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049d8:	4498      	add	r8, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	469b      	mov	fp, r3
 80049de:	f04f 0c00 	mov.w	ip, #0
 80049e2:	46d9      	mov	r9, fp
 80049e4:	46e2      	mov	sl, ip
 80049e6:	eb19 0309 	adds.w	r3, r9, r9
 80049ea:	eb4a 040a 	adc.w	r4, sl, sl
 80049ee:	4699      	mov	r9, r3
 80049f0:	46a2      	mov	sl, r4
 80049f2:	eb19 090b 	adds.w	r9, r9, fp
 80049f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a0e:	4689      	mov	r9, r1
 8004a10:	4692      	mov	sl, r2
 8004a12:	eb1b 0509 	adds.w	r5, fp, r9
 8004a16:	eb4c 060a 	adc.w	r6, ip, sl
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	f04f 0400 	mov.w	r4, #0
 8004a2c:	0094      	lsls	r4, r2, #2
 8004a2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a32:	008b      	lsls	r3, r1, #2
 8004a34:	461a      	mov	r2, r3
 8004a36:	4623      	mov	r3, r4
 8004a38:	4628      	mov	r0, r5
 8004a3a:	4631      	mov	r1, r6
 8004a3c:	f7fc f82e 	bl	8000a9c <__aeabi_uldivmod>
 8004a40:	4603      	mov	r3, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	461a      	mov	r2, r3
 8004a46:	4b77      	ldr	r3, [pc, #476]	; (8004c24 <UART_SetConfig+0x6f4>)
 8004a48:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	2164      	movs	r1, #100	; 0x64
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	3332      	adds	r3, #50	; 0x32
 8004a5a:	4a72      	ldr	r2, [pc, #456]	; (8004c24 <UART_SetConfig+0x6f4>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	f003 020f 	and.w	r2, r3, #15
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4442      	add	r2, r8
 8004a6c:	609a      	str	r2, [r3, #8]
 8004a6e:	e0d0      	b.n	8004c12 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a70:	f7fe fab8 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8004a74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	469a      	mov	sl, r3
 8004a7a:	f04f 0b00 	mov.w	fp, #0
 8004a7e:	46d0      	mov	r8, sl
 8004a80:	46d9      	mov	r9, fp
 8004a82:	eb18 0308 	adds.w	r3, r8, r8
 8004a86:	eb49 0409 	adc.w	r4, r9, r9
 8004a8a:	4698      	mov	r8, r3
 8004a8c:	46a1      	mov	r9, r4
 8004a8e:	eb18 080a 	adds.w	r8, r8, sl
 8004a92:	eb49 090b 	adc.w	r9, r9, fp
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004aa2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004aa6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004aaa:	4688      	mov	r8, r1
 8004aac:	4691      	mov	r9, r2
 8004aae:	eb1a 0508 	adds.w	r5, sl, r8
 8004ab2:	eb4b 0609 	adc.w	r6, fp, r9
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4619      	mov	r1, r3
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	f04f 0400 	mov.w	r4, #0
 8004ac8:	0094      	lsls	r4, r2, #2
 8004aca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ace:	008b      	lsls	r3, r1, #2
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4623      	mov	r3, r4
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	4631      	mov	r1, r6
 8004ad8:	f7fb ffe0 	bl	8000a9c <__aeabi_uldivmod>
 8004adc:	4603      	mov	r3, r0
 8004ade:	460c      	mov	r4, r1
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4b50      	ldr	r3, [pc, #320]	; (8004c24 <UART_SetConfig+0x6f4>)
 8004ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	469b      	mov	fp, r3
 8004af2:	f04f 0c00 	mov.w	ip, #0
 8004af6:	46d9      	mov	r9, fp
 8004af8:	46e2      	mov	sl, ip
 8004afa:	eb19 0309 	adds.w	r3, r9, r9
 8004afe:	eb4a 040a 	adc.w	r4, sl, sl
 8004b02:	4699      	mov	r9, r3
 8004b04:	46a2      	mov	sl, r4
 8004b06:	eb19 090b 	adds.w	r9, r9, fp
 8004b0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b0e:	f04f 0100 	mov.w	r1, #0
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b22:	4689      	mov	r9, r1
 8004b24:	4692      	mov	sl, r2
 8004b26:	eb1b 0509 	adds.w	r5, fp, r9
 8004b2a:	eb4c 060a 	adc.w	r6, ip, sl
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4619      	mov	r1, r3
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	f04f 0400 	mov.w	r4, #0
 8004b40:	0094      	lsls	r4, r2, #2
 8004b42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b46:	008b      	lsls	r3, r1, #2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4623      	mov	r3, r4
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	4631      	mov	r1, r6
 8004b50:	f7fb ffa4 	bl	8000a9c <__aeabi_uldivmod>
 8004b54:	4603      	mov	r3, r0
 8004b56:	460c      	mov	r4, r1
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4b32      	ldr	r3, [pc, #200]	; (8004c24 <UART_SetConfig+0x6f4>)
 8004b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	2164      	movs	r1, #100	; 0x64
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	3332      	adds	r3, #50	; 0x32
 8004b6e:	4a2d      	ldr	r2, [pc, #180]	; (8004c24 <UART_SetConfig+0x6f4>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b7a:	4498      	add	r8, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	469b      	mov	fp, r3
 8004b80:	f04f 0c00 	mov.w	ip, #0
 8004b84:	46d9      	mov	r9, fp
 8004b86:	46e2      	mov	sl, ip
 8004b88:	eb19 0309 	adds.w	r3, r9, r9
 8004b8c:	eb4a 040a 	adc.w	r4, sl, sl
 8004b90:	4699      	mov	r9, r3
 8004b92:	46a2      	mov	sl, r4
 8004b94:	eb19 090b 	adds.w	r9, r9, fp
 8004b98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b9c:	f04f 0100 	mov.w	r1, #0
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ba8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bb0:	4689      	mov	r9, r1
 8004bb2:	4692      	mov	sl, r2
 8004bb4:	eb1b 0509 	adds.w	r5, fp, r9
 8004bb8:	eb4c 060a 	adc.w	r6, ip, sl
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	f04f 0400 	mov.w	r4, #0
 8004bce:	0094      	lsls	r4, r2, #2
 8004bd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bd4:	008b      	lsls	r3, r1, #2
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4623      	mov	r3, r4
 8004bda:	4628      	mov	r0, r5
 8004bdc:	4631      	mov	r1, r6
 8004bde:	f7fb ff5d 	bl	8000a9c <__aeabi_uldivmod>
 8004be2:	4603      	mov	r3, r0
 8004be4:	460c      	mov	r4, r1
 8004be6:	461a      	mov	r2, r3
 8004be8:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <UART_SetConfig+0x6f4>)
 8004bea:	fba3 1302 	umull	r1, r3, r3, r2
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2164      	movs	r1, #100	; 0x64
 8004bf2:	fb01 f303 	mul.w	r3, r1, r3
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	3332      	adds	r3, #50	; 0x32
 8004bfc:	4a09      	ldr	r2, [pc, #36]	; (8004c24 <UART_SetConfig+0x6f4>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	f003 020f 	and.w	r2, r3, #15
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4442      	add	r2, r8
 8004c0e:	609a      	str	r2, [r3, #8]
}
 8004c10:	e7ff      	b.n	8004c12 <UART_SetConfig+0x6e2>
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1c:	40011000 	.word	0x40011000
 8004c20:	40011400 	.word	0x40011400
 8004c24:	51eb851f 	.word	0x51eb851f

08004c28 <LCD1602A_sendCommand>:
static uint8_t LCD_I2C_SLAVE_ADDRESS = 0;


/* Private functions */
static void LCD1602A_sendCommand(uint8_t command)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	4603      	mov	r3, r0
 8004c30:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command << 4));
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	f023 030f 	bic.w	r3, r3, #15
 8004c3e:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8004c40:	7bbb      	ldrb	r3, [r7, #14]
 8004c42:	f043 030c 	orr.w	r3, r3, #12
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	723b      	strb	r3, [r7, #8]
 8004c4a:	7bbb      	ldrb	r3, [r7, #14]
 8004c4c:	f043 0308 	orr.w	r3, r3, #8
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	727b      	strb	r3, [r7, #9]
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
 8004c56:	f043 030c 	orr.w	r3, r3, #12
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	72bb      	strb	r3, [r7, #10]
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	f043 0308 	orr.w	r3, r3, #8
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(LCD1602A_hi2c, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8004c68:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <LCD1602A_sendCommand+0x60>)
 8004c6a:	6818      	ldr	r0, [r3, #0]
 8004c6c:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <LCD1602A_sendCommand+0x64>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	b299      	uxth	r1, r3
 8004c72:	f107 0208 	add.w	r2, r7, #8
 8004c76:	23c8      	movs	r3, #200	; 0xc8
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	f7fd fc8a 	bl	8002594 <HAL_I2C_Master_Transmit>
}
 8004c80:	bf00      	nop
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	2000008c 	.word	0x2000008c
 8004c8c:	20000090 	.word	0x20000090

08004c90 <LCD1602A_sendData>:

static void LCD1602A_sendData(uint8_t data)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data << 4));
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	f023 030f 	bic.w	r3, r3, #15
 8004ca6:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8004ca8:	7bbb      	ldrb	r3, [r7, #14]
 8004caa:	f043 030d 	orr.w	r3, r3, #13
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	723b      	strb	r3, [r7, #8]
 8004cb2:	7bbb      	ldrb	r3, [r7, #14]
 8004cb4:	f043 0309 	orr.w	r3, r3, #9
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	727b      	strb	r3, [r7, #9]
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	f043 030d 	orr.w	r3, r3, #13
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	72bb      	strb	r3, [r7, #10]
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	f043 0309 	orr.w	r3, r3, #9
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(LCD1602A_hi2c, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <LCD1602A_sendData+0x60>)
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <LCD1602A_sendData+0x64>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	b299      	uxth	r1, r3
 8004cda:	f107 0208 	add.w	r2, r7, #8
 8004cde:	23c8      	movs	r3, #200	; 0xc8
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	2304      	movs	r3, #4
 8004ce4:	f7fd fc56 	bl	8002594 <HAL_I2C_Master_Transmit>
}
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	2000008c 	.word	0x2000008c
 8004cf4:	20000090 	.word	0x20000090

08004cf8 <LCD1602A_init>:


// LCD Init
uint8_t LCD1602A_init(I2C_HandleTypeDef *pI2cHandle)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);
 8004d00:	2032      	movs	r0, #50	; 0x32
 8004d02:	f7fc f8bd 	bl	8000e80 <HAL_Delay>

    LCD1602A_hi2c = pI2cHandle;
 8004d06:	4a30      	ldr	r2, [pc, #192]	; (8004dc8 <LCD1602A_init+0xd0>)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6013      	str	r3, [r2, #0]

    // Look For Proper I2C Slave Address
    if(HAL_I2C_IsDeviceReady(LCD1602A_hi2c, LCD_I2C_SLAVE_ADDRESS_0, 5, 100) != HAL_OK)
 8004d0c:	4b2e      	ldr	r3, [pc, #184]	; (8004dc8 <LCD1602A_init+0xd0>)
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	2364      	movs	r3, #100	; 0x64
 8004d12:	2205      	movs	r2, #5
 8004d14:	214e      	movs	r1, #78	; 0x4e
 8004d16:	f7fd fd3b 	bl	8002790 <HAL_I2C_IsDeviceReady>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00f      	beq.n	8004d40 <LCD1602A_init+0x48>
    {
    	if(HAL_I2C_IsDeviceReady(LCD1602A_hi2c, LCD_I2C_SLAVE_ADDRESS_1, 5, 100) != HAL_OK)
 8004d20:	4b29      	ldr	r3, [pc, #164]	; (8004dc8 <LCD1602A_init+0xd0>)
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	2364      	movs	r3, #100	; 0x64
 8004d26:	2205      	movs	r2, #5
 8004d28:	217e      	movs	r1, #126	; 0x7e
 8004d2a:	f7fd fd31 	bl	8002790 <HAL_I2C_IsDeviceReady>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <LCD1602A_init+0x40>
        {
    		return FALSE;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e042      	b.n	8004dbe <LCD1602A_init+0xc6>
        }
        else
        {
            LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8004d38:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <LCD1602A_init+0xd4>)
 8004d3a:	227e      	movs	r2, #126	; 0x7e
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	e002      	b.n	8004d46 <LCD1602A_init+0x4e>
        }
    }
    else
    {
	    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8004d40:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <LCD1602A_init+0xd4>)
 8004d42:	224e      	movs	r2, #78	; 0x4e
 8004d44:	701a      	strb	r2, [r3, #0]
    }

    // Initialise LCD For 4-bit Operation
    HAL_Delay(50);
 8004d46:	2032      	movs	r0, #50	; 0x32
 8004d48:	f7fc f89a 	bl	8000e80 <HAL_Delay>

    // Attentions Sequence
    LCD1602A_sendCommand(0x30);
 8004d4c:	2030      	movs	r0, #48	; 0x30
 8004d4e:	f7ff ff6b 	bl	8004c28 <LCD1602A_sendCommand>
    HAL_Delay(5);
 8004d52:	2005      	movs	r0, #5
 8004d54:	f7fc f894 	bl	8000e80 <HAL_Delay>
    LCD1602A_sendCommand(0x30);
 8004d58:	2030      	movs	r0, #48	; 0x30
 8004d5a:	f7ff ff65 	bl	8004c28 <LCD1602A_sendCommand>
    HAL_Delay(1);
 8004d5e:	2001      	movs	r0, #1
 8004d60:	f7fc f88e 	bl	8000e80 <HAL_Delay>
    LCD1602A_sendCommand(0x30);
 8004d64:	2030      	movs	r0, #48	; 0x30
 8004d66:	f7ff ff5f 	bl	8004c28 <LCD1602A_sendCommand>
    HAL_Delay(8);
 8004d6a:	2008      	movs	r0, #8
 8004d6c:	f7fc f888 	bl	8000e80 <HAL_Delay>
    LCD1602A_sendCommand(0x20);
 8004d70:	2020      	movs	r0, #32
 8004d72:	f7ff ff59 	bl	8004c28 <LCD1602A_sendCommand>
    HAL_Delay(8);
 8004d76:	2008      	movs	r0, #8
 8004d78:	f7fc f882 	bl	8000e80 <HAL_Delay>

    LCD1602A_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8004d7c:	2028      	movs	r0, #40	; 0x28
 8004d7e:	f7ff ff53 	bl	8004c28 <LCD1602A_sendCommand>
    HAL_Delay(1);
 8004d82:	2001      	movs	r0, #1
 8004d84:	f7fc f87c 	bl	8000e80 <HAL_Delay>
    LCD1602A_sendCommand(LCD_DISPLAYCONTROL);
 8004d88:	2008      	movs	r0, #8
 8004d8a:	f7ff ff4d 	bl	8004c28 <LCD1602A_sendCommand>
    HAL_Delay(1);
 8004d8e:	2001      	movs	r0, #1
 8004d90:	f7fc f876 	bl	8000e80 <HAL_Delay>
    LCD1602A_sendCommand(LCD_CLEARDISPLAY);
 8004d94:	2001      	movs	r0, #1
 8004d96:	f7ff ff47 	bl	8004c28 <LCD1602A_sendCommand>
    HAL_Delay(3);
 8004d9a:	2003      	movs	r0, #3
 8004d9c:	f7fc f870 	bl	8000e80 <HAL_Delay>
    LCD1602A_sendCommand(0x04 | LCD_ENTRY_ID);
 8004da0:	2006      	movs	r0, #6
 8004da2:	f7ff ff41 	bl	8004c28 <LCD1602A_sendCommand>
    HAL_Delay(1);
 8004da6:	2001      	movs	r0, #1
 8004da8:	f7fc f86a 	bl	8000e80 <HAL_Delay>
    LCD1602A_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8004dac:	200c      	movs	r0, #12
 8004dae:	f7ff ff3b 	bl	8004c28 <LCD1602A_sendCommand>
    HAL_Delay(3);
 8004db2:	2003      	movs	r0, #3
 8004db4:	f7fc f864 	bl	8000e80 <HAL_Delay>

    LCD1602A_clear();
 8004db8:	f000 f82e 	bl	8004e18 <LCD1602A_clear>
    return TRUE;
 8004dbc:	2301      	movs	r3, #1
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	2000008c 	.word	0x2000008c
 8004dcc:	20000090 	.word	0x20000090

08004dd0 <LCD1602A_setCursor>:

// Set Cursor
void LCD1602A_setCursor(uint8_t row, uint8_t col)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	460a      	mov	r2, r1
 8004dda:	71fb      	strb	r3, [r7, #7]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	71bb      	strb	r3, [r7, #6]
    uint8_t maskData;
    maskData = (col) & 0x0F;
 8004de0:	79bb      	ldrb	r3, [r7, #6]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	73fb      	strb	r3, [r7, #15]
    if(row == 0)
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d108      	bne.n	8004e00 <LCD1602A_setCursor+0x30>
    {
    	maskData |= 0x80;
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004df4:	73fb      	strb	r3, [r7, #15]
    	LCD1602A_sendCommand(maskData);
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ff15 	bl	8004c28 <LCD1602A_sendCommand>
    else
    {
    	maskData |= 0xC0;
    	LCD1602A_sendCommand(maskData);
    }
}
 8004dfe:	e007      	b.n	8004e10 <LCD1602A_setCursor+0x40>
    	maskData |= 0xC0;
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004e06:	73fb      	strb	r3, [r7, #15]
    	LCD1602A_sendCommand(maskData);
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff ff0c 	bl	8004c28 <LCD1602A_sendCommand>
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <LCD1602A_clear>:

// LCD Clear
void LCD1602A_clear(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
	LCD1602A_sendCommand(LCD_CLEARDISPLAY);
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	f7ff ff03 	bl	8004c28 <LCD1602A_sendCommand>
	HAL_Delay(3);
 8004e22:	2003      	movs	r0, #3
 8004e24:	f7fc f82c 	bl	8000e80 <HAL_Delay>
}
 8004e28:	bf00      	nop
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <LCD1602A_printf>:

// Print String On LCD - not written by me - idk what it exactly does for now, but works fine
void LCD1602A_printf(const char* str, ...)
{
 8004e2c:	b40f      	push	{r0, r1, r2, r3}
 8004e2e:	b590      	push	{r4, r7, lr}
 8004e30:	b089      	sub	sp, #36	; 0x24
 8004e32:	af00      	add	r7, sp, #0
	char stringArray[20];
	va_list args;

	va_start(args, str);
 8004e34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e38:	607b      	str	r3, [r7, #4]
	vsprintf(stringArray, str, args);
 8004e3a:	f107 0308 	add.w	r3, r7, #8
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 fd1a 	bl	800687c <vsiprintf>
	va_end(args);

	for(uint8_t i = 0;  i < strlen(stringArray) && i < 16; i++)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e00b      	b.n	8004e66 <LCD1602A_printf+0x3a>
	{
		LCD1602A_sendData((uint8_t)stringArray[i]);
 8004e4e:	7ffb      	ldrb	r3, [r7, #31]
 8004e50:	f107 0220 	add.w	r2, r7, #32
 8004e54:	4413      	add	r3, r2
 8004e56:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff ff18 	bl	8004c90 <LCD1602A_sendData>
	for(uint8_t i = 0;  i < strlen(stringArray) && i < 16; i++)
 8004e60:	7ffb      	ldrb	r3, [r7, #31]
 8004e62:	3301      	adds	r3, #1
 8004e64:	77fb      	strb	r3, [r7, #31]
 8004e66:	7ffc      	ldrb	r4, [r7, #31]
 8004e68:	f107 0308 	add.w	r3, r7, #8
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fb f9cf 	bl	8000210 <strlen>
 8004e72:	4603      	mov	r3, r0
 8004e74:	429c      	cmp	r4, r3
 8004e76:	d202      	bcs.n	8004e7e <LCD1602A_printf+0x52>
 8004e78:	7ffb      	ldrb	r3, [r7, #31]
 8004e7a:	2b0f      	cmp	r3, #15
 8004e7c:	d9e7      	bls.n	8004e4e <LCD1602A_printf+0x22>
	}
}
 8004e7e:	bf00      	nop
 8004e80:	3724      	adds	r7, #36	; 0x24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004e88:	b004      	add	sp, #16
 8004e8a:	4770      	bx	lr

08004e8c <NRF24_CSN>:

/*########################### CSN / CE OPERATIONS ###########################################*/

// CSN
static void NRF24_CSN(uint8_t state)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	71fb      	strb	r3, [r7, #7]
	if (state)
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <NRF24_CSN+0x22>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <NRF24_CSN+0x3c>)
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <NRF24_CSN+0x40>)
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	f7fd fa22 	bl	80022f0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8004eac:	e007      	b.n	8004ebe <NRF24_CSN+0x32>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <NRF24_CSN+0x3c>)
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <NRF24_CSN+0x40>)
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f7fd fa19 	bl	80022f0 <HAL_GPIO_WritePin>
}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000094 	.word	0x20000094
 8004ecc:	20000098 	.word	0x20000098

08004ed0 <NRF24_CE>:

// CE
static void NRF24_CE(uint8_t state)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	71fb      	strb	r3, [r7, #7]
	if (state)
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <NRF24_CE+0x22>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <NRF24_CE+0x3c>)
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <NRF24_CE+0x40>)
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	4619      	mov	r1, r3
 8004eec:	f7fd fa00 	bl	80022f0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8004ef0:	e007      	b.n	8004f02 <NRF24_CE+0x32>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <NRF24_CE+0x3c>)
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <NRF24_CE+0x40>)
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	4619      	mov	r1, r3
 8004efe:	f7fd f9f7 	bl	80022f0 <HAL_GPIO_WritePin>
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000094 	.word	0x20000094
 8004f10:	2000009a 	.word	0x2000009a

08004f14 <NRF24_read_register>:

/*##################### BASIC READ / WRITE REGISTER OPERATIONS ##############################*/

// Read Single Byte From Register
static uint8_t NRF24_read_register(uint8_t reg)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8004f1e:	2000      	movs	r0, #0
 8004f20:	f7ff ffb4 	bl	8004e8c <NRF24_CSN>

	//Transmit register address
	SPI_Buf[0] = reg & CMD_REGISTER_MASK;
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, SPI_Buf, 1, 100);
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <NRF24_read_register+0x4c>)
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	f107 010c 	add.w	r1, r7, #12
 8004f36:	2364      	movs	r3, #100	; 0x64
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f7fe fcd9 	bl	80038f0 <HAL_SPI_Transmit>

	//Receive data
	HAL_SPI_Receive(nrf24_hspi, &SPI_Buf[1], 1, 100);
 8004f3e:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <NRF24_read_register+0x4c>)
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	f107 030c 	add.w	r3, r7, #12
 8004f46:	1c59      	adds	r1, r3, #1
 8004f48:	2364      	movs	r3, #100	; 0x64
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f7fe fe04 	bl	8003b58 <HAL_SPI_Receive>

	NRF24_CSN(HIGH);
 8004f50:	2001      	movs	r0, #1
 8004f52:	f7ff ff9b 	bl	8004e8c <NRF24_CSN>

	return SPI_Buf[1];
 8004f56:	7b7b      	ldrb	r3, [r7, #13]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	2000009c 	.word	0x2000009c

08004f64 <NRF24_read_registerN>:

// Read Multiple Bytes From Register
static void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	71fb      	strb	r3, [r7, #7]
 8004f70:	4613      	mov	r3, r2
 8004f72:	71bb      	strb	r3, [r7, #6]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8004f74:	2000      	movs	r0, #0
 8004f76:	f7ff ff89 	bl	8004e8c <NRF24_CSN>

	//Transmit register address
	SPI_Buf[0] = reg & CMD_REGISTER_MASK;
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, SPI_Buf, 1, 100);
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <NRF24_read_registerN+0x50>)
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	f107 010c 	add.w	r1, r7, #12
 8004f8c:	2364      	movs	r3, #100	; 0x64
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f7fe fcae 	bl	80038f0 <HAL_SPI_Transmit>

	//Receive data
	HAL_SPI_Receive(nrf24_hspi, buf, len, 100);
 8004f94:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <NRF24_read_registerN+0x50>)
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	79bb      	ldrb	r3, [r7, #6]
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	2364      	movs	r3, #100	; 0x64
 8004f9e:	6839      	ldr	r1, [r7, #0]
 8004fa0:	f7fe fdda 	bl	8003b58 <HAL_SPI_Receive>

	NRF24_CSN(HIGH);
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f7ff ff71 	bl	8004e8c <NRF24_CSN>
}
 8004faa:	bf00      	nop
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	2000009c 	.word	0x2000009c

08004fb8 <NRF24_write_register>:

// Write Single Byte To Register
static void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	460a      	mov	r2, r1
 8004fc2:	71fb      	strb	r3, [r7, #7]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	71bb      	strb	r3, [r7, #6]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8004fc8:	2000      	movs	r0, #0
 8004fca:	f7ff ff5f 	bl	8004e8c <NRF24_CSN>

	//Transmit register address and data
	SPI_Buf[0] = reg | CMD_W_REGISTER;
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	f043 0320 	orr.w	r3, r3, #32
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	733b      	strb	r3, [r7, #12]
	SPI_Buf[1] = value;
 8004fd8:	79bb      	ldrb	r3, [r7, #6]
 8004fda:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(nrf24_hspi, SPI_Buf, 2, 100);
 8004fdc:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <NRF24_write_register+0x44>)
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	f107 010c 	add.w	r1, r7, #12
 8004fe4:	2364      	movs	r3, #100	; 0x64
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f7fe fc82 	bl	80038f0 <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 8004fec:	2001      	movs	r0, #1
 8004fee:	f7ff ff4d 	bl	8004e8c <NRF24_CSN>
}
 8004ff2:	bf00      	nop
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	2000009c 	.word	0x2000009c

08005000 <NRF24_write_registerN>:

// Write Multiple Bytes To Register
static void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	71fb      	strb	r3, [r7, #7]
 800500c:	4613      	mov	r3, r2
 800500e:	71bb      	strb	r3, [r7, #6]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8005010:	2000      	movs	r0, #0
 8005012:	f7ff ff3b 	bl	8004e8c <NRF24_CSN>

	//Transmit register address and data
	SPI_Buf[0] = reg | CMD_W_REGISTER;
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	f043 0320 	orr.w	r3, r3, #32
 800501c:	b2db      	uxtb	r3, r3
 800501e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, SPI_Buf, 1, 100);
 8005020:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <NRF24_write_registerN+0x50>)
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	f107 010c 	add.w	r1, r7, #12
 8005028:	2364      	movs	r3, #100	; 0x64
 800502a:	2201      	movs	r2, #1
 800502c:	f7fe fc60 	bl	80038f0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf24_hspi, (uint8_t*)buf, len, 100);
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <NRF24_write_registerN+0x50>)
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	79bb      	ldrb	r3, [r7, #6]
 8005036:	b29a      	uxth	r2, r3
 8005038:	2364      	movs	r3, #100	; 0x64
 800503a:	6839      	ldr	r1, [r7, #0]
 800503c:	f7fe fc58 	bl	80038f0 <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 8005040:	2001      	movs	r0, #1
 8005042:	f7ff ff23 	bl	8004e8c <NRF24_CSN>
}
 8005046:	bf00      	nop
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	2000009c 	.word	0x2000009c

08005054 <NRF24_ACTIVATE_cmd>:

/*########################### CUSTOM SETTINGS AND COMMANDS ##################################*/

// Activate CMD
static void NRF24_ACTIVATE_cmd(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];

	NRF24_CSN(LOW);
 800505a:	2000      	movs	r0, #0
 800505c:	f7ff ff16 	bl	8004e8c <NRF24_CSN>

	//Read data from Rx payload buffer
	cmdRxBuf[0] = CMD_ACTIVATE;
 8005060:	2350      	movs	r3, #80	; 0x50
 8005062:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8005064:	2373      	movs	r3, #115	; 0x73
 8005066:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(nrf24_hspi, cmdRxBuf, 2, 100);
 8005068:	4b06      	ldr	r3, [pc, #24]	; (8005084 <NRF24_ACTIVATE_cmd+0x30>)
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	1d39      	adds	r1, r7, #4
 800506e:	2364      	movs	r3, #100	; 0x64
 8005070:	2202      	movs	r2, #2
 8005072:	f7fe fc3d 	bl	80038f0 <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 8005076:	2001      	movs	r0, #1
 8005078:	f7ff ff08 	bl	8004e8c <NRF24_CSN>
}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	2000009c 	.word	0x2000009c

08005088 <NRF24_resetStatus>:

// Reset Status
static void NRF24_resetStatus(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS, NRF24_read_register(REG_CONFIG) & MASK_REG_CONFIG_RESET_STATUS);
 800508c:	2000      	movs	r0, #0
 800508e:	f7ff ff41 	bl	8004f14 <NRF24_read_register>
 8005092:	4603      	mov	r3, r0
 8005094:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005098:	b2db      	uxtb	r3, r3
 800509a:	4619      	mov	r1, r3
 800509c:	2007      	movs	r0, #7
 800509e:	f7ff ff8b 	bl	8004fb8 <NRF24_write_register>
}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <NRF24_powerDown>:

// Power Down
static void NRF24_powerDown(void)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) & ~MASK_REG_CONFIG_POWER);
 80050aa:	2000      	movs	r0, #0
 80050ac:	f7ff ff32 	bl	8004f14 <NRF24_read_register>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f023 0302 	bic.w	r3, r3, #2
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	4619      	mov	r1, r3
 80050ba:	2000      	movs	r0, #0
 80050bc:	f7ff ff7c 	bl	8004fb8 <NRF24_write_register>
}
 80050c0:	bf00      	nop
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <NRF24_available>:

/*############################### PIPE OPERATIONS ###########################################*/

// Check For Available Data To Read
uint8_t NRF24_available(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
	uint8_t status = NRF24_read_register(REG_STATUS);
 80050ca:	2007      	movs	r0, #7
 80050cc:	f7ff ff22 	bl	8004f14 <NRF24_read_register>
 80050d0:	4603      	mov	r3, r0
 80050d2:	71fb      	strb	r3, [r7, #7]

	uint8_t result = (status & MASK_REG_CONFIG_RX_DX);
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	71bb      	strb	r3, [r7, #6]

	if (result)
 80050dc:	79bb      	ldrb	r3, [r7, #6]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00c      	beq.n	80050fc <NRF24_available+0x38>
	{
		// Clear the status bit
		NRF24_write_register(REG_STATUS, MASK_REG_CONFIG_RX_DX );
 80050e2:	2140      	movs	r1, #64	; 0x40
 80050e4:	2007      	movs	r0, #7
 80050e6:	f7ff ff67 	bl	8004fb8 <NRF24_write_register>

		// Handle ack payload receipt
		if (status & MASK_REG_CONFIG_TX_DS)
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <NRF24_available+0x38>
		{
			NRF24_write_register(REG_STATUS, MASK_REG_CONFIG_TX_DS);
 80050f4:	2120      	movs	r1, #32
 80050f6:	2007      	movs	r0, #7
 80050f8:	f7ff ff5e 	bl	8004fb8 <NRF24_write_register>
		}
	}
	return result;
 80050fc:	79bb      	ldrb	r3, [r7, #6]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <NRF24_write>:

// Write Data
uint8_t NRF24_write( const void* buf, uint8_t len )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	70fb      	strb	r3, [r7, #3]
	// Data monitor
	uint8_t retStatus;
	uint8_t observe_tx;
	uint8_t status;
	const uint32_t timeout = 10;
 8005114:	230a      	movs	r3, #10
 8005116:	617b      	str	r3, [r7, #20]

	NRF24_resetStatus();
 8005118:	f7ff ffb6 	bl	8005088 <NRF24_resetStatus>

	// Transmitter power-up
	NRF24_CE(LOW);
 800511c:	2000      	movs	r0, #0
 800511e:	f7ff fed7 	bl	8004ed0 <NRF24_CE>

	NRF24_write_register(REG_CONFIG, (NRF24_read_register(REG_CONFIG) | MASK_REG_CONFIG_POWER) & ~MASK_REG_CONFIG_PRIM_RX);
 8005122:	2000      	movs	r0, #0
 8005124:	f7ff fef6 	bl	8004f14 <NRF24_read_register>
 8005128:	4603      	mov	r3, r0
 800512a:	f043 0302 	orr.w	r3, r3, #2
 800512e:	b2db      	uxtb	r3, r3
 8005130:	f023 0301 	bic.w	r3, r3, #1
 8005134:	b2db      	uxtb	r3, r3
 8005136:	4619      	mov	r1, r3
 8005138:	2000      	movs	r0, #0
 800513a:	f7ff ff3d 	bl	8004fb8 <NRF24_write_register>

	NRF24_CE(HIGH);
 800513e:	2001      	movs	r0, #1
 8005140:	f7ff fec6 	bl	8004ed0 <NRF24_CE>

	HAL_Delay(1);
 8005144:	2001      	movs	r0, #1
 8005146:	f7fb fe9b 	bl	8000e80 <HAL_Delay>

	// Send the payload
	uint8_t wrPayloadCmd;

	NRF24_CSN(LOW);
 800514a:	2000      	movs	r0, #0
 800514c:	f7ff fe9e 	bl	8004e8c <NRF24_CSN>

	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8005150:	23a0      	movs	r3, #160	; 0xa0
 8005152:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, &wrPayloadCmd, 1, 100);
 8005154:	4b23      	ldr	r3, [pc, #140]	; (80051e4 <NRF24_write+0xdc>)
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	f107 010c 	add.w	r1, r7, #12
 800515c:	2364      	movs	r3, #100	; 0x64
 800515e:	2201      	movs	r2, #1
 8005160:	f7fe fbc6 	bl	80038f0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf24_hspi, (uint8_t *)buf, len, 100);
 8005164:	4b1f      	ldr	r3, [pc, #124]	; (80051e4 <NRF24_write+0xdc>)
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	b29a      	uxth	r2, r3
 800516c:	2364      	movs	r3, #100	; 0x64
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	f7fe fbbe 	bl	80038f0 <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 8005174:	2001      	movs	r0, #1
 8005176:	f7ff fe89 	bl	8004e8c <NRF24_CSN>

	// Enable Tx for 1ms
	NRF24_CE(HIGH);
 800517a:	2001      	movs	r0, #1
 800517c:	f7ff fea8 	bl	8004ed0 <NRF24_CE>

	HAL_Delay(1);
 8005180:	2001      	movs	r0, #1
 8005182:	f7fb fe7d 	bl	8000e80 <HAL_Delay>

	NRF24_CE(LOW);
 8005186:	2000      	movs	r0, #0
 8005188:	f7ff fea2 	bl	8004ed0 <NRF24_CE>

	uint32_t sent_at = HAL_GetTick();
 800518c:	f7fb fe6c 	bl	8000e68 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]
	do
	{
		NRF24_read_registerN(REG_OBSERVE_TX, &observe_tx, 1);
 8005192:	f107 030d 	add.w	r3, r7, #13
 8005196:	2201      	movs	r2, #1
 8005198:	4619      	mov	r1, r3
 800519a:	2008      	movs	r0, #8
 800519c:	f7ff fee2 	bl	8004f64 <NRF24_read_registerN>

		//Get status register
		status = NRF24_read_register(REG_STATUS);
 80051a0:	2007      	movs	r0, #7
 80051a2:	f7ff feb7 	bl	8004f14 <NRF24_read_register>
 80051a6:	4603      	mov	r3, r0
 80051a8:	73fb      	strb	r3, [r7, #15]
	}
	while(!(status & MASK_REG_CONFIG_TX_DS_MAX_RT) && ((HAL_GetTick() - sent_at) < timeout ));
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d107      	bne.n	80051c4 <NRF24_write+0xbc>
 80051b4:	f7fb fe58 	bl	8000e68 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d8e6      	bhi.n	8005192 <NRF24_write+0x8a>

	retStatus = NRF24_read_register(REG_STATUS) & MASK_REG_CONFIG_TX_DS;
 80051c4:	2007      	movs	r0, #7
 80051c6:	f7ff fea5 	bl	8004f14 <NRF24_read_register>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	73bb      	strb	r3, [r7, #14]

	//Power down
	NRF24_available();
 80051d2:	f7ff ff77 	bl	80050c4 <NRF24_available>
	NRF24_flush_TX();
 80051d6:	f000 f907 	bl	80053e8 <NRF24_flush_TX>

	return retStatus;
 80051da:	7bbb      	ldrb	r3, [r7, #14]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	2000009c 	.word	0x2000009c

080051e8 <NRF24_openWritingPipe>:
	return rxStatus;
}

// Open TX Pipe
void NRF24_openWritingPipe(uint64_t address)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80051f2:	463b      	mov	r3, r7
 80051f4:	2205      	movs	r2, #5
 80051f6:	4619      	mov	r1, r3
 80051f8:	200a      	movs	r0, #10
 80051fa:	f7ff ff01 	bl	8005000 <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80051fe:	463b      	mov	r3, r7
 8005200:	2205      	movs	r2, #5
 8005202:	4619      	mov	r1, r3
 8005204:	2010      	movs	r0, #16
 8005206:	f7ff fefb 	bl	8005000 <NRF24_write_registerN>

	NRF24_write_register(REG_RX_PW_P0, payload_size);
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <NRF24_openWritingPipe+0x38>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	4619      	mov	r1, r3
 8005210:	2011      	movs	r0, #17
 8005212:	f7ff fed1 	bl	8004fb8 <NRF24_write_register>
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000091 	.word	0x20000091

08005224 <NRF24_stopListening>:
	HAL_Delay(1);
}

// Stop Listening On Pipes
void NRF24_stopListening(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
	NRF24_CE(LOW);
 8005228:	2000      	movs	r0, #0
 800522a:	f7ff fe51 	bl	8004ed0 <NRF24_CE>

	NRF24_flush_TX();
 800522e:	f000 f8db 	bl	80053e8 <NRF24_flush_TX>
	NRF24_flush_RX();
 8005232:	f000 f8e1 	bl	80053f8 <NRF24_flush_RX>
}
 8005236:	bf00      	nop
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <NRF24_init>:

/*########################## DEFAULT INITIALIZATION #########################################*/

// NRF24 INIT
void NRF24_init(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef *nrfSPI)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	607b      	str	r3, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	817b      	strh	r3, [r7, #10]
 800524a:	4613      	mov	r3, r2
 800524c:	813b      	strh	r3, [r7, #8]
	// Copy SPI handle, Pins And Port Variables
	nrf24_hspi = nrfSPI;
 800524e:	4a59      	ldr	r2, [pc, #356]	; (80053b4 <NRF24_init+0x178>)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6013      	str	r3, [r2, #0]

	nrf24_PORT 		= 	nrf24PORT;
 8005254:	4a58      	ldr	r2, [pc, #352]	; (80053b8 <NRF24_init+0x17c>)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN 	= 	nrfCSN_Pin;
 800525a:	4a58      	ldr	r2, [pc, #352]	; (80053bc <NRF24_init+0x180>)
 800525c:	897b      	ldrh	r3, [r7, #10]
 800525e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN 	= 	nrfCE_Pin;
 8005260:	4a57      	ldr	r2, [pc, #348]	; (80053c0 <NRF24_init+0x184>)
 8005262:	893b      	ldrh	r3, [r7, #8]
 8005264:	8013      	strh	r3, [r2, #0]

	// Put Pins To Idle State
	NRF24_CSN(HIGH);
 8005266:	2001      	movs	r0, #1
 8005268:	f7ff fe10 	bl	8004e8c <NRF24_CSN>
	NRF24_CE(LOW);
 800526c:	2000      	movs	r0, #0
 800526e:	f7ff fe2f 	bl	8004ed0 <NRF24_CE>

	// Initial Delay
	HAL_Delay(5);
 8005272:	2005      	movs	r0, #5
 8005274:	f7fb fe04 	bl	8000e80 <HAL_Delay>

	// Soft Reset Registers
	NRF24_write_register(REG_CONFIG, 		MASK_REG_CONFIG_2BYTES_CRC);
 8005278:	210c      	movs	r1, #12
 800527a:	2000      	movs	r0, #0
 800527c:	f7ff fe9c 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 		MASK_REG_EN_AA_AUTO_ACK_NO_PIPES);
 8005280:	2100      	movs	r1, #0
 8005282:	2001      	movs	r0, #1
 8005284:	f7ff fe98 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 	MASK_REG_EN_RXADDR_PIPES_1_2_ENABLE);
 8005288:	2103      	movs	r1, #3
 800528a:	2002      	movs	r0, #2
 800528c:	f7ff fe94 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 		MASK_REG_SETUP_AW_5BYTES_ADDR_FIELD);
 8005290:	2103      	movs	r1, #3
 8005292:	2003      	movs	r0, #3
 8005294:	f7ff fe90 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 	MASK_REG_SETUP_RETR_SET_15RETR_1250DELAY);
 8005298:	214f      	movs	r1, #79	; 0x4f
 800529a:	2004      	movs	r0, #4
 800529c:	f7ff fe8c 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 		MASK_REG_RF_CH_SET_CHANNEL_52);
 80052a0:	2134      	movs	r1, #52	; 0x34
 80052a2:	2005      	movs	r0, #5
 80052a4:	f7ff fe88 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 		MASK_REG_RF_SETUP_POWER_0DBM_2MBPS);
 80052a8:	210f      	movs	r1, #15
 80052aa:	2006      	movs	r0, #6
 80052ac:	f7ff fe84 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 		MASK_REG_STATUS_CLEAR);
 80052b0:	210e      	movs	r1, #14
 80052b2:	2007      	movs	r0, #7
 80052b4:	f7ff fe80 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 	MASK_REG_OBSERVE_TX_CLEAR);
 80052b8:	2100      	movs	r1, #0
 80052ba:	2008      	movs	r0, #8
 80052bc:	f7ff fe7c 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_CD, 			MASK_REG_CD_CLEAR);
 80052c0:	2100      	movs	r1, #0
 80052c2:	2009      	movs	r0, #9
 80052c4:	f7ff fe78 	bl	8004fb8 <NRF24_write_register>

	uint8_t pipeAddrVar[6];
	pipeAddrVar[4] = 0xE7;
 80052c8:	23e7      	movs	r3, #231	; 0xe7
 80052ca:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3] = 0xE7;
 80052cc:	23e7      	movs	r3, #231	; 0xe7
 80052ce:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2] = 0xE7;
 80052d0:	23e7      	movs	r3, #231	; 0xe7
 80052d2:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1] = 0xE7;
 80052d4:	23e7      	movs	r3, #231	; 0xe7
 80052d6:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0] = 0xE7;
 80052d8:	23e7      	movs	r3, #231	; 0xe7
 80052da:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 80052dc:	f107 0310 	add.w	r3, r7, #16
 80052e0:	2205      	movs	r2, #5
 80052e2:	4619      	mov	r1, r3
 80052e4:	200a      	movs	r0, #10
 80052e6:	f7ff fe8b 	bl	8005000 <NRF24_write_registerN>

	pipeAddrVar[4] = 0xC2;
 80052ea:	23c2      	movs	r3, #194	; 0xc2
 80052ec:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3] = 0xC2;
 80052ee:	23c2      	movs	r3, #194	; 0xc2
 80052f0:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2] = 0xC2;
 80052f2:	23c2      	movs	r3, #194	; 0xc2
 80052f4:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1] = 0xC2;
 80052f6:	23c2      	movs	r3, #194	; 0xc2
 80052f8:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0] = 0xC2;
 80052fa:	23c2      	movs	r3, #194	; 0xc2
 80052fc:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 80052fe:	f107 0310 	add.w	r3, r7, #16
 8005302:	2205      	movs	r2, #5
 8005304:	4619      	mov	r1, r3
 8005306:	200b      	movs	r0, #11
 8005308:	f7ff fe7a 	bl	8005000 <NRF24_write_registerN>

	NRF24_write_register(REG_RX_ADDR_P2, 	0xC3);
 800530c:	21c3      	movs	r1, #195	; 0xc3
 800530e:	200c      	movs	r0, #12
 8005310:	f7ff fe52 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 	0xC4);
 8005314:	21c4      	movs	r1, #196	; 0xc4
 8005316:	200d      	movs	r0, #13
 8005318:	f7ff fe4e 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 	0xC5);
 800531c:	21c5      	movs	r1, #197	; 0xc5
 800531e:	200e      	movs	r0, #14
 8005320:	f7ff fe4a 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 	0xC6);
 8005324:	21c6      	movs	r1, #198	; 0xc6
 8005326:	200f      	movs	r0, #15
 8005328:	f7ff fe46 	bl	8004fb8 <NRF24_write_register>

	pipeAddrVar[4] = 0xE7;
 800532c:	23e7      	movs	r3, #231	; 0xe7
 800532e:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3] = 0xE7;
 8005330:	23e7      	movs	r3, #231	; 0xe7
 8005332:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2] = 0xE7;
 8005334:	23e7      	movs	r3, #231	; 0xe7
 8005336:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1] = 0xE7;
 8005338:	23e7      	movs	r3, #231	; 0xe7
 800533a:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0] = 0xE7;
 800533c:	23e7      	movs	r3, #231	; 0xe7
 800533e:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 8005340:	f107 0310 	add.w	r3, r7, #16
 8005344:	2205      	movs	r2, #5
 8005346:	4619      	mov	r1, r3
 8005348:	2010      	movs	r0, #16
 800534a:	f7ff fe59 	bl	8005000 <NRF24_write_registerN>

	NRF24_write_register(REG_RX_PW_P0, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 800534e:	2100      	movs	r1, #0
 8005350:	2011      	movs	r0, #17
 8005352:	f7ff fe31 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 8005356:	2100      	movs	r1, #0
 8005358:	2012      	movs	r0, #18
 800535a:	f7ff fe2d 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 800535e:	2100      	movs	r1, #0
 8005360:	2013      	movs	r0, #19
 8005362:	f7ff fe29 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 8005366:	2100      	movs	r1, #0
 8005368:	2014      	movs	r0, #20
 800536a:	f7ff fe25 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 800536e:	2100      	movs	r1, #0
 8005370:	2015      	movs	r0, #21
 8005372:	f7ff fe21 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 8005376:	2100      	movs	r1, #0
 8005378:	2016      	movs	r0, #22
 800537a:	f7ff fe1d 	bl	8004fb8 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800537e:	f7ff fe69 	bl	8005054 <NRF24_ACTIVATE_cmd>

	NRF24_write_register(REG_DYNPD, 		MASK_REG_DYNPD_DISABLE_DYNAMIC_PAYLOAD);
 8005382:	2100      	movs	r1, #0
 8005384:	201c      	movs	r0, #28
 8005386:	f7ff fe17 	bl	8004fb8 <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 		MASK_REG_FEATURE_DISABLE_DYNAMIC_PAYLOAD);
 800538a:	2100      	movs	r1, #0
 800538c:	201d      	movs	r0, #29
 800538e:	f7ff fe13 	bl	8004fb8 <NRF24_write_register>

	printRadioSettings();
 8005392:	f000 f839 	bl	8005408 <printRadioSettings>

	//Set payload size
	payload_size = MIN(PAYLOAD_SIZE, MAX_PAYLOAD_SIZE);
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <NRF24_init+0x188>)
 8005398:	2202      	movs	r2, #2
 800539a:	701a      	strb	r2, [r3, #0]

	//Reset status register
	NRF24_resetStatus();
 800539c:	f7ff fe74 	bl	8005088 <NRF24_resetStatus>

	//Flush buffers
	NRF24_flush_TX();
 80053a0:	f000 f822 	bl	80053e8 <NRF24_flush_TX>
	NRF24_flush_RX();
 80053a4:	f000 f828 	bl	80053f8 <NRF24_flush_RX>

	NRF24_powerDown();
 80053a8:	f7ff fe7d 	bl	80050a6 <NRF24_powerDown>
}
 80053ac:	bf00      	nop
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	2000009c 	.word	0x2000009c
 80053b8:	20000094 	.word	0x20000094
 80053bc:	20000098 	.word	0x20000098
 80053c0:	2000009a 	.word	0x2000009a
 80053c4:	20000091 	.word	0x20000091

080053c8 <nrf24_DebugUART_Init>:

// Init UART Debug for NRF24
void nrf24_DebugUART_Init(UART_HandleTypeDef *nrf24Uart)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	nrf24_huart = nrf24Uart;
 80053d0:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <nrf24_DebugUART_Init+0x1c>)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6013      	str	r3, [r2, #0]
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	200000a0 	.word	0x200000a0

080053e8 <NRF24_flush_TX>:

/*############################ Flush RX / TX Functions ######################################*/

// Flush TX Buffer
static void NRF24_flush_TX(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, CMD_FLUSH);
 80053ec:	21ff      	movs	r1, #255	; 0xff
 80053ee:	20e1      	movs	r0, #225	; 0xe1
 80053f0:	f7ff fde2 	bl	8004fb8 <NRF24_write_register>
}
 80053f4:	bf00      	nop
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <NRF24_flush_RX>:

// Flush RX Buffer
static void NRF24_flush_RX(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, CMD_FLUSH);
 80053fc:	21ff      	movs	r1, #255	; 0xff
 80053fe:	20e2      	movs	r0, #226	; 0xe2
 8005400:	f7ff fdda 	bl	8004fb8 <NRF24_write_register>
}
 8005404:	bf00      	nop
 8005406:	bd80      	pop	{r7, pc}

08005408 <printRadioSettings>:

/*############################ PRINT SETTINGS FUNCTIONS #####################################*/

// Print Radio Settings
void printRadioSettings(void)
{
 8005408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800540a:	b0a1      	sub	sp, #132	; 0x84
 800540c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];

	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800540e:	f107 0308 	add.w	r3, r7, #8
 8005412:	4abc      	ldr	r2, [pc, #752]	; (8005704 <printRadioSettings+0x2fc>)
 8005414:	461c      	mov	r4, r3
 8005416:	4615      	mov	r5, r2
 8005418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800541a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800541c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800541e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	8022      	strh	r2, [r4, #0]
 800542a:	3402      	adds	r4, #2
 800542c:	0c1b      	lsrs	r3, r3, #16
 800542e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005430:	4bb5      	ldr	r3, [pc, #724]	; (8005708 <printRadioSettings+0x300>)
 8005432:	681c      	ldr	r4, [r3, #0]
 8005434:	f107 0308 	add.w	r3, r7, #8
 8005438:	4618      	mov	r0, r3
 800543a:	f7fa fee9 	bl	8000210 <strlen>
 800543e:	4603      	mov	r3, r0
 8005440:	b29a      	uxth	r2, r3
 8005442:	f107 0108 	add.w	r1, r7, #8
 8005446:	230a      	movs	r3, #10
 8005448:	4620      	mov	r0, r4
 800544a:	f7fe ff8e 	bl	800436a <HAL_UART_Transmit>

	// Print CRC Setting
	reg8Val = NRF24_read_register(REG_CONFIG);
 800544e:	2000      	movs	r0, #0
 8005450:	f7ff fd60 	bl	8004f14 <NRF24_read_register>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800545a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d020      	beq.n	80054a8 <printRadioSettings+0xa0>
	{
		if(reg8Val & (1 << 2))
 8005466:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <printRadioSettings+0x82>
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8005472:	f107 0308 	add.w	r3, r7, #8
 8005476:	4aa5      	ldr	r2, [pc, #660]	; (800570c <printRadioSettings+0x304>)
 8005478:	461c      	mov	r4, r3
 800547a:	4615      	mov	r5, r2
 800547c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800547e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005480:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005488:	e017      	b.n	80054ba <printRadioSettings+0xb2>
		else
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 800548a:	f107 0308 	add.w	r3, r7, #8
 800548e:	4aa0      	ldr	r2, [pc, #640]	; (8005710 <printRadioSettings+0x308>)
 8005490:	461c      	mov	r4, r3
 8005492:	4615      	mov	r5, r2
 8005494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800549c:	c403      	stmia	r4!, {r0, r1}
 800549e:	8022      	strh	r2, [r4, #0]
 80054a0:	3402      	adds	r4, #2
 80054a2:	0c13      	lsrs	r3, r2, #16
 80054a4:	7023      	strb	r3, [r4, #0]
 80054a6:	e008      	b.n	80054ba <printRadioSettings+0xb2>
	}
	else
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80054a8:	f107 0308 	add.w	r3, r7, #8
 80054ac:	4a99      	ldr	r2, [pc, #612]	; (8005714 <printRadioSettings+0x30c>)
 80054ae:	461c      	mov	r4, r3
 80054b0:	4615      	mov	r5, r2
 80054b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054b6:	682b      	ldr	r3, [r5, #0]
 80054b8:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80054ba:	4b93      	ldr	r3, [pc, #588]	; (8005708 <printRadioSettings+0x300>)
 80054bc:	681c      	ldr	r4, [r3, #0]
 80054be:	f107 0308 	add.w	r3, r7, #8
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fa fea4 	bl	8000210 <strlen>
 80054c8:	4603      	mov	r3, r0
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	f107 0108 	add.w	r1, r7, #8
 80054d0:	230a      	movs	r3, #10
 80054d2:	4620      	mov	r0, r4
 80054d4:	f7fe ff49 	bl	800436a <HAL_UART_Transmit>

	// Print Auto ACK Setting
	reg8Val = NRF24_read_register(REG_EN_AA);
 80054d8:	2001      	movs	r0, #1
 80054da:	f7ff fd1b 	bl	8004f14 <NRF24_read_register>
 80054de:	4603      	mov	r3, r0
 80054e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80054e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80054e8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	bfcc      	ite	gt
 80054f0:	2301      	movgt	r3, #1
 80054f2:	2300      	movle	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	461d      	mov	r5, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80054f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80054fc:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005500:	2b00      	cmp	r3, #0
 8005502:	bfcc      	ite	gt
 8005504:	2301      	movgt	r3, #1
 8005506:	2300      	movle	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	461e      	mov	r6, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 800550c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005510:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005514:	2b00      	cmp	r3, #0
 8005516:	bfcc      	ite	gt
 8005518:	2301      	movgt	r3, #1
 800551a:	2300      	movle	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	461a      	mov	r2, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8005520:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005524:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005528:	2b00      	cmp	r3, #0
 800552a:	bfcc      	ite	gt
 800552c:	2301      	movgt	r3, #1
 800552e:	2300      	movle	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	4619      	mov	r1, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8005534:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005538:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800553c:	2b00      	cmp	r3, #0
 800553e:	bfcc      	ite	gt
 8005540:	2301      	movgt	r3, #1
 8005542:	2300      	movle	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	461c      	mov	r4, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8005548:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800554c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005550:	2b00      	cmp	r3, #0
 8005552:	bfcc      	ite	gt
 8005554:	2301      	movgt	r3, #1
 8005556:	2300      	movle	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f107 0008 	add.w	r0, r7, #8
 800555e:	9303      	str	r3, [sp, #12]
 8005560:	9402      	str	r4, [sp, #8]
 8005562:	9101      	str	r1, [sp, #4]
 8005564:	9200      	str	r2, [sp, #0]
 8005566:	4633      	mov	r3, r6
 8005568:	462a      	mov	r2, r5
 800556a:	496b      	ldr	r1, [pc, #428]	; (8005718 <printRadioSettings+0x310>)
 800556c:	f001 f950 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005570:	4b65      	ldr	r3, [pc, #404]	; (8005708 <printRadioSettings+0x300>)
 8005572:	681c      	ldr	r4, [r3, #0]
 8005574:	f107 0308 	add.w	r3, r7, #8
 8005578:	4618      	mov	r0, r3
 800557a:	f7fa fe49 	bl	8000210 <strlen>
 800557e:	4603      	mov	r3, r0
 8005580:	b29a      	uxth	r2, r3
 8005582:	f107 0108 	add.w	r1, r7, #8
 8005586:	230a      	movs	r3, #10
 8005588:	4620      	mov	r0, r4
 800558a:	f7fe feee 	bl	800436a <HAL_UART_Transmit>

	// Print Enabled RX Addresses
	reg8Val = NRF24_read_register(REG_EN_RXADDR);
 800558e:	2002      	movs	r0, #2
 8005590:	f7ff fcc0 	bl	8004f14 <NRF24_read_register>
 8005594:	4603      	mov	r3, r0
 8005596:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 800559a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800559e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bfcc      	ite	gt
 80055a6:	2301      	movgt	r3, #1
 80055a8:	2300      	movle	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	461d      	mov	r5, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80055ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80055b2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	bfcc      	ite	gt
 80055ba:	2301      	movgt	r3, #1
 80055bc:	2300      	movle	r3, #0
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	461e      	mov	r6, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80055c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80055c6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bfcc      	ite	gt
 80055ce:	2301      	movgt	r3, #1
 80055d0:	2300      	movle	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80055d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80055da:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bfcc      	ite	gt
 80055e2:	2301      	movgt	r3, #1
 80055e4:	2300      	movle	r3, #0
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	4619      	mov	r1, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80055ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80055ee:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	bfcc      	ite	gt
 80055f6:	2301      	movgt	r3, #1
 80055f8:	2300      	movle	r3, #0
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	461c      	mov	r4, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80055fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005602:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005606:	2b00      	cmp	r3, #0
 8005608:	bfcc      	ite	gt
 800560a:	2301      	movgt	r3, #1
 800560c:	2300      	movle	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	f107 0008 	add.w	r0, r7, #8
 8005614:	9303      	str	r3, [sp, #12]
 8005616:	9402      	str	r4, [sp, #8]
 8005618:	9101      	str	r1, [sp, #4]
 800561a:	9200      	str	r2, [sp, #0]
 800561c:	4633      	mov	r3, r6
 800561e:	462a      	mov	r2, r5
 8005620:	493e      	ldr	r1, [pc, #248]	; (800571c <printRadioSettings+0x314>)
 8005622:	f001 f8f5 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005626:	4b38      	ldr	r3, [pc, #224]	; (8005708 <printRadioSettings+0x300>)
 8005628:	681c      	ldr	r4, [r3, #0]
 800562a:	f107 0308 	add.w	r3, r7, #8
 800562e:	4618      	mov	r0, r3
 8005630:	f7fa fdee 	bl	8000210 <strlen>
 8005634:	4603      	mov	r3, r0
 8005636:	b29a      	uxth	r2, r3
 8005638:	f107 0108 	add.w	r1, r7, #8
 800563c:	230a      	movs	r3, #10
 800563e:	4620      	mov	r0, r4
 8005640:	f7fe fe93 	bl	800436a <HAL_UART_Transmit>

	// Print Address Width
	reg8Val = NRF24_read_register(REG_SETUP_AW) & 0x03;
 8005644:	2003      	movs	r0, #3
 8005646:	f7ff fc65 	bl	8004f14 <NRF24_read_register>
 800564a:	4603      	mov	r3, r0
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val += 2;
 8005654:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005658:	3302      	adds	r3, #2
 800565a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800565e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8005662:	f107 0308 	add.w	r3, r7, #8
 8005666:	492e      	ldr	r1, [pc, #184]	; (8005720 <printRadioSettings+0x318>)
 8005668:	4618      	mov	r0, r3
 800566a:	f001 f8d1 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800566e:	4b26      	ldr	r3, [pc, #152]	; (8005708 <printRadioSettings+0x300>)
 8005670:	681c      	ldr	r4, [r3, #0]
 8005672:	f107 0308 	add.w	r3, r7, #8
 8005676:	4618      	mov	r0, r3
 8005678:	f7fa fdca 	bl	8000210 <strlen>
 800567c:	4603      	mov	r3, r0
 800567e:	b29a      	uxth	r2, r3
 8005680:	f107 0108 	add.w	r1, r7, #8
 8005684:	230a      	movs	r3, #10
 8005686:	4620      	mov	r0, r4
 8005688:	f7fe fe6f 	bl	800436a <HAL_UART_Transmit>

	// Print RF Channel
	reg8Val = NRF24_read_register(REG_RF_CH);
 800568c:	2005      	movs	r0, #5
 800568e:	f7ff fc41 	bl	8004f14 <NRF24_read_register>
 8005692:	4603      	mov	r3, r0
 8005694:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val & 0x7F);
 8005698:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800569c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056a0:	f107 0308 	add.w	r3, r7, #8
 80056a4:	491f      	ldr	r1, [pc, #124]	; (8005724 <printRadioSettings+0x31c>)
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 f8b2 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80056ac:	4b16      	ldr	r3, [pc, #88]	; (8005708 <printRadioSettings+0x300>)
 80056ae:	681c      	ldr	r4, [r3, #0]
 80056b0:	f107 0308 	add.w	r3, r7, #8
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fa fdab 	bl	8000210 <strlen>
 80056ba:	4603      	mov	r3, r0
 80056bc:	b29a      	uxth	r2, r3
 80056be:	f107 0108 	add.w	r1, r7, #8
 80056c2:	230a      	movs	r3, #10
 80056c4:	4620      	mov	r0, r4
 80056c6:	f7fe fe50 	bl	800436a <HAL_UART_Transmit>

	// Print Data Rate And Power
	reg8Val = NRF24_read_register(REG_RF_SETUP);
 80056ca:	2006      	movs	r0, #6
 80056cc:	f7ff fc22 	bl	8004f14 <NRF24_read_register>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80056d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d024      	beq.n	800572c <printRadioSettings+0x324>
		sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80056e2:	f107 0308 	add.w	r3, r7, #8
 80056e6:	4a10      	ldr	r2, [pc, #64]	; (8005728 <printRadioSettings+0x320>)
 80056e8:	461c      	mov	r4, r3
 80056ea:	4615      	mov	r5, r2
 80056ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80056f4:	6020      	str	r0, [r4, #0]
 80056f6:	3404      	adds	r4, #4
 80056f8:	8021      	strh	r1, [r4, #0]
 80056fa:	3402      	adds	r4, #2
 80056fc:	0c0b      	lsrs	r3, r1, #16
 80056fe:	7023      	strb	r3, [r4, #0]
 8005700:	e023      	b.n	800574a <printRadioSettings+0x342>
 8005702:	bf00      	nop
 8005704:	08007074 	.word	0x08007074
 8005708:	200000a0 	.word	0x200000a0
 800570c:	080070a8 	.word	0x080070a8
 8005710:	080070c4 	.word	0x080070c4
 8005714:	080070e0 	.word	0x080070e0
 8005718:	080070f4 	.word	0x080070f4
 800571c:	08007138 	.word	0x08007138
 8005720:	08007184 	.word	0x08007184
 8005724:	080071a0 	.word	0x080071a0
 8005728:	080071b4 	.word	0x080071b4
	else
		sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800572c:	f107 0308 	add.w	r3, r7, #8
 8005730:	4a2a      	ldr	r2, [pc, #168]	; (80057dc <printRadioSettings+0x3d4>)
 8005732:	461c      	mov	r4, r3
 8005734:	4615      	mov	r5, r2
 8005736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800573a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800573e:	6020      	str	r0, [r4, #0]
 8005740:	3404      	adds	r4, #4
 8005742:	8021      	strh	r1, [r4, #0]
 8005744:	3402      	adds	r4, #2
 8005746:	0c0b      	lsrs	r3, r1, #16
 8005748:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800574a:	4b25      	ldr	r3, [pc, #148]	; (80057e0 <printRadioSettings+0x3d8>)
 800574c:	681c      	ldr	r4, [r3, #0]
 800574e:	f107 0308 	add.w	r3, r7, #8
 8005752:	4618      	mov	r0, r3
 8005754:	f7fa fd5c 	bl	8000210 <strlen>
 8005758:	4603      	mov	r3, r0
 800575a:	b29a      	uxth	r2, r3
 800575c:	f107 0108 	add.w	r1, r7, #8
 8005760:	230a      	movs	r3, #10
 8005762:	4620      	mov	r0, r4
 8005764:	f7fe fe01 	bl	800436a <HAL_UART_Transmit>

	reg8Val &= (3 << 1);
 8005768:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800576c:	f003 0306 	and.w	r3, r3, #6
 8005770:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val >> 1);
 8005774:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005778:	085b      	lsrs	r3, r3, #1
 800577a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0)
 800577e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005782:	2b00      	cmp	r3, #0
 8005784:	d109      	bne.n	800579a <printRadioSettings+0x392>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8005786:	f107 0308 	add.w	r3, r7, #8
 800578a:	4a16      	ldr	r2, [pc, #88]	; (80057e4 <printRadioSettings+0x3dc>)
 800578c:	461c      	mov	r4, r3
 800578e:	4615      	mov	r5, r2
 8005790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	6023      	str	r3, [r4, #0]
 8005798:	e03b      	b.n	8005812 <printRadioSettings+0x40a>
	else if(reg8Val == 1)
 800579a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d109      	bne.n	80057b6 <printRadioSettings+0x3ae>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80057a2:	f107 0308 	add.w	r3, r7, #8
 80057a6:	4a10      	ldr	r2, [pc, #64]	; (80057e8 <printRadioSettings+0x3e0>)
 80057a8:	461c      	mov	r4, r3
 80057aa:	4615      	mov	r5, r2
 80057ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	e02d      	b.n	8005812 <printRadioSettings+0x40a>
	else if(reg8Val == 2)
 80057b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d118      	bne.n	80057f0 <printRadioSettings+0x3e8>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80057be:	f107 0308 	add.w	r3, r7, #8
 80057c2:	4a0a      	ldr	r2, [pc, #40]	; (80057ec <printRadioSettings+0x3e4>)
 80057c4:	461c      	mov	r4, r3
 80057c6:	4615      	mov	r5, r2
 80057c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	8022      	strh	r2, [r4, #0]
 80057d2:	3402      	adds	r4, #2
 80057d4:	0c1b      	lsrs	r3, r3, #16
 80057d6:	7023      	strb	r3, [r4, #0]
 80057d8:	e01b      	b.n	8005812 <printRadioSettings+0x40a>
 80057da:	bf00      	nop
 80057dc:	080071cc 	.word	0x080071cc
 80057e0:	200000a0 	.word	0x200000a0
 80057e4:	080071e4 	.word	0x080071e4
 80057e8:	080071f8 	.word	0x080071f8
 80057ec:	0800720c 	.word	0x0800720c
	else if(reg8Val == 3)
 80057f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d10c      	bne.n	8005812 <printRadioSettings+0x40a>
		sprintf(uartTxBuf, "RF_PWR:\r\n		 0dB \r\n");
 80057f8:	f107 0308 	add.w	r3, r7, #8
 80057fc:	4ad3      	ldr	r2, [pc, #844]	; (8005b4c <printRadioSettings+0x744>)
 80057fe:	461c      	mov	r4, r3
 8005800:	4615      	mov	r5, r2
 8005802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005806:	682b      	ldr	r3, [r5, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	8022      	strh	r2, [r4, #0]
 800580c:	3402      	adds	r4, #2
 800580e:	0c1b      	lsrs	r3, r3, #16
 8005810:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005812:	4bcf      	ldr	r3, [pc, #828]	; (8005b50 <printRadioSettings+0x748>)
 8005814:	681c      	ldr	r4, [r3, #0]
 8005816:	f107 0308 	add.w	r3, r7, #8
 800581a:	4618      	mov	r0, r3
 800581c:	f7fa fcf8 	bl	8000210 <strlen>
 8005820:	4603      	mov	r3, r0
 8005822:	b29a      	uxth	r2, r3
 8005824:	f107 0108 	add.w	r1, r7, #8
 8005828:	230a      	movs	r3, #10
 800582a:	4620      	mov	r0, r4
 800582c:	f7fe fd9d 	bl	800436a <HAL_UART_Transmit>

	// Print RX Pipes Addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(REG_RX_ADDR_P0, pipeAddrs, 5);
 8005830:	463b      	mov	r3, r7
 8005832:	2205      	movs	r2, #5
 8005834:	4619      	mov	r1, r3
 8005836:	200a      	movs	r0, #10
 8005838:	f7ff fb94 	bl	8004f64 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800583c:	793b      	ldrb	r3, [r7, #4]
 800583e:	461c      	mov	r4, r3
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	461d      	mov	r5, r3
 8005844:	78bb      	ldrb	r3, [r7, #2]
 8005846:	787a      	ldrb	r2, [r7, #1]
 8005848:	7839      	ldrb	r1, [r7, #0]
 800584a:	f107 0008 	add.w	r0, r7, #8
 800584e:	9102      	str	r1, [sp, #8]
 8005850:	9201      	str	r2, [sp, #4]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	462b      	mov	r3, r5
 8005856:	4622      	mov	r2, r4
 8005858:	49be      	ldr	r1, [pc, #760]	; (8005b54 <printRadioSettings+0x74c>)
 800585a:	f000 ffd9 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800585e:	4bbc      	ldr	r3, [pc, #752]	; (8005b50 <printRadioSettings+0x748>)
 8005860:	681c      	ldr	r4, [r3, #0]
 8005862:	f107 0308 	add.w	r3, r7, #8
 8005866:	4618      	mov	r0, r3
 8005868:	f7fa fcd2 	bl	8000210 <strlen>
 800586c:	4603      	mov	r3, r0
 800586e:	b29a      	uxth	r2, r3
 8005870:	f107 0108 	add.w	r1, r7, #8
 8005874:	230a      	movs	r3, #10
 8005876:	4620      	mov	r0, r4
 8005878:	f7fe fd77 	bl	800436a <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P1, pipeAddrs, 5);
 800587c:	463b      	mov	r3, r7
 800587e:	2205      	movs	r2, #5
 8005880:	4619      	mov	r1, r3
 8005882:	200b      	movs	r0, #11
 8005884:	f7ff fb6e 	bl	8004f64 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8005888:	793b      	ldrb	r3, [r7, #4]
 800588a:	461c      	mov	r4, r3
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	461d      	mov	r5, r3
 8005890:	78bb      	ldrb	r3, [r7, #2]
 8005892:	787a      	ldrb	r2, [r7, #1]
 8005894:	7839      	ldrb	r1, [r7, #0]
 8005896:	f107 0008 	add.w	r0, r7, #8
 800589a:	9102      	str	r1, [sp, #8]
 800589c:	9201      	str	r2, [sp, #4]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	462b      	mov	r3, r5
 80058a2:	4622      	mov	r2, r4
 80058a4:	49ac      	ldr	r1, [pc, #688]	; (8005b58 <printRadioSettings+0x750>)
 80058a6:	f000 ffb3 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80058aa:	4ba9      	ldr	r3, [pc, #676]	; (8005b50 <printRadioSettings+0x748>)
 80058ac:	681c      	ldr	r4, [r3, #0]
 80058ae:	f107 0308 	add.w	r3, r7, #8
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fa fcac 	bl	8000210 <strlen>
 80058b8:	4603      	mov	r3, r0
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	f107 0108 	add.w	r1, r7, #8
 80058c0:	230a      	movs	r3, #10
 80058c2:	4620      	mov	r0, r4
 80058c4:	f7fe fd51 	bl	800436a <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P2, pipeAddrs, 1);
 80058c8:	463b      	mov	r3, r7
 80058ca:	2201      	movs	r2, #1
 80058cc:	4619      	mov	r1, r3
 80058ce:	200c      	movs	r0, #12
 80058d0:	f7ff fb48 	bl	8004f64 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80058d4:	783b      	ldrb	r3, [r7, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	f107 0308 	add.w	r3, r7, #8
 80058dc:	499f      	ldr	r1, [pc, #636]	; (8005b5c <printRadioSettings+0x754>)
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 ff96 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80058e4:	4b9a      	ldr	r3, [pc, #616]	; (8005b50 <printRadioSettings+0x748>)
 80058e6:	681c      	ldr	r4, [r3, #0]
 80058e8:	f107 0308 	add.w	r3, r7, #8
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fa fc8f 	bl	8000210 <strlen>
 80058f2:	4603      	mov	r3, r0
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	f107 0108 	add.w	r1, r7, #8
 80058fa:	230a      	movs	r3, #10
 80058fc:	4620      	mov	r0, r4
 80058fe:	f7fe fd34 	bl	800436a <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P3, pipeAddrs, 1);
 8005902:	463b      	mov	r3, r7
 8005904:	2201      	movs	r2, #1
 8005906:	4619      	mov	r1, r3
 8005908:	200d      	movs	r0, #13
 800590a:	f7ff fb2b 	bl	8004f64 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800590e:	783b      	ldrb	r3, [r7, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	f107 0308 	add.w	r3, r7, #8
 8005916:	4992      	ldr	r1, [pc, #584]	; (8005b60 <printRadioSettings+0x758>)
 8005918:	4618      	mov	r0, r3
 800591a:	f000 ff79 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800591e:	4b8c      	ldr	r3, [pc, #560]	; (8005b50 <printRadioSettings+0x748>)
 8005920:	681c      	ldr	r4, [r3, #0]
 8005922:	f107 0308 	add.w	r3, r7, #8
 8005926:	4618      	mov	r0, r3
 8005928:	f7fa fc72 	bl	8000210 <strlen>
 800592c:	4603      	mov	r3, r0
 800592e:	b29a      	uxth	r2, r3
 8005930:	f107 0108 	add.w	r1, r7, #8
 8005934:	230a      	movs	r3, #10
 8005936:	4620      	mov	r0, r4
 8005938:	f7fe fd17 	bl	800436a <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P4, pipeAddrs, 1);
 800593c:	463b      	mov	r3, r7
 800593e:	2201      	movs	r2, #1
 8005940:	4619      	mov	r1, r3
 8005942:	200e      	movs	r0, #14
 8005944:	f7ff fb0e 	bl	8004f64 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8005948:	783b      	ldrb	r3, [r7, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	f107 0308 	add.w	r3, r7, #8
 8005950:	4984      	ldr	r1, [pc, #528]	; (8005b64 <printRadioSettings+0x75c>)
 8005952:	4618      	mov	r0, r3
 8005954:	f000 ff5c 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005958:	4b7d      	ldr	r3, [pc, #500]	; (8005b50 <printRadioSettings+0x748>)
 800595a:	681c      	ldr	r4, [r3, #0]
 800595c:	f107 0308 	add.w	r3, r7, #8
 8005960:	4618      	mov	r0, r3
 8005962:	f7fa fc55 	bl	8000210 <strlen>
 8005966:	4603      	mov	r3, r0
 8005968:	b29a      	uxth	r2, r3
 800596a:	f107 0108 	add.w	r1, r7, #8
 800596e:	230a      	movs	r3, #10
 8005970:	4620      	mov	r0, r4
 8005972:	f7fe fcfa 	bl	800436a <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P5, pipeAddrs, 1);
 8005976:	463b      	mov	r3, r7
 8005978:	2201      	movs	r2, #1
 800597a:	4619      	mov	r1, r3
 800597c:	200f      	movs	r0, #15
 800597e:	f7ff faf1 	bl	8004f64 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8005982:	783b      	ldrb	r3, [r7, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	f107 0308 	add.w	r3, r7, #8
 800598a:	4977      	ldr	r1, [pc, #476]	; (8005b68 <printRadioSettings+0x760>)
 800598c:	4618      	mov	r0, r3
 800598e:	f000 ff3f 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005992:	4b6f      	ldr	r3, [pc, #444]	; (8005b50 <printRadioSettings+0x748>)
 8005994:	681c      	ldr	r4, [r3, #0]
 8005996:	f107 0308 	add.w	r3, r7, #8
 800599a:	4618      	mov	r0, r3
 800599c:	f7fa fc38 	bl	8000210 <strlen>
 80059a0:	4603      	mov	r3, r0
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	f107 0108 	add.w	r1, r7, #8
 80059a8:	230a      	movs	r3, #10
 80059aa:	4620      	mov	r0, r4
 80059ac:	f7fe fcdd 	bl	800436a <HAL_UART_Transmit>

	NRF24_read_registerN(REG_TX_ADDR, pipeAddrs, 5);
 80059b0:	463b      	mov	r3, r7
 80059b2:	2205      	movs	r2, #5
 80059b4:	4619      	mov	r1, r3
 80059b6:	2010      	movs	r0, #16
 80059b8:	f7ff fad4 	bl	8004f64 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80059bc:	793b      	ldrb	r3, [r7, #4]
 80059be:	461c      	mov	r4, r3
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	461d      	mov	r5, r3
 80059c4:	78bb      	ldrb	r3, [r7, #2]
 80059c6:	787a      	ldrb	r2, [r7, #1]
 80059c8:	7839      	ldrb	r1, [r7, #0]
 80059ca:	f107 0008 	add.w	r0, r7, #8
 80059ce:	9102      	str	r1, [sp, #8]
 80059d0:	9201      	str	r2, [sp, #4]
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	462b      	mov	r3, r5
 80059d6:	4622      	mov	r2, r4
 80059d8:	4964      	ldr	r1, [pc, #400]	; (8005b6c <printRadioSettings+0x764>)
 80059da:	f000 ff19 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80059de:	4b5c      	ldr	r3, [pc, #368]	; (8005b50 <printRadioSettings+0x748>)
 80059e0:	681c      	ldr	r4, [r3, #0]
 80059e2:	f107 0308 	add.w	r3, r7, #8
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fa fc12 	bl	8000210 <strlen>
 80059ec:	4603      	mov	r3, r0
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	f107 0108 	add.w	r1, r7, #8
 80059f4:	230a      	movs	r3, #10
 80059f6:	4620      	mov	r0, r4
 80059f8:	f7fe fcb7 	bl	800436a <HAL_UART_Transmit>

	// Print RX Payload Width In Each Pipe
	reg8Val = NRF24_read_register(REG_RX_PW_P0);
 80059fc:	2011      	movs	r0, #17
 80059fe:	f7ff fa89 	bl	8004f14 <NRF24_read_register>
 8005a02:	4603      	mov	r3, r0
 8005a04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8005a08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005a0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a10:	f107 0308 	add.w	r3, r7, #8
 8005a14:	4956      	ldr	r1, [pc, #344]	; (8005b70 <printRadioSettings+0x768>)
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fefa 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005a1c:	4b4c      	ldr	r3, [pc, #304]	; (8005b50 <printRadioSettings+0x748>)
 8005a1e:	681c      	ldr	r4, [r3, #0]
 8005a20:	f107 0308 	add.w	r3, r7, #8
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fa fbf3 	bl	8000210 <strlen>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	f107 0108 	add.w	r1, r7, #8
 8005a32:	230a      	movs	r3, #10
 8005a34:	4620      	mov	r0, r4
 8005a36:	f7fe fc98 	bl	800436a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P1);
 8005a3a:	2012      	movs	r0, #18
 8005a3c:	f7ff fa6a 	bl	8004f14 <NRF24_read_register>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8005a46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005a4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a4e:	f107 0308 	add.w	r3, r7, #8
 8005a52:	4948      	ldr	r1, [pc, #288]	; (8005b74 <printRadioSettings+0x76c>)
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fedb 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005a5a:	4b3d      	ldr	r3, [pc, #244]	; (8005b50 <printRadioSettings+0x748>)
 8005a5c:	681c      	ldr	r4, [r3, #0]
 8005a5e:	f107 0308 	add.w	r3, r7, #8
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fa fbd4 	bl	8000210 <strlen>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	f107 0108 	add.w	r1, r7, #8
 8005a70:	230a      	movs	r3, #10
 8005a72:	4620      	mov	r0, r4
 8005a74:	f7fe fc79 	bl	800436a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P2);
 8005a78:	2013      	movs	r0, #19
 8005a7a:	f7ff fa4b 	bl	8004f14 <NRF24_read_register>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8005a84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005a88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a8c:	f107 0308 	add.w	r3, r7, #8
 8005a90:	4939      	ldr	r1, [pc, #228]	; (8005b78 <printRadioSettings+0x770>)
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 febc 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005a98:	4b2d      	ldr	r3, [pc, #180]	; (8005b50 <printRadioSettings+0x748>)
 8005a9a:	681c      	ldr	r4, [r3, #0]
 8005a9c:	f107 0308 	add.w	r3, r7, #8
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fa fbb5 	bl	8000210 <strlen>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	f107 0108 	add.w	r1, r7, #8
 8005aae:	230a      	movs	r3, #10
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f7fe fc5a 	bl	800436a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P3);
 8005ab6:	2014      	movs	r0, #20
 8005ab8:	f7ff fa2c 	bl	8004f14 <NRF24_read_register>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8005ac2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005aca:	f107 0308 	add.w	r3, r7, #8
 8005ace:	492b      	ldr	r1, [pc, #172]	; (8005b7c <printRadioSettings+0x774>)
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fe9d 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005ad6:	4b1e      	ldr	r3, [pc, #120]	; (8005b50 <printRadioSettings+0x748>)
 8005ad8:	681c      	ldr	r4, [r3, #0]
 8005ada:	f107 0308 	add.w	r3, r7, #8
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fa fb96 	bl	8000210 <strlen>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	f107 0108 	add.w	r1, r7, #8
 8005aec:	230a      	movs	r3, #10
 8005aee:	4620      	mov	r0, r4
 8005af0:	f7fe fc3b 	bl	800436a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P4);
 8005af4:	2015      	movs	r0, #21
 8005af6:	f7ff fa0d 	bl	8004f14 <NRF24_read_register>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8005b00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005b04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b08:	f107 0308 	add.w	r3, r7, #8
 8005b0c:	491c      	ldr	r1, [pc, #112]	; (8005b80 <printRadioSettings+0x778>)
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fe7e 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005b14:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <printRadioSettings+0x748>)
 8005b16:	681c      	ldr	r4, [r3, #0]
 8005b18:	f107 0308 	add.w	r3, r7, #8
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fa fb77 	bl	8000210 <strlen>
 8005b22:	4603      	mov	r3, r0
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	f107 0108 	add.w	r1, r7, #8
 8005b2a:	230a      	movs	r3, #10
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f7fe fc1c 	bl	800436a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P5);
 8005b32:	2016      	movs	r0, #22
 8005b34:	f7ff f9ee 	bl	8004f14 <NRF24_read_register>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8005b3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005b42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b46:	f107 0308 	add.w	r3, r7, #8
 8005b4a:	e01b      	b.n	8005b84 <printRadioSettings+0x77c>
 8005b4c:	08007220 	.word	0x08007220
 8005b50:	200000a0 	.word	0x200000a0
 8005b54:	08007234 	.word	0x08007234
 8005b58:	08007264 	.word	0x08007264
 8005b5c:	08007294 	.word	0x08007294
 8005b60:	080072bc 	.word	0x080072bc
 8005b64:	080072e4 	.word	0x080072e4
 8005b68:	0800730c 	.word	0x0800730c
 8005b6c:	08007334 	.word	0x08007334
 8005b70:	08007360 	.word	0x08007360
 8005b74:	0800737c 	.word	0x0800737c
 8005b78:	08007398 	.word	0x08007398
 8005b7c:	080073b4 	.word	0x080073b4
 8005b80:	080073d0 	.word	0x080073d0
 8005b84:	497b      	ldr	r1, [pc, #492]	; (8005d74 <printRadioSettings+0x96c>)
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fe42 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005b8c:	4b7a      	ldr	r3, [pc, #488]	; (8005d78 <printRadioSettings+0x970>)
 8005b8e:	681c      	ldr	r4, [r3, #0]
 8005b90:	f107 0308 	add.w	r3, r7, #8
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fa fb3b 	bl	8000210 <strlen>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	f107 0108 	add.w	r1, r7, #8
 8005ba2:	230a      	movs	r3, #10
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f7fe fbe0 	bl	800436a <HAL_UART_Transmit>

	// Print Dynamic Payload Enable For Each Pipe
	reg8Val = NRF24_read_register(REG_DYNPD);
 8005baa:	201c      	movs	r0, #28
 8005bac:	f7ff f9b2 	bl	8004f14 <NRF24_read_register>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8005bb6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005bba:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	bfcc      	ite	gt
 8005bc2:	2301      	movgt	r3, #1
 8005bc4:	2300      	movle	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	461d      	mov	r5, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8005bca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005bce:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	bfcc      	ite	gt
 8005bd6:	2301      	movgt	r3, #1
 8005bd8:	2300      	movle	r3, #0
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	461e      	mov	r6, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8005bde:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005be2:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	bfcc      	ite	gt
 8005bea:	2301      	movgt	r3, #1
 8005bec:	2300      	movle	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8005bf2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005bf6:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	bfcc      	ite	gt
 8005bfe:	2301      	movgt	r3, #1
 8005c00:	2300      	movle	r3, #0
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	4619      	mov	r1, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8005c06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005c0a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bfcc      	ite	gt
 8005c12:	2301      	movgt	r3, #1
 8005c14:	2300      	movle	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	461c      	mov	r4, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8005c1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005c1e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bfcc      	ite	gt
 8005c26:	2301      	movgt	r3, #1
 8005c28:	2300      	movle	r3, #0
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f107 0008 	add.w	r0, r7, #8
 8005c30:	9303      	str	r3, [sp, #12]
 8005c32:	9402      	str	r4, [sp, #8]
 8005c34:	9101      	str	r1, [sp, #4]
 8005c36:	9200      	str	r2, [sp, #0]
 8005c38:	4633      	mov	r3, r6
 8005c3a:	462a      	mov	r2, r5
 8005c3c:	494f      	ldr	r1, [pc, #316]	; (8005d7c <printRadioSettings+0x974>)
 8005c3e:	f000 fde7 	bl	8006810 <siprintf>
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005c42:	4b4d      	ldr	r3, [pc, #308]	; (8005d78 <printRadioSettings+0x970>)
 8005c44:	681c      	ldr	r4, [r3, #0]
 8005c46:	f107 0308 	add.w	r3, r7, #8
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fa fae0 	bl	8000210 <strlen>
 8005c50:	4603      	mov	r3, r0
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	f107 0108 	add.w	r1, r7, #8
 8005c58:	230a      	movs	r3, #10
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f7fe fb85 	bl	800436a <HAL_UART_Transmit>

	// Print If Dynamic Payload Feature Is Enabled
	reg8Val = NRF24_read_register(REG_FEATURE);
 8005c60:	201d      	movs	r0, #29
 8005c62:	f7ff f957 	bl	8004f14 <NRF24_read_register>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8005c6c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00c      	beq.n	8005c92 <printRadioSettings+0x88a>
 8005c78:	f107 0308 	add.w	r3, r7, #8
 8005c7c:	4a40      	ldr	r2, [pc, #256]	; (8005d80 <printRadioSettings+0x978>)
 8005c7e:	461c      	mov	r4, r3
 8005c80:	4615      	mov	r5, r2
 8005c82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005c8a:	6020      	str	r0, [r4, #0]
 8005c8c:	3404      	adds	r4, #4
 8005c8e:	8021      	strh	r1, [r4, #0]
 8005c90:	e00e      	b.n	8005cb0 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8005c92:	f107 0308 	add.w	r3, r7, #8
 8005c96:	4a3b      	ldr	r2, [pc, #236]	; (8005d84 <printRadioSettings+0x97c>)
 8005c98:	461c      	mov	r4, r3
 8005c9a:	4615      	mov	r5, r2
 8005c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ca0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005ca4:	6020      	str	r0, [r4, #0]
 8005ca6:	3404      	adds	r4, #4
 8005ca8:	8021      	strh	r1, [r4, #0]
 8005caa:	3402      	adds	r4, #2
 8005cac:	0c0b      	lsrs	r3, r1, #16
 8005cae:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005cb0:	4b31      	ldr	r3, [pc, #196]	; (8005d78 <printRadioSettings+0x970>)
 8005cb2:	681c      	ldr	r4, [r3, #0]
 8005cb4:	f107 0308 	add.w	r3, r7, #8
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fa faa9 	bl	8000210 <strlen>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	f107 0108 	add.w	r1, r7, #8
 8005cc6:	230a      	movs	r3, #10
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f7fe fb4e 	bl	800436a <HAL_UART_Transmit>

	// Print If ACK Payload Feature Is Enabled
	if(reg8Val & (1 << 1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8005cce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00b      	beq.n	8005cf2 <printRadioSettings+0x8ea>
 8005cda:	f107 0308 	add.w	r3, r7, #8
 8005cde:	4a2a      	ldr	r2, [pc, #168]	; (8005d88 <printRadioSettings+0x980>)
 8005ce0:	461c      	mov	r4, r3
 8005ce2:	4615      	mov	r5, r2
 8005ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ce8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005cec:	c403      	stmia	r4!, {r0, r1}
 8005cee:	8022      	strh	r2, [r4, #0]
 8005cf0:	e00d      	b.n	8005d0e <printRadioSettings+0x906>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8005cf2:	f107 0308 	add.w	r3, r7, #8
 8005cf6:	4a25      	ldr	r2, [pc, #148]	; (8005d8c <printRadioSettings+0x984>)
 8005cf8:	461c      	mov	r4, r3
 8005cfa:	4615      	mov	r5, r2
 8005cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005d04:	c403      	stmia	r4!, {r0, r1}
 8005d06:	8022      	strh	r2, [r4, #0]
 8005d08:	3402      	adds	r4, #2
 8005d0a:	0c13      	lsrs	r3, r2, #16
 8005d0c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005d0e:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <printRadioSettings+0x970>)
 8005d10:	681c      	ldr	r4, [r3, #0]
 8005d12:	f107 0308 	add.w	r3, r7, #8
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fa fa7a 	bl	8000210 <strlen>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	f107 0108 	add.w	r1, r7, #8
 8005d24:	230a      	movs	r3, #10
 8005d26:	4620      	mov	r0, r4
 8005d28:	f7fe fb1f 	bl	800436a <HAL_UART_Transmit>

	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8005d2c:	f107 0308 	add.w	r3, r7, #8
 8005d30:	4a17      	ldr	r2, [pc, #92]	; (8005d90 <printRadioSettings+0x988>)
 8005d32:	461c      	mov	r4, r3
 8005d34:	4615      	mov	r5, r2
 8005d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	8022      	strh	r2, [r4, #0]
 8005d48:	3402      	adds	r4, #2
 8005d4a:	0c1b      	lsrs	r3, r3, #16
 8005d4c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005d4e:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <printRadioSettings+0x970>)
 8005d50:	681c      	ldr	r4, [r3, #0]
 8005d52:	f107 0308 	add.w	r3, r7, #8
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fa fa5a 	bl	8000210 <strlen>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	f107 0108 	add.w	r1, r7, #8
 8005d64:	230a      	movs	r3, #10
 8005d66:	4620      	mov	r0, r4
 8005d68:	f7fe faff 	bl	800436a <HAL_UART_Transmit>
}
 8005d6c:	bf00      	nop
 8005d6e:	3774      	adds	r7, #116	; 0x74
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d74:	080073ec 	.word	0x080073ec
 8005d78:	200000a0 	.word	0x200000a0
 8005d7c:	08007408 	.word	0x08007408
 8005d80:	08007454 	.word	0x08007454
 8005d84:	0800746c 	.word	0x0800746c
 8005d88:	08007484 	.word	0x08007484
 8005d8c:	080074a0 	.word	0x080074a0
 8005d90:	08007074 	.word	0x08007074

08005d94 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	609a      	str	r2, [r3, #8]
 8005da4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8005da6:	4b28      	ldr	r3, [pc, #160]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005da8:	4a28      	ldr	r2, [pc, #160]	; (8005e4c <MX_ADC1_Init+0xb8>)
 8005daa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8005dac:	4b26      	ldr	r3, [pc, #152]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005dae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005db2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005db4:	4b24      	ldr	r3, [pc, #144]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005dba:	4b23      	ldr	r3, [pc, #140]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005dc0:	4b21      	ldr	r3, [pc, #132]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005dc6:	4b20      	ldr	r3, [pc, #128]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005dce:	4b1e      	ldr	r3, [pc, #120]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005dd4:	4b1c      	ldr	r3, [pc, #112]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005dd6:	4a1e      	ldr	r2, [pc, #120]	; (8005e50 <MX_ADC1_Init+0xbc>)
 8005dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005dda:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8005de0:	4b19      	ldr	r3, [pc, #100]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005de2:	2202      	movs	r2, #2
 8005de4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005de6:	4b18      	ldr	r3, [pc, #96]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005dee:	4b16      	ldr	r3, [pc, #88]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005df4:	4814      	ldr	r0, [pc, #80]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005df6:	f7fb f865 	bl	8000ec4 <HAL_ADC_Init>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005e00:	f000 fae0 	bl	80063c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005e0c:	2307      	movs	r3, #7
 8005e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e10:	463b      	mov	r3, r7
 8005e12:	4619      	mov	r1, r3
 8005e14:	480c      	ldr	r0, [pc, #48]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005e16:	f7fb f9a9 	bl	800116c <HAL_ADC_ConfigChannel>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005e20:	f000 fad0 	bl	80063c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005e24:	2301      	movs	r3, #1
 8005e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4805      	ldr	r0, [pc, #20]	; (8005e48 <MX_ADC1_Init+0xb4>)
 8005e32:	f7fb f99b 	bl	800116c <HAL_ADC_ConfigChannel>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8005e3c:	f000 fac2 	bl	80063c4 <Error_Handler>
  }

}
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	200000b4 	.word	0x200000b4
 8005e4c:	40012000 	.word	0x40012000
 8005e50:	0f000001 	.word	0x0f000001

08005e54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08a      	sub	sp, #40	; 0x28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e5c:	f107 0314 	add.w	r3, r7, #20
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	605a      	str	r2, [r3, #4]
 8005e66:	609a      	str	r2, [r3, #8]
 8005e68:	60da      	str	r2, [r3, #12]
 8005e6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a2f      	ldr	r2, [pc, #188]	; (8005f30 <HAL_ADC_MspInit+0xdc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d157      	bne.n	8005f26 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005e76:	2300      	movs	r3, #0
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	4b2e      	ldr	r3, [pc, #184]	; (8005f34 <HAL_ADC_MspInit+0xe0>)
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7e:	4a2d      	ldr	r2, [pc, #180]	; (8005f34 <HAL_ADC_MspInit+0xe0>)
 8005e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e84:	6453      	str	r3, [r2, #68]	; 0x44
 8005e86:	4b2b      	ldr	r3, [pc, #172]	; (8005f34 <HAL_ADC_MspInit+0xe0>)
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	613b      	str	r3, [r7, #16]
 8005e90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	4b27      	ldr	r3, [pc, #156]	; (8005f34 <HAL_ADC_MspInit+0xe0>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	4a26      	ldr	r2, [pc, #152]	; (8005f34 <HAL_ADC_MspInit+0xe0>)
 8005e9c:	f043 0301 	orr.w	r3, r3, #1
 8005ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ea2:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <HAL_ADC_MspInit+0xe0>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eba:	f107 0314 	add.w	r3, r7, #20
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	481d      	ldr	r0, [pc, #116]	; (8005f38 <HAL_ADC_MspInit+0xe4>)
 8005ec2:	f7fc f883 	bl	8001fcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005ec6:	4b1d      	ldr	r3, [pc, #116]	; (8005f3c <HAL_ADC_MspInit+0xe8>)
 8005ec8:	4a1d      	ldr	r2, [pc, #116]	; (8005f40 <HAL_ADC_MspInit+0xec>)
 8005eca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005ecc:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <HAL_ADC_MspInit+0xe8>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ed2:	4b1a      	ldr	r3, [pc, #104]	; (8005f3c <HAL_ADC_MspInit+0xe8>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ed8:	4b18      	ldr	r3, [pc, #96]	; (8005f3c <HAL_ADC_MspInit+0xe8>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005ede:	4b17      	ldr	r3, [pc, #92]	; (8005f3c <HAL_ADC_MspInit+0xe8>)
 8005ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ee4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ee6:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <HAL_ADC_MspInit+0xe8>)
 8005ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005eee:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <HAL_ADC_MspInit+0xe8>)
 8005ef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ef4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005ef6:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <HAL_ADC_MspInit+0xe8>)
 8005ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005efc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005efe:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <HAL_ADC_MspInit+0xe8>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f04:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <HAL_ADC_MspInit+0xe8>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005f0a:	480c      	ldr	r0, [pc, #48]	; (8005f3c <HAL_ADC_MspInit+0xe8>)
 8005f0c:	f7fb fcf0 	bl	80018f0 <HAL_DMA_Init>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005f16:	f000 fa55 	bl	80063c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a07      	ldr	r2, [pc, #28]	; (8005f3c <HAL_ADC_MspInit+0xe8>)
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38
 8005f20:	4a06      	ldr	r2, [pc, #24]	; (8005f3c <HAL_ADC_MspInit+0xe8>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005f26:	bf00      	nop
 8005f28:	3728      	adds	r7, #40	; 0x28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40012000 	.word	0x40012000
 8005f34:	40023800 	.word	0x40023800
 8005f38:	40020000 	.word	0x40020000
 8005f3c:	200000fc 	.word	0x200000fc
 8005f40:	40026410 	.word	0x40026410

08005f44 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	4b0c      	ldr	r3, [pc, #48]	; (8005f80 <MX_DMA_Init+0x3c>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	4a0b      	ldr	r2, [pc, #44]	; (8005f80 <MX_DMA_Init+0x3c>)
 8005f54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f58:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5a:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <MX_DMA_Init+0x3c>)
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f62:	607b      	str	r3, [r7, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005f66:	2200      	movs	r2, #0
 8005f68:	2100      	movs	r1, #0
 8005f6a:	2038      	movs	r0, #56	; 0x38
 8005f6c:	f7fb fc89 	bl	8001882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005f70:	2038      	movs	r0, #56	; 0x38
 8005f72:	f7fb fca2 	bl	80018ba <HAL_NVIC_EnableIRQ>

}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	40023800 	.word	0x40023800

08005f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08a      	sub	sp, #40	; 0x28
 8005f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f8a:	f107 0314 	add.w	r3, r7, #20
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	605a      	str	r2, [r3, #4]
 8005f94:	609a      	str	r2, [r3, #8]
 8005f96:	60da      	str	r2, [r3, #12]
 8005f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	4b37      	ldr	r3, [pc, #220]	; (800607c <MX_GPIO_Init+0xf8>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	4a36      	ldr	r2, [pc, #216]	; (800607c <MX_GPIO_Init+0xf8>)
 8005fa4:	f043 0304 	orr.w	r3, r3, #4
 8005fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8005faa:	4b34      	ldr	r3, [pc, #208]	; (800607c <MX_GPIO_Init+0xf8>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	4b30      	ldr	r3, [pc, #192]	; (800607c <MX_GPIO_Init+0xf8>)
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	4a2f      	ldr	r2, [pc, #188]	; (800607c <MX_GPIO_Init+0xf8>)
 8005fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fc6:	4b2d      	ldr	r3, [pc, #180]	; (800607c <MX_GPIO_Init+0xf8>)
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60bb      	str	r3, [r7, #8]
 8005fd6:	4b29      	ldr	r3, [pc, #164]	; (800607c <MX_GPIO_Init+0xf8>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	4a28      	ldr	r2, [pc, #160]	; (800607c <MX_GPIO_Init+0xf8>)
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8005fe2:	4b26      	ldr	r3, [pc, #152]	; (800607c <MX_GPIO_Init+0xf8>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	60bb      	str	r3, [r7, #8]
 8005fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fee:	2300      	movs	r3, #0
 8005ff0:	607b      	str	r3, [r7, #4]
 8005ff2:	4b22      	ldr	r3, [pc, #136]	; (800607c <MX_GPIO_Init+0xf8>)
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff6:	4a21      	ldr	r2, [pc, #132]	; (800607c <MX_GPIO_Init+0xf8>)
 8005ff8:	f043 0302 	orr.w	r3, r3, #2
 8005ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	; (800607c <MX_GPIO_Init+0xf8>)
 8006000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	607b      	str	r3, [r7, #4]
 8006008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800600a:	2200      	movs	r2, #0
 800600c:	2120      	movs	r1, #32
 800600e:	481c      	ldr	r0, [pc, #112]	; (8006080 <MX_GPIO_Init+0xfc>)
 8006010:	f7fc f96e 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8006014:	2200      	movs	r2, #0
 8006016:	f44f 7140 	mov.w	r1, #768	; 0x300
 800601a:	481a      	ldr	r0, [pc, #104]	; (8006084 <MX_GPIO_Init+0x100>)
 800601c:	f7fc f968 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006026:	4b18      	ldr	r3, [pc, #96]	; (8006088 <MX_GPIO_Init+0x104>)
 8006028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800602e:	f107 0314 	add.w	r3, r7, #20
 8006032:	4619      	mov	r1, r3
 8006034:	4813      	ldr	r0, [pc, #76]	; (8006084 <MX_GPIO_Init+0x100>)
 8006036:	f7fb ffc9 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800603a:	2320      	movs	r3, #32
 800603c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800603e:	2301      	movs	r3, #1
 8006040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006042:	2300      	movs	r3, #0
 8006044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006046:	2300      	movs	r3, #0
 8006048:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800604a:	f107 0314 	add.w	r3, r7, #20
 800604e:	4619      	mov	r1, r3
 8006050:	480b      	ldr	r0, [pc, #44]	; (8006080 <MX_GPIO_Init+0xfc>)
 8006052:	f7fb ffbb 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8006056:	f44f 7340 	mov.w	r3, #768	; 0x300
 800605a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800605c:	2301      	movs	r3, #1
 800605e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006060:	2300      	movs	r3, #0
 8006062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006064:	2300      	movs	r3, #0
 8006066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006068:	f107 0314 	add.w	r3, r7, #20
 800606c:	4619      	mov	r1, r3
 800606e:	4805      	ldr	r0, [pc, #20]	; (8006084 <MX_GPIO_Init+0x100>)
 8006070:	f7fb ffac 	bl	8001fcc <HAL_GPIO_Init>

}
 8006074:	bf00      	nop
 8006076:	3728      	adds	r7, #40	; 0x28
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40023800 	.word	0x40023800
 8006080:	40020000 	.word	0x40020000
 8006084:	40020800 	.word	0x40020800
 8006088:	10210000 	.word	0x10210000

0800608c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8006090:	4b12      	ldr	r3, [pc, #72]	; (80060dc <MX_I2C1_Init+0x50>)
 8006092:	4a13      	ldr	r2, [pc, #76]	; (80060e0 <MX_I2C1_Init+0x54>)
 8006094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <MX_I2C1_Init+0x50>)
 8006098:	4a12      	ldr	r2, [pc, #72]	; (80060e4 <MX_I2C1_Init+0x58>)
 800609a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800609c:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <MX_I2C1_Init+0x50>)
 800609e:	2200      	movs	r2, #0
 80060a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80060a2:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <MX_I2C1_Init+0x50>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <MX_I2C1_Init+0x50>)
 80060aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80060ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80060b0:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <MX_I2C1_Init+0x50>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80060b6:	4b09      	ldr	r3, [pc, #36]	; (80060dc <MX_I2C1_Init+0x50>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80060bc:	4b07      	ldr	r3, [pc, #28]	; (80060dc <MX_I2C1_Init+0x50>)
 80060be:	2200      	movs	r2, #0
 80060c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80060c2:	4b06      	ldr	r3, [pc, #24]	; (80060dc <MX_I2C1_Init+0x50>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80060c8:	4804      	ldr	r0, [pc, #16]	; (80060dc <MX_I2C1_Init+0x50>)
 80060ca:	f7fc f92b 	bl	8002324 <HAL_I2C_Init>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80060d4:	f000 f976 	bl	80063c4 <Error_Handler>
  }

}
 80060d8:	bf00      	nop
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	2000015c 	.word	0x2000015c
 80060e0:	40005400 	.word	0x40005400
 80060e4:	000186a0 	.word	0x000186a0

080060e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	; 0x28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060f0:	f107 0314 	add.w	r3, r7, #20
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	605a      	str	r2, [r3, #4]
 80060fa:	609a      	str	r2, [r3, #8]
 80060fc:	60da      	str	r2, [r3, #12]
 80060fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a19      	ldr	r2, [pc, #100]	; (800616c <HAL_I2C_MspInit+0x84>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d12b      	bne.n	8006162 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800610a:	2300      	movs	r3, #0
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	4b18      	ldr	r3, [pc, #96]	; (8006170 <HAL_I2C_MspInit+0x88>)
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	4a17      	ldr	r2, [pc, #92]	; (8006170 <HAL_I2C_MspInit+0x88>)
 8006114:	f043 0302 	orr.w	r3, r3, #2
 8006118:	6313      	str	r3, [r2, #48]	; 0x30
 800611a:	4b15      	ldr	r3, [pc, #84]	; (8006170 <HAL_I2C_MspInit+0x88>)
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	613b      	str	r3, [r7, #16]
 8006124:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006126:	23c0      	movs	r3, #192	; 0xc0
 8006128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800612a:	2312      	movs	r3, #18
 800612c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800612e:	2301      	movs	r3, #1
 8006130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006132:	2303      	movs	r3, #3
 8006134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006136:	2304      	movs	r3, #4
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800613a:	f107 0314 	add.w	r3, r7, #20
 800613e:	4619      	mov	r1, r3
 8006140:	480c      	ldr	r0, [pc, #48]	; (8006174 <HAL_I2C_MspInit+0x8c>)
 8006142:	f7fb ff43 	bl	8001fcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006146:	2300      	movs	r3, #0
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <HAL_I2C_MspInit+0x88>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	4a08      	ldr	r2, [pc, #32]	; (8006170 <HAL_I2C_MspInit+0x88>)
 8006150:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006154:	6413      	str	r3, [r2, #64]	; 0x40
 8006156:	4b06      	ldr	r3, [pc, #24]	; (8006170 <HAL_I2C_MspInit+0x88>)
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006162:	bf00      	nop
 8006164:	3728      	adds	r7, #40	; 0x28
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40005400 	.word	0x40005400
 8006170:	40023800 	.word	0x40023800
 8006174:	40020400 	.word	0x40020400

08006178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006178:	b5b0      	push	{r4, r5, r7, lr}
 800617a:	b08a      	sub	sp, #40	; 0x28
 800617c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800617e:	f7fa fe0d 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006182:	f000 f8b1 	bl	80062e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006186:	f7ff fefd 	bl	8005f84 <MX_GPIO_Init>
  MX_DMA_Init();
 800618a:	f7ff fedb 	bl	8005f44 <MX_DMA_Init>
  MX_SPI2_Init();
 800618e:	f000 f921 	bl	80063d4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8006192:	f000 fa6f 	bl	8006674 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8006196:	f7ff fdfd 	bl	8005d94 <MX_ADC1_Init>
  MX_I2C1_Init();
 800619a:	f7ff ff77 	bl	800608c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Joystick, 2);
 800619e:	2202      	movs	r2, #2
 80061a0:	4947      	ldr	r1, [pc, #284]	; (80062c0 <main+0x148>)
 80061a2:	4848      	ldr	r0, [pc, #288]	; (80062c4 <main+0x14c>)
 80061a4:	f7fa fed2 	bl	8000f4c <HAL_ADC_Start_DMA>
  NRF24_init(GPIOC, NRF24_CSN_Pin, NRF24_CE_Pin, &hspi2);
 80061a8:	4b47      	ldr	r3, [pc, #284]	; (80062c8 <main+0x150>)
 80061aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061b2:	4846      	ldr	r0, [pc, #280]	; (80062cc <main+0x154>)
 80061b4:	f7ff f842 	bl	800523c <NRF24_init>
  nrf24_DebugUART_Init(&huart2);
 80061b8:	4845      	ldr	r0, [pc, #276]	; (80062d0 <main+0x158>)
 80061ba:	f7ff f905 	bl	80053c8 <nrf24_DebugUART_Init>

  printRadioSettings();
 80061be:	f7ff f923 	bl	8005408 <printRadioSettings>

  NRF24_stopListening();
 80061c2:	f7ff f82f 	bl	8005224 <NRF24_stopListening>
  NRF24_openWritingPipe(tx_pipe_addr);
 80061c6:	a43a      	add	r4, pc, #232	; (adr r4, 80062b0 <main+0x138>)
 80061c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80061cc:	4618      	mov	r0, r3
 80061ce:	4621      	mov	r1, r4
 80061d0:	f7ff f80a 	bl	80051e8 <NRF24_openWritingPipe>

  if(! LCD1602A_init(&hi2c1)){
 80061d4:	483f      	ldr	r0, [pc, #252]	; (80062d4 <main+0x15c>)
 80061d6:	f7fe fd8f 	bl	8004cf8 <LCD1602A_init>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10e      	bne.n	80061fe <main+0x86>
	  uint8_t error_msg[] = "Couldn't connect to LCD Display\r\n";
 80061e0:	4b3d      	ldr	r3, [pc, #244]	; (80062d8 <main+0x160>)
 80061e2:	1d3c      	adds	r4, r7, #4
 80061e4:	461d      	mov	r5, r3
 80061e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ee:	682b      	ldr	r3, [r5, #0]
 80061f0:	8023      	strh	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, error_msg, 33, 100);
 80061f2:	1d39      	adds	r1, r7, #4
 80061f4:	2364      	movs	r3, #100	; 0x64
 80061f6:	2221      	movs	r2, #33	; 0x21
 80061f8:	4835      	ldr	r0, [pc, #212]	; (80062d0 <main+0x158>)
 80061fa:	f7fe f8b6 	bl	800436a <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  my_tx_data[0] = (uint8_t)(Joystick[0] * (100.0 / 4095.0));
 80061fe:	4b30      	ldr	r3, [pc, #192]	; (80062c0 <main+0x148>)
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f7fa f9ae 	bl	8000564 <__aeabi_i2d>
 8006208:	a32b      	add	r3, pc, #172	; (adr r3, 80062b8 <main+0x140>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f7fa fa13 	bl	8000638 <__aeabi_dmul>
 8006212:	4603      	mov	r3, r0
 8006214:	460c      	mov	r4, r1
 8006216:	4618      	mov	r0, r3
 8006218:	4621      	mov	r1, r4
 800621a:	f7fa fc1f 	bl	8000a5c <__aeabi_d2uiz>
 800621e:	4603      	mov	r3, r0
 8006220:	b2da      	uxtb	r2, r3
 8006222:	4b2e      	ldr	r3, [pc, #184]	; (80062dc <main+0x164>)
 8006224:	701a      	strb	r2, [r3, #0]
	  my_tx_data[1] = (uint8_t)(Joystick[1] * (100.0 / 4095.0));
 8006226:	4b26      	ldr	r3, [pc, #152]	; (80062c0 <main+0x148>)
 8006228:	885b      	ldrh	r3, [r3, #2]
 800622a:	4618      	mov	r0, r3
 800622c:	f7fa f99a 	bl	8000564 <__aeabi_i2d>
 8006230:	a321      	add	r3, pc, #132	; (adr r3, 80062b8 <main+0x140>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f7fa f9ff 	bl	8000638 <__aeabi_dmul>
 800623a:	4603      	mov	r3, r0
 800623c:	460c      	mov	r4, r1
 800623e:	4618      	mov	r0, r3
 8006240:	4621      	mov	r1, r4
 8006242:	f7fa fc0b 	bl	8000a5c <__aeabi_d2uiz>
 8006246:	4603      	mov	r3, r0
 8006248:	b2da      	uxtb	r2, r3
 800624a:	4b24      	ldr	r3, [pc, #144]	; (80062dc <main+0x164>)
 800624c:	705a      	strb	r2, [r3, #1]
	  if(NRF24_write(my_tx_data, PAYLOAD_SIZE)){
 800624e:	2102      	movs	r1, #2
 8006250:	4822      	ldr	r0, [pc, #136]	; (80062dc <main+0x164>)
 8006252:	f7fe ff59 	bl	8005108 <NRF24_write>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d021      	beq.n	80062a0 <main+0x128>
		  my_tx_data[PAYLOAD_SIZE] = '\r';
 800625c:	4b1f      	ldr	r3, [pc, #124]	; (80062dc <main+0x164>)
 800625e:	220d      	movs	r2, #13
 8006260:	709a      	strb	r2, [r3, #2]
		  my_tx_data[PAYLOAD_SIZE + 1] = '\n';
 8006262:	4b1e      	ldr	r3, [pc, #120]	; (80062dc <main+0x164>)
 8006264:	220a      	movs	r2, #10
 8006266:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit(&huart2, my_tx_data, PAYLOAD_SIZE + 2, 100);
 8006268:	2364      	movs	r3, #100	; 0x64
 800626a:	2204      	movs	r2, #4
 800626c:	491b      	ldr	r1, [pc, #108]	; (80062dc <main+0x164>)
 800626e:	4818      	ldr	r0, [pc, #96]	; (80062d0 <main+0x158>)
 8006270:	f7fe f87b 	bl	800436a <HAL_UART_Transmit>
		  LCD1602A_clear();
 8006274:	f7fe fdd0 	bl	8004e18 <LCD1602A_clear>
		  LCD1602A_setCursor(0, 0);
 8006278:	2100      	movs	r1, #0
 800627a:	2000      	movs	r0, #0
 800627c:	f7fe fda8 	bl	8004dd0 <LCD1602A_setCursor>
		  LCD1602A_printf("Speed = %u", my_tx_data[0]);
 8006280:	4b16      	ldr	r3, [pc, #88]	; (80062dc <main+0x164>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	4619      	mov	r1, r3
 8006286:	4816      	ldr	r0, [pc, #88]	; (80062e0 <main+0x168>)
 8006288:	f7fe fdd0 	bl	8004e2c <LCD1602A_printf>
		  LCD1602A_setCursor(1, 0);
 800628c:	2100      	movs	r1, #0
 800628e:	2001      	movs	r0, #1
 8006290:	f7fe fd9e 	bl	8004dd0 <LCD1602A_setCursor>
		  LCD1602A_printf("Direction = %u", my_tx_data[1]);
 8006294:	4b11      	ldr	r3, [pc, #68]	; (80062dc <main+0x164>)
 8006296:	785b      	ldrb	r3, [r3, #1]
 8006298:	4619      	mov	r1, r3
 800629a:	4812      	ldr	r0, [pc, #72]	; (80062e4 <main+0x16c>)
 800629c:	f7fe fdc6 	bl	8004e2c <LCD1602A_printf>
	  }

	  HAL_Delay(1000);
 80062a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062a4:	f7fa fdec 	bl	8000e80 <HAL_Delay>
	  my_tx_data[0] = (uint8_t)(Joystick[0] * (100.0 / 4095.0));
 80062a8:	e7a9      	b.n	80061fe <main+0x86>
 80062aa:	bf00      	nop
 80062ac:	f3af 8000 	nop.w
 80062b0:	223344aa 	.word	0x223344aa
 80062b4:	00000011 	.word	0x00000011
 80062b8:	19019019 	.word	0x19019019
 80062bc:	3f990190 	.word	0x3f990190
 80062c0:	200001b0 	.word	0x200001b0
 80062c4:	200000b4 	.word	0x200000b4
 80062c8:	200001d8 	.word	0x200001d8
 80062cc:	40020800 	.word	0x40020800
 80062d0:	20000230 	.word	0x20000230
 80062d4:	2000015c 	.word	0x2000015c
 80062d8:	080074d8 	.word	0x080074d8
 80062dc:	200001b4 	.word	0x200001b4
 80062e0:	080074bc 	.word	0x080074bc
 80062e4:	080074c8 	.word	0x080074c8

080062e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b094      	sub	sp, #80	; 0x50
 80062ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062ee:	f107 031c 	add.w	r3, r7, #28
 80062f2:	2234      	movs	r2, #52	; 0x34
 80062f4:	2100      	movs	r1, #0
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fa82 	bl	8006800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062fc:	f107 0308 	add.w	r3, r7, #8
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	605a      	str	r2, [r3, #4]
 8006306:	609a      	str	r2, [r3, #8]
 8006308:	60da      	str	r2, [r3, #12]
 800630a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800630c:	2300      	movs	r3, #0
 800630e:	607b      	str	r3, [r7, #4]
 8006310:	4b2a      	ldr	r3, [pc, #168]	; (80063bc <SystemClock_Config+0xd4>)
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	4a29      	ldr	r2, [pc, #164]	; (80063bc <SystemClock_Config+0xd4>)
 8006316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800631a:	6413      	str	r3, [r2, #64]	; 0x40
 800631c:	4b27      	ldr	r3, [pc, #156]	; (80063bc <SystemClock_Config+0xd4>)
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006324:	607b      	str	r3, [r7, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006328:	2300      	movs	r3, #0
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	4b24      	ldr	r3, [pc, #144]	; (80063c0 <SystemClock_Config+0xd8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006334:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <SystemClock_Config+0xd8>)
 8006336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	4b20      	ldr	r3, [pc, #128]	; (80063c0 <SystemClock_Config+0xd8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006344:	603b      	str	r3, [r7, #0]
 8006346:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006348:	2302      	movs	r3, #2
 800634a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800634c:	2301      	movs	r3, #1
 800634e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006350:	2310      	movs	r3, #16
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006354:	2302      	movs	r3, #2
 8006356:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006358:	2300      	movs	r3, #0
 800635a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800635c:	2310      	movs	r3, #16
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006360:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006364:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8006366:	2304      	movs	r3, #4
 8006368:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800636a:	2302      	movs	r3, #2
 800636c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800636e:	2302      	movs	r3, #2
 8006370:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006372:	f107 031c 	add.w	r3, r7, #28
 8006376:	4618      	mov	r0, r3
 8006378:	f7fc fffc 	bl	8003374 <HAL_RCC_OscConfig>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8006382:	f000 f81f 	bl	80063c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006386:	230f      	movs	r3, #15
 8006388:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800638a:	2302      	movs	r3, #2
 800638c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800638e:	2300      	movs	r3, #0
 8006390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006396:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006398:	2300      	movs	r3, #0
 800639a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800639c:	f107 0308 	add.w	r3, r7, #8
 80063a0:	2102      	movs	r1, #2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fc fd2c 	bl	8002e00 <HAL_RCC_ClockConfig>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80063ae:	f000 f809 	bl	80063c4 <Error_Handler>
  }
}
 80063b2:	bf00      	nop
 80063b4:	3750      	adds	r7, #80	; 0x50
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	40023800 	.word	0x40023800
 80063c0:	40007000 	.word	0x40007000

080063c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80063c8:	bf00      	nop
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80063d8:	4b17      	ldr	r3, [pc, #92]	; (8006438 <MX_SPI2_Init+0x64>)
 80063da:	4a18      	ldr	r2, [pc, #96]	; (800643c <MX_SPI2_Init+0x68>)
 80063dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80063de:	4b16      	ldr	r3, [pc, #88]	; (8006438 <MX_SPI2_Init+0x64>)
 80063e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80063e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80063e6:	4b14      	ldr	r3, [pc, #80]	; (8006438 <MX_SPI2_Init+0x64>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80063ec:	4b12      	ldr	r3, [pc, #72]	; (8006438 <MX_SPI2_Init+0x64>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80063f2:	4b11      	ldr	r3, [pc, #68]	; (8006438 <MX_SPI2_Init+0x64>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80063f8:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <MX_SPI2_Init+0x64>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80063fe:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <MX_SPI2_Init+0x64>)
 8006400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006404:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <MX_SPI2_Init+0x64>)
 8006408:	2220      	movs	r2, #32
 800640a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <MX_SPI2_Init+0x64>)
 800640e:	2200      	movs	r2, #0
 8006410:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006412:	4b09      	ldr	r3, [pc, #36]	; (8006438 <MX_SPI2_Init+0x64>)
 8006414:	2200      	movs	r2, #0
 8006416:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006418:	4b07      	ldr	r3, [pc, #28]	; (8006438 <MX_SPI2_Init+0x64>)
 800641a:	2200      	movs	r2, #0
 800641c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <MX_SPI2_Init+0x64>)
 8006420:	220a      	movs	r2, #10
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006424:	4804      	ldr	r0, [pc, #16]	; (8006438 <MX_SPI2_Init+0x64>)
 8006426:	f7fd f9ff 	bl	8003828 <HAL_SPI_Init>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006430:	f7ff ffc8 	bl	80063c4 <Error_Handler>
  }

}
 8006434:	bf00      	nop
 8006436:	bd80      	pop	{r7, pc}
 8006438:	200001d8 	.word	0x200001d8
 800643c:	40003800 	.word	0x40003800

08006440 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006448:	f107 0314 	add.w	r3, r7, #20
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	605a      	str	r2, [r3, #4]
 8006452:	609a      	str	r2, [r3, #8]
 8006454:	60da      	str	r2, [r3, #12]
 8006456:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a30      	ldr	r2, [pc, #192]	; (8006520 <HAL_SPI_MspInit+0xe0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d15a      	bne.n	8006518 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006462:	2300      	movs	r3, #0
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	4b2f      	ldr	r3, [pc, #188]	; (8006524 <HAL_SPI_MspInit+0xe4>)
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	4a2e      	ldr	r2, [pc, #184]	; (8006524 <HAL_SPI_MspInit+0xe4>)
 800646c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006470:	6413      	str	r3, [r2, #64]	; 0x40
 8006472:	4b2c      	ldr	r3, [pc, #176]	; (8006524 <HAL_SPI_MspInit+0xe4>)
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	4b28      	ldr	r3, [pc, #160]	; (8006524 <HAL_SPI_MspInit+0xe4>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	4a27      	ldr	r2, [pc, #156]	; (8006524 <HAL_SPI_MspInit+0xe4>)
 8006488:	f043 0304 	orr.w	r3, r3, #4
 800648c:	6313      	str	r3, [r2, #48]	; 0x30
 800648e:	4b25      	ldr	r3, [pc, #148]	; (8006524 <HAL_SPI_MspInit+0xe4>)
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]
 800649e:	4b21      	ldr	r3, [pc, #132]	; (8006524 <HAL_SPI_MspInit+0xe4>)
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	4a20      	ldr	r2, [pc, #128]	; (8006524 <HAL_SPI_MspInit+0xe4>)
 80064a4:	f043 0302 	orr.w	r3, r3, #2
 80064a8:	6313      	str	r3, [r2, #48]	; 0x30
 80064aa:	4b1e      	ldr	r3, [pc, #120]	; (8006524 <HAL_SPI_MspInit+0xe4>)
 80064ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	60bb      	str	r3, [r7, #8]
 80064b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80064b6:	2302      	movs	r3, #2
 80064b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ba:	2302      	movs	r3, #2
 80064bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064c2:	2303      	movs	r3, #3
 80064c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80064c6:	2307      	movs	r3, #7
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064ca:	f107 0314 	add.w	r3, r7, #20
 80064ce:	4619      	mov	r1, r3
 80064d0:	4815      	ldr	r0, [pc, #84]	; (8006528 <HAL_SPI_MspInit+0xe8>)
 80064d2:	f7fb fd7b 	bl	8001fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80064d6:	2304      	movs	r3, #4
 80064d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064da:	2302      	movs	r3, #2
 80064dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064e2:	2303      	movs	r3, #3
 80064e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80064e6:	2305      	movs	r3, #5
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064ea:	f107 0314 	add.w	r3, r7, #20
 80064ee:	4619      	mov	r1, r3
 80064f0:	480d      	ldr	r0, [pc, #52]	; (8006528 <HAL_SPI_MspInit+0xe8>)
 80064f2:	f7fb fd6b 	bl	8001fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80064f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064fc:	2302      	movs	r3, #2
 80064fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006500:	2300      	movs	r3, #0
 8006502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006504:	2303      	movs	r3, #3
 8006506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006508:	2305      	movs	r3, #5
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800650c:	f107 0314 	add.w	r3, r7, #20
 8006510:	4619      	mov	r1, r3
 8006512:	4806      	ldr	r0, [pc, #24]	; (800652c <HAL_SPI_MspInit+0xec>)
 8006514:	f7fb fd5a 	bl	8001fcc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006518:	bf00      	nop
 800651a:	3728      	adds	r7, #40	; 0x28
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40003800 	.word	0x40003800
 8006524:	40023800 	.word	0x40023800
 8006528:	40020800 	.word	0x40020800
 800652c:	40020400 	.word	0x40020400

08006530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006536:	2300      	movs	r3, #0
 8006538:	607b      	str	r3, [r7, #4]
 800653a:	4b10      	ldr	r3, [pc, #64]	; (800657c <HAL_MspInit+0x4c>)
 800653c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653e:	4a0f      	ldr	r2, [pc, #60]	; (800657c <HAL_MspInit+0x4c>)
 8006540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006544:	6453      	str	r3, [r2, #68]	; 0x44
 8006546:	4b0d      	ldr	r3, [pc, #52]	; (800657c <HAL_MspInit+0x4c>)
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800654e:	607b      	str	r3, [r7, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006552:	2300      	movs	r3, #0
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	4b09      	ldr	r3, [pc, #36]	; (800657c <HAL_MspInit+0x4c>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	4a08      	ldr	r2, [pc, #32]	; (800657c <HAL_MspInit+0x4c>)
 800655c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006560:	6413      	str	r3, [r2, #64]	; 0x40
 8006562:	4b06      	ldr	r3, [pc, #24]	; (800657c <HAL_MspInit+0x4c>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800656e:	2007      	movs	r0, #7
 8006570:	f7fb f97c 	bl	800186c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006574:	bf00      	nop
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40023800 	.word	0x40023800

08006580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006584:	bf00      	nop
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800658e:	b480      	push	{r7}
 8006590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006592:	e7fe      	b.n	8006592 <HardFault_Handler+0x4>

08006594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006598:	e7fe      	b.n	8006598 <MemManage_Handler+0x4>

0800659a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800659a:	b480      	push	{r7}
 800659c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800659e:	e7fe      	b.n	800659e <BusFault_Handler+0x4>

080065a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065a4:	e7fe      	b.n	80065a4 <UsageFault_Handler+0x4>

080065a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80065a6:	b480      	push	{r7}
 80065a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80065aa:	bf00      	nop
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065b8:	bf00      	nop
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80065c2:	b480      	push	{r7}
 80065c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80065c6:	bf00      	nop
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065d4:	f7fa fc34 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065d8:	bf00      	nop
 80065da:	bd80      	pop	{r7, pc}

080065dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80065e0:	4802      	ldr	r0, [pc, #8]	; (80065ec <DMA2_Stream0_IRQHandler+0x10>)
 80065e2:	f7fb fa8b 	bl	8001afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80065e6:	bf00      	nop
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	200000fc 	.word	0x200000fc

080065f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80065f8:	4b11      	ldr	r3, [pc, #68]	; (8006640 <_sbrk+0x50>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d102      	bne.n	8006606 <_sbrk+0x16>
		heap_end = &end;
 8006600:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <_sbrk+0x50>)
 8006602:	4a10      	ldr	r2, [pc, #64]	; (8006644 <_sbrk+0x54>)
 8006604:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006606:	4b0e      	ldr	r3, [pc, #56]	; (8006640 <_sbrk+0x50>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800660c:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <_sbrk+0x50>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4413      	add	r3, r2
 8006614:	466a      	mov	r2, sp
 8006616:	4293      	cmp	r3, r2
 8006618:	d907      	bls.n	800662a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800661a:	f000 f8c7 	bl	80067ac <__errno>
 800661e:	4602      	mov	r2, r0
 8006620:	230c      	movs	r3, #12
 8006622:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006624:	f04f 33ff 	mov.w	r3, #4294967295
 8006628:	e006      	b.n	8006638 <_sbrk+0x48>
	}

	heap_end += incr;
 800662a:	4b05      	ldr	r3, [pc, #20]	; (8006640 <_sbrk+0x50>)
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4413      	add	r3, r2
 8006632:	4a03      	ldr	r2, [pc, #12]	; (8006640 <_sbrk+0x50>)
 8006634:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006636:	68fb      	ldr	r3, [r7, #12]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	200000a4 	.word	0x200000a4
 8006644:	20000278 	.word	0x20000278

08006648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800664c:	4b08      	ldr	r3, [pc, #32]	; (8006670 <SystemInit+0x28>)
 800664e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006652:	4a07      	ldr	r2, [pc, #28]	; (8006670 <SystemInit+0x28>)
 8006654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800665c:	4b04      	ldr	r3, [pc, #16]	; (8006670 <SystemInit+0x28>)
 800665e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006662:	609a      	str	r2, [r3, #8]
#endif
}
 8006664:	bf00      	nop
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	e000ed00 	.word	0xe000ed00

08006674 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006678:	4b11      	ldr	r3, [pc, #68]	; (80066c0 <MX_USART2_UART_Init+0x4c>)
 800667a:	4a12      	ldr	r2, [pc, #72]	; (80066c4 <MX_USART2_UART_Init+0x50>)
 800667c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800667e:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <MX_USART2_UART_Init+0x4c>)
 8006680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006686:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <MX_USART2_UART_Init+0x4c>)
 8006688:	2200      	movs	r2, #0
 800668a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800668c:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <MX_USART2_UART_Init+0x4c>)
 800668e:	2200      	movs	r2, #0
 8006690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006692:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <MX_USART2_UART_Init+0x4c>)
 8006694:	2200      	movs	r2, #0
 8006696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006698:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <MX_USART2_UART_Init+0x4c>)
 800669a:	220c      	movs	r2, #12
 800669c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800669e:	4b08      	ldr	r3, [pc, #32]	; (80066c0 <MX_USART2_UART_Init+0x4c>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80066a4:	4b06      	ldr	r3, [pc, #24]	; (80066c0 <MX_USART2_UART_Init+0x4c>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80066aa:	4805      	ldr	r0, [pc, #20]	; (80066c0 <MX_USART2_UART_Init+0x4c>)
 80066ac:	f7fd fe10 	bl	80042d0 <HAL_UART_Init>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80066b6:	f7ff fe85 	bl	80063c4 <Error_Handler>
  }

}
 80066ba:	bf00      	nop
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20000230 	.word	0x20000230
 80066c4:	40004400 	.word	0x40004400

080066c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	; 0x28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066d0:	f107 0314 	add.w	r3, r7, #20
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	605a      	str	r2, [r3, #4]
 80066da:	609a      	str	r2, [r3, #8]
 80066dc:	60da      	str	r2, [r3, #12]
 80066de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a19      	ldr	r2, [pc, #100]	; (800674c <HAL_UART_MspInit+0x84>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d12b      	bne.n	8006742 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80066ea:	2300      	movs	r3, #0
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	4b18      	ldr	r3, [pc, #96]	; (8006750 <HAL_UART_MspInit+0x88>)
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	4a17      	ldr	r2, [pc, #92]	; (8006750 <HAL_UART_MspInit+0x88>)
 80066f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f8:	6413      	str	r3, [r2, #64]	; 0x40
 80066fa:	4b15      	ldr	r3, [pc, #84]	; (8006750 <HAL_UART_MspInit+0x88>)
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006702:	613b      	str	r3, [r7, #16]
 8006704:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <HAL_UART_MspInit+0x88>)
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	4a10      	ldr	r2, [pc, #64]	; (8006750 <HAL_UART_MspInit+0x88>)
 8006710:	f043 0301 	orr.w	r3, r3, #1
 8006714:	6313      	str	r3, [r2, #48]	; 0x30
 8006716:	4b0e      	ldr	r3, [pc, #56]	; (8006750 <HAL_UART_MspInit+0x88>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006722:	230c      	movs	r3, #12
 8006724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006726:	2302      	movs	r3, #2
 8006728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800672e:	2303      	movs	r3, #3
 8006730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006732:	2307      	movs	r3, #7
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006736:	f107 0314 	add.w	r3, r7, #20
 800673a:	4619      	mov	r1, r3
 800673c:	4805      	ldr	r0, [pc, #20]	; (8006754 <HAL_UART_MspInit+0x8c>)
 800673e:	f7fb fc45 	bl	8001fcc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006742:	bf00      	nop
 8006744:	3728      	adds	r7, #40	; 0x28
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	40004400 	.word	0x40004400
 8006750:	40023800 	.word	0x40023800
 8006754:	40020000 	.word	0x40020000

08006758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006790 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800675c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800675e:	e003      	b.n	8006768 <LoopCopyDataInit>

08006760 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006760:	4b0c      	ldr	r3, [pc, #48]	; (8006794 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006762:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006764:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006766:	3104      	adds	r1, #4

08006768 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006768:	480b      	ldr	r0, [pc, #44]	; (8006798 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800676a:	4b0c      	ldr	r3, [pc, #48]	; (800679c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800676c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800676e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006770:	d3f6      	bcc.n	8006760 <CopyDataInit>
  ldr  r2, =_sbss
 8006772:	4a0b      	ldr	r2, [pc, #44]	; (80067a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006774:	e002      	b.n	800677c <LoopFillZerobss>

08006776 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006776:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006778:	f842 3b04 	str.w	r3, [r2], #4

0800677c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800677c:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800677e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006780:	d3f9      	bcc.n	8006776 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006782:	f7ff ff61 	bl	8006648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006786:	f000 f817 	bl	80067b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800678a:	f7ff fcf5 	bl	8006178 <main>
  bx  lr    
 800678e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006790:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006794:	08007560 	.word	0x08007560
  ldr  r0, =_sdata
 8006798:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800679c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80067a0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80067a4:	20000274 	.word	0x20000274

080067a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80067a8:	e7fe      	b.n	80067a8 <ADC_IRQHandler>
	...

080067ac <__errno>:
 80067ac:	4b01      	ldr	r3, [pc, #4]	; (80067b4 <__errno+0x8>)
 80067ae:	6818      	ldr	r0, [r3, #0]
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	2000000c 	.word	0x2000000c

080067b8 <__libc_init_array>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	4e0d      	ldr	r6, [pc, #52]	; (80067f0 <__libc_init_array+0x38>)
 80067bc:	4c0d      	ldr	r4, [pc, #52]	; (80067f4 <__libc_init_array+0x3c>)
 80067be:	1ba4      	subs	r4, r4, r6
 80067c0:	10a4      	asrs	r4, r4, #2
 80067c2:	2500      	movs	r5, #0
 80067c4:	42a5      	cmp	r5, r4
 80067c6:	d109      	bne.n	80067dc <__libc_init_array+0x24>
 80067c8:	4e0b      	ldr	r6, [pc, #44]	; (80067f8 <__libc_init_array+0x40>)
 80067ca:	4c0c      	ldr	r4, [pc, #48]	; (80067fc <__libc_init_array+0x44>)
 80067cc:	f000 fc46 	bl	800705c <_init>
 80067d0:	1ba4      	subs	r4, r4, r6
 80067d2:	10a4      	asrs	r4, r4, #2
 80067d4:	2500      	movs	r5, #0
 80067d6:	42a5      	cmp	r5, r4
 80067d8:	d105      	bne.n	80067e6 <__libc_init_array+0x2e>
 80067da:	bd70      	pop	{r4, r5, r6, pc}
 80067dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067e0:	4798      	blx	r3
 80067e2:	3501      	adds	r5, #1
 80067e4:	e7ee      	b.n	80067c4 <__libc_init_array+0xc>
 80067e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067ea:	4798      	blx	r3
 80067ec:	3501      	adds	r5, #1
 80067ee:	e7f2      	b.n	80067d6 <__libc_init_array+0x1e>
 80067f0:	08007558 	.word	0x08007558
 80067f4:	08007558 	.word	0x08007558
 80067f8:	08007558 	.word	0x08007558
 80067fc:	0800755c 	.word	0x0800755c

08006800 <memset>:
 8006800:	4402      	add	r2, r0
 8006802:	4603      	mov	r3, r0
 8006804:	4293      	cmp	r3, r2
 8006806:	d100      	bne.n	800680a <memset+0xa>
 8006808:	4770      	bx	lr
 800680a:	f803 1b01 	strb.w	r1, [r3], #1
 800680e:	e7f9      	b.n	8006804 <memset+0x4>

08006810 <siprintf>:
 8006810:	b40e      	push	{r1, r2, r3}
 8006812:	b500      	push	{lr}
 8006814:	b09c      	sub	sp, #112	; 0x70
 8006816:	ab1d      	add	r3, sp, #116	; 0x74
 8006818:	9002      	str	r0, [sp, #8]
 800681a:	9006      	str	r0, [sp, #24]
 800681c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006820:	4809      	ldr	r0, [pc, #36]	; (8006848 <siprintf+0x38>)
 8006822:	9107      	str	r1, [sp, #28]
 8006824:	9104      	str	r1, [sp, #16]
 8006826:	4909      	ldr	r1, [pc, #36]	; (800684c <siprintf+0x3c>)
 8006828:	f853 2b04 	ldr.w	r2, [r3], #4
 800682c:	9105      	str	r1, [sp, #20]
 800682e:	6800      	ldr	r0, [r0, #0]
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	a902      	add	r1, sp, #8
 8006834:	f000 f886 	bl	8006944 <_svfiprintf_r>
 8006838:	9b02      	ldr	r3, [sp, #8]
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	b01c      	add	sp, #112	; 0x70
 8006840:	f85d eb04 	ldr.w	lr, [sp], #4
 8006844:	b003      	add	sp, #12
 8006846:	4770      	bx	lr
 8006848:	2000000c 	.word	0x2000000c
 800684c:	ffff0208 	.word	0xffff0208

08006850 <_vsiprintf_r>:
 8006850:	b500      	push	{lr}
 8006852:	b09b      	sub	sp, #108	; 0x6c
 8006854:	9100      	str	r1, [sp, #0]
 8006856:	9104      	str	r1, [sp, #16]
 8006858:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800685c:	9105      	str	r1, [sp, #20]
 800685e:	9102      	str	r1, [sp, #8]
 8006860:	4905      	ldr	r1, [pc, #20]	; (8006878 <_vsiprintf_r+0x28>)
 8006862:	9103      	str	r1, [sp, #12]
 8006864:	4669      	mov	r1, sp
 8006866:	f000 f86d 	bl	8006944 <_svfiprintf_r>
 800686a:	9b00      	ldr	r3, [sp, #0]
 800686c:	2200      	movs	r2, #0
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	b01b      	add	sp, #108	; 0x6c
 8006872:	f85d fb04 	ldr.w	pc, [sp], #4
 8006876:	bf00      	nop
 8006878:	ffff0208 	.word	0xffff0208

0800687c <vsiprintf>:
 800687c:	4613      	mov	r3, r2
 800687e:	460a      	mov	r2, r1
 8006880:	4601      	mov	r1, r0
 8006882:	4802      	ldr	r0, [pc, #8]	; (800688c <vsiprintf+0x10>)
 8006884:	6800      	ldr	r0, [r0, #0]
 8006886:	f7ff bfe3 	b.w	8006850 <_vsiprintf_r>
 800688a:	bf00      	nop
 800688c:	2000000c 	.word	0x2000000c

08006890 <__ssputs_r>:
 8006890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006894:	688e      	ldr	r6, [r1, #8]
 8006896:	429e      	cmp	r6, r3
 8006898:	4682      	mov	sl, r0
 800689a:	460c      	mov	r4, r1
 800689c:	4690      	mov	r8, r2
 800689e:	4699      	mov	r9, r3
 80068a0:	d837      	bhi.n	8006912 <__ssputs_r+0x82>
 80068a2:	898a      	ldrh	r2, [r1, #12]
 80068a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068a8:	d031      	beq.n	800690e <__ssputs_r+0x7e>
 80068aa:	6825      	ldr	r5, [r4, #0]
 80068ac:	6909      	ldr	r1, [r1, #16]
 80068ae:	1a6f      	subs	r7, r5, r1
 80068b0:	6965      	ldr	r5, [r4, #20]
 80068b2:	2302      	movs	r3, #2
 80068b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80068bc:	f109 0301 	add.w	r3, r9, #1
 80068c0:	443b      	add	r3, r7
 80068c2:	429d      	cmp	r5, r3
 80068c4:	bf38      	it	cc
 80068c6:	461d      	movcc	r5, r3
 80068c8:	0553      	lsls	r3, r2, #21
 80068ca:	d530      	bpl.n	800692e <__ssputs_r+0x9e>
 80068cc:	4629      	mov	r1, r5
 80068ce:	f000 fb2b 	bl	8006f28 <_malloc_r>
 80068d2:	4606      	mov	r6, r0
 80068d4:	b950      	cbnz	r0, 80068ec <__ssputs_r+0x5c>
 80068d6:	230c      	movs	r3, #12
 80068d8:	f8ca 3000 	str.w	r3, [sl]
 80068dc:	89a3      	ldrh	r3, [r4, #12]
 80068de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068e2:	81a3      	strh	r3, [r4, #12]
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ec:	463a      	mov	r2, r7
 80068ee:	6921      	ldr	r1, [r4, #16]
 80068f0:	f000 faa8 	bl	8006e44 <memcpy>
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fe:	81a3      	strh	r3, [r4, #12]
 8006900:	6126      	str	r6, [r4, #16]
 8006902:	6165      	str	r5, [r4, #20]
 8006904:	443e      	add	r6, r7
 8006906:	1bed      	subs	r5, r5, r7
 8006908:	6026      	str	r6, [r4, #0]
 800690a:	60a5      	str	r5, [r4, #8]
 800690c:	464e      	mov	r6, r9
 800690e:	454e      	cmp	r6, r9
 8006910:	d900      	bls.n	8006914 <__ssputs_r+0x84>
 8006912:	464e      	mov	r6, r9
 8006914:	4632      	mov	r2, r6
 8006916:	4641      	mov	r1, r8
 8006918:	6820      	ldr	r0, [r4, #0]
 800691a:	f000 fa9e 	bl	8006e5a <memmove>
 800691e:	68a3      	ldr	r3, [r4, #8]
 8006920:	1b9b      	subs	r3, r3, r6
 8006922:	60a3      	str	r3, [r4, #8]
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	441e      	add	r6, r3
 8006928:	6026      	str	r6, [r4, #0]
 800692a:	2000      	movs	r0, #0
 800692c:	e7dc      	b.n	80068e8 <__ssputs_r+0x58>
 800692e:	462a      	mov	r2, r5
 8006930:	f000 fb54 	bl	8006fdc <_realloc_r>
 8006934:	4606      	mov	r6, r0
 8006936:	2800      	cmp	r0, #0
 8006938:	d1e2      	bne.n	8006900 <__ssputs_r+0x70>
 800693a:	6921      	ldr	r1, [r4, #16]
 800693c:	4650      	mov	r0, sl
 800693e:	f000 faa5 	bl	8006e8c <_free_r>
 8006942:	e7c8      	b.n	80068d6 <__ssputs_r+0x46>

08006944 <_svfiprintf_r>:
 8006944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006948:	461d      	mov	r5, r3
 800694a:	898b      	ldrh	r3, [r1, #12]
 800694c:	061f      	lsls	r7, r3, #24
 800694e:	b09d      	sub	sp, #116	; 0x74
 8006950:	4680      	mov	r8, r0
 8006952:	460c      	mov	r4, r1
 8006954:	4616      	mov	r6, r2
 8006956:	d50f      	bpl.n	8006978 <_svfiprintf_r+0x34>
 8006958:	690b      	ldr	r3, [r1, #16]
 800695a:	b96b      	cbnz	r3, 8006978 <_svfiprintf_r+0x34>
 800695c:	2140      	movs	r1, #64	; 0x40
 800695e:	f000 fae3 	bl	8006f28 <_malloc_r>
 8006962:	6020      	str	r0, [r4, #0]
 8006964:	6120      	str	r0, [r4, #16]
 8006966:	b928      	cbnz	r0, 8006974 <_svfiprintf_r+0x30>
 8006968:	230c      	movs	r3, #12
 800696a:	f8c8 3000 	str.w	r3, [r8]
 800696e:	f04f 30ff 	mov.w	r0, #4294967295
 8006972:	e0c8      	b.n	8006b06 <_svfiprintf_r+0x1c2>
 8006974:	2340      	movs	r3, #64	; 0x40
 8006976:	6163      	str	r3, [r4, #20]
 8006978:	2300      	movs	r3, #0
 800697a:	9309      	str	r3, [sp, #36]	; 0x24
 800697c:	2320      	movs	r3, #32
 800697e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006982:	2330      	movs	r3, #48	; 0x30
 8006984:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006988:	9503      	str	r5, [sp, #12]
 800698a:	f04f 0b01 	mov.w	fp, #1
 800698e:	4637      	mov	r7, r6
 8006990:	463d      	mov	r5, r7
 8006992:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006996:	b10b      	cbz	r3, 800699c <_svfiprintf_r+0x58>
 8006998:	2b25      	cmp	r3, #37	; 0x25
 800699a:	d13e      	bne.n	8006a1a <_svfiprintf_r+0xd6>
 800699c:	ebb7 0a06 	subs.w	sl, r7, r6
 80069a0:	d00b      	beq.n	80069ba <_svfiprintf_r+0x76>
 80069a2:	4653      	mov	r3, sl
 80069a4:	4632      	mov	r2, r6
 80069a6:	4621      	mov	r1, r4
 80069a8:	4640      	mov	r0, r8
 80069aa:	f7ff ff71 	bl	8006890 <__ssputs_r>
 80069ae:	3001      	adds	r0, #1
 80069b0:	f000 80a4 	beq.w	8006afc <_svfiprintf_r+0x1b8>
 80069b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b6:	4453      	add	r3, sl
 80069b8:	9309      	str	r3, [sp, #36]	; 0x24
 80069ba:	783b      	ldrb	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 809d 	beq.w	8006afc <_svfiprintf_r+0x1b8>
 80069c2:	2300      	movs	r3, #0
 80069c4:	f04f 32ff 	mov.w	r2, #4294967295
 80069c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069cc:	9304      	str	r3, [sp, #16]
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069d4:	931a      	str	r3, [sp, #104]	; 0x68
 80069d6:	462f      	mov	r7, r5
 80069d8:	2205      	movs	r2, #5
 80069da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80069de:	4850      	ldr	r0, [pc, #320]	; (8006b20 <_svfiprintf_r+0x1dc>)
 80069e0:	f7f9 fc1e 	bl	8000220 <memchr>
 80069e4:	9b04      	ldr	r3, [sp, #16]
 80069e6:	b9d0      	cbnz	r0, 8006a1e <_svfiprintf_r+0xda>
 80069e8:	06d9      	lsls	r1, r3, #27
 80069ea:	bf44      	itt	mi
 80069ec:	2220      	movmi	r2, #32
 80069ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80069f2:	071a      	lsls	r2, r3, #28
 80069f4:	bf44      	itt	mi
 80069f6:	222b      	movmi	r2, #43	; 0x2b
 80069f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80069fc:	782a      	ldrb	r2, [r5, #0]
 80069fe:	2a2a      	cmp	r2, #42	; 0x2a
 8006a00:	d015      	beq.n	8006a2e <_svfiprintf_r+0xea>
 8006a02:	9a07      	ldr	r2, [sp, #28]
 8006a04:	462f      	mov	r7, r5
 8006a06:	2000      	movs	r0, #0
 8006a08:	250a      	movs	r5, #10
 8006a0a:	4639      	mov	r1, r7
 8006a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a10:	3b30      	subs	r3, #48	; 0x30
 8006a12:	2b09      	cmp	r3, #9
 8006a14:	d94d      	bls.n	8006ab2 <_svfiprintf_r+0x16e>
 8006a16:	b1b8      	cbz	r0, 8006a48 <_svfiprintf_r+0x104>
 8006a18:	e00f      	b.n	8006a3a <_svfiprintf_r+0xf6>
 8006a1a:	462f      	mov	r7, r5
 8006a1c:	e7b8      	b.n	8006990 <_svfiprintf_r+0x4c>
 8006a1e:	4a40      	ldr	r2, [pc, #256]	; (8006b20 <_svfiprintf_r+0x1dc>)
 8006a20:	1a80      	subs	r0, r0, r2
 8006a22:	fa0b f000 	lsl.w	r0, fp, r0
 8006a26:	4318      	orrs	r0, r3
 8006a28:	9004      	str	r0, [sp, #16]
 8006a2a:	463d      	mov	r5, r7
 8006a2c:	e7d3      	b.n	80069d6 <_svfiprintf_r+0x92>
 8006a2e:	9a03      	ldr	r2, [sp, #12]
 8006a30:	1d11      	adds	r1, r2, #4
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	9103      	str	r1, [sp, #12]
 8006a36:	2a00      	cmp	r2, #0
 8006a38:	db01      	blt.n	8006a3e <_svfiprintf_r+0xfa>
 8006a3a:	9207      	str	r2, [sp, #28]
 8006a3c:	e004      	b.n	8006a48 <_svfiprintf_r+0x104>
 8006a3e:	4252      	negs	r2, r2
 8006a40:	f043 0302 	orr.w	r3, r3, #2
 8006a44:	9207      	str	r2, [sp, #28]
 8006a46:	9304      	str	r3, [sp, #16]
 8006a48:	783b      	ldrb	r3, [r7, #0]
 8006a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a4c:	d10c      	bne.n	8006a68 <_svfiprintf_r+0x124>
 8006a4e:	787b      	ldrb	r3, [r7, #1]
 8006a50:	2b2a      	cmp	r3, #42	; 0x2a
 8006a52:	d133      	bne.n	8006abc <_svfiprintf_r+0x178>
 8006a54:	9b03      	ldr	r3, [sp, #12]
 8006a56:	1d1a      	adds	r2, r3, #4
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	9203      	str	r2, [sp, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bfb8      	it	lt
 8006a60:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a64:	3702      	adds	r7, #2
 8006a66:	9305      	str	r3, [sp, #20]
 8006a68:	4d2e      	ldr	r5, [pc, #184]	; (8006b24 <_svfiprintf_r+0x1e0>)
 8006a6a:	7839      	ldrb	r1, [r7, #0]
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f7f9 fbd6 	bl	8000220 <memchr>
 8006a74:	b138      	cbz	r0, 8006a86 <_svfiprintf_r+0x142>
 8006a76:	2340      	movs	r3, #64	; 0x40
 8006a78:	1b40      	subs	r0, r0, r5
 8006a7a:	fa03 f000 	lsl.w	r0, r3, r0
 8006a7e:	9b04      	ldr	r3, [sp, #16]
 8006a80:	4303      	orrs	r3, r0
 8006a82:	3701      	adds	r7, #1
 8006a84:	9304      	str	r3, [sp, #16]
 8006a86:	7839      	ldrb	r1, [r7, #0]
 8006a88:	4827      	ldr	r0, [pc, #156]	; (8006b28 <_svfiprintf_r+0x1e4>)
 8006a8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a8e:	2206      	movs	r2, #6
 8006a90:	1c7e      	adds	r6, r7, #1
 8006a92:	f7f9 fbc5 	bl	8000220 <memchr>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d038      	beq.n	8006b0c <_svfiprintf_r+0x1c8>
 8006a9a:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <_svfiprintf_r+0x1e8>)
 8006a9c:	bb13      	cbnz	r3, 8006ae4 <_svfiprintf_r+0x1a0>
 8006a9e:	9b03      	ldr	r3, [sp, #12]
 8006aa0:	3307      	adds	r3, #7
 8006aa2:	f023 0307 	bic.w	r3, r3, #7
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	9303      	str	r3, [sp, #12]
 8006aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aac:	444b      	add	r3, r9
 8006aae:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab0:	e76d      	b.n	800698e <_svfiprintf_r+0x4a>
 8006ab2:	fb05 3202 	mla	r2, r5, r2, r3
 8006ab6:	2001      	movs	r0, #1
 8006ab8:	460f      	mov	r7, r1
 8006aba:	e7a6      	b.n	8006a0a <_svfiprintf_r+0xc6>
 8006abc:	2300      	movs	r3, #0
 8006abe:	3701      	adds	r7, #1
 8006ac0:	9305      	str	r3, [sp, #20]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	250a      	movs	r5, #10
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006acc:	3a30      	subs	r2, #48	; 0x30
 8006ace:	2a09      	cmp	r2, #9
 8006ad0:	d903      	bls.n	8006ada <_svfiprintf_r+0x196>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0c8      	beq.n	8006a68 <_svfiprintf_r+0x124>
 8006ad6:	9105      	str	r1, [sp, #20]
 8006ad8:	e7c6      	b.n	8006a68 <_svfiprintf_r+0x124>
 8006ada:	fb05 2101 	mla	r1, r5, r1, r2
 8006ade:	2301      	movs	r3, #1
 8006ae0:	4607      	mov	r7, r0
 8006ae2:	e7f0      	b.n	8006ac6 <_svfiprintf_r+0x182>
 8006ae4:	ab03      	add	r3, sp, #12
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	4622      	mov	r2, r4
 8006aea:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <_svfiprintf_r+0x1ec>)
 8006aec:	a904      	add	r1, sp, #16
 8006aee:	4640      	mov	r0, r8
 8006af0:	f3af 8000 	nop.w
 8006af4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006af8:	4681      	mov	r9, r0
 8006afa:	d1d6      	bne.n	8006aaa <_svfiprintf_r+0x166>
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	065b      	lsls	r3, r3, #25
 8006b00:	f53f af35 	bmi.w	800696e <_svfiprintf_r+0x2a>
 8006b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b06:	b01d      	add	sp, #116	; 0x74
 8006b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0c:	ab03      	add	r3, sp, #12
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	4622      	mov	r2, r4
 8006b12:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <_svfiprintf_r+0x1ec>)
 8006b14:	a904      	add	r1, sp, #16
 8006b16:	4640      	mov	r0, r8
 8006b18:	f000 f882 	bl	8006c20 <_printf_i>
 8006b1c:	e7ea      	b.n	8006af4 <_svfiprintf_r+0x1b0>
 8006b1e:	bf00      	nop
 8006b20:	0800751c 	.word	0x0800751c
 8006b24:	08007522 	.word	0x08007522
 8006b28:	08007526 	.word	0x08007526
 8006b2c:	00000000 	.word	0x00000000
 8006b30:	08006891 	.word	0x08006891

08006b34 <_printf_common>:
 8006b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b38:	4691      	mov	r9, r2
 8006b3a:	461f      	mov	r7, r3
 8006b3c:	688a      	ldr	r2, [r1, #8]
 8006b3e:	690b      	ldr	r3, [r1, #16]
 8006b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b44:	4293      	cmp	r3, r2
 8006b46:	bfb8      	it	lt
 8006b48:	4613      	movlt	r3, r2
 8006b4a:	f8c9 3000 	str.w	r3, [r9]
 8006b4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b52:	4606      	mov	r6, r0
 8006b54:	460c      	mov	r4, r1
 8006b56:	b112      	cbz	r2, 8006b5e <_printf_common+0x2a>
 8006b58:	3301      	adds	r3, #1
 8006b5a:	f8c9 3000 	str.w	r3, [r9]
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	0699      	lsls	r1, r3, #26
 8006b62:	bf42      	ittt	mi
 8006b64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b68:	3302      	addmi	r3, #2
 8006b6a:	f8c9 3000 	strmi.w	r3, [r9]
 8006b6e:	6825      	ldr	r5, [r4, #0]
 8006b70:	f015 0506 	ands.w	r5, r5, #6
 8006b74:	d107      	bne.n	8006b86 <_printf_common+0x52>
 8006b76:	f104 0a19 	add.w	sl, r4, #25
 8006b7a:	68e3      	ldr	r3, [r4, #12]
 8006b7c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b80:	1a9b      	subs	r3, r3, r2
 8006b82:	42ab      	cmp	r3, r5
 8006b84:	dc28      	bgt.n	8006bd8 <_printf_common+0xa4>
 8006b86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b8a:	6822      	ldr	r2, [r4, #0]
 8006b8c:	3300      	adds	r3, #0
 8006b8e:	bf18      	it	ne
 8006b90:	2301      	movne	r3, #1
 8006b92:	0692      	lsls	r2, r2, #26
 8006b94:	d42d      	bmi.n	8006bf2 <_printf_common+0xbe>
 8006b96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	47c0      	blx	r8
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d020      	beq.n	8006be6 <_printf_common+0xb2>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	68e5      	ldr	r5, [r4, #12]
 8006ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8006bac:	f003 0306 	and.w	r3, r3, #6
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	bf08      	it	eq
 8006bb4:	1aad      	subeq	r5, r5, r2
 8006bb6:	68a3      	ldr	r3, [r4, #8]
 8006bb8:	6922      	ldr	r2, [r4, #16]
 8006bba:	bf0c      	ite	eq
 8006bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bc0:	2500      	movne	r5, #0
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	bfc4      	itt	gt
 8006bc6:	1a9b      	subgt	r3, r3, r2
 8006bc8:	18ed      	addgt	r5, r5, r3
 8006bca:	f04f 0900 	mov.w	r9, #0
 8006bce:	341a      	adds	r4, #26
 8006bd0:	454d      	cmp	r5, r9
 8006bd2:	d11a      	bne.n	8006c0a <_printf_common+0xd6>
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	e008      	b.n	8006bea <_printf_common+0xb6>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	4652      	mov	r2, sl
 8006bdc:	4639      	mov	r1, r7
 8006bde:	4630      	mov	r0, r6
 8006be0:	47c0      	blx	r8
 8006be2:	3001      	adds	r0, #1
 8006be4:	d103      	bne.n	8006bee <_printf_common+0xba>
 8006be6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bee:	3501      	adds	r5, #1
 8006bf0:	e7c3      	b.n	8006b7a <_printf_common+0x46>
 8006bf2:	18e1      	adds	r1, r4, r3
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	2030      	movs	r0, #48	; 0x30
 8006bf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bfc:	4422      	add	r2, r4
 8006bfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c06:	3302      	adds	r3, #2
 8006c08:	e7c5      	b.n	8006b96 <_printf_common+0x62>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4622      	mov	r2, r4
 8006c0e:	4639      	mov	r1, r7
 8006c10:	4630      	mov	r0, r6
 8006c12:	47c0      	blx	r8
 8006c14:	3001      	adds	r0, #1
 8006c16:	d0e6      	beq.n	8006be6 <_printf_common+0xb2>
 8006c18:	f109 0901 	add.w	r9, r9, #1
 8006c1c:	e7d8      	b.n	8006bd0 <_printf_common+0x9c>
	...

08006c20 <_printf_i>:
 8006c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006c28:	460c      	mov	r4, r1
 8006c2a:	7e09      	ldrb	r1, [r1, #24]
 8006c2c:	b085      	sub	sp, #20
 8006c2e:	296e      	cmp	r1, #110	; 0x6e
 8006c30:	4617      	mov	r7, r2
 8006c32:	4606      	mov	r6, r0
 8006c34:	4698      	mov	r8, r3
 8006c36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c38:	f000 80b3 	beq.w	8006da2 <_printf_i+0x182>
 8006c3c:	d822      	bhi.n	8006c84 <_printf_i+0x64>
 8006c3e:	2963      	cmp	r1, #99	; 0x63
 8006c40:	d036      	beq.n	8006cb0 <_printf_i+0x90>
 8006c42:	d80a      	bhi.n	8006c5a <_printf_i+0x3a>
 8006c44:	2900      	cmp	r1, #0
 8006c46:	f000 80b9 	beq.w	8006dbc <_printf_i+0x19c>
 8006c4a:	2958      	cmp	r1, #88	; 0x58
 8006c4c:	f000 8083 	beq.w	8006d56 <_printf_i+0x136>
 8006c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006c58:	e032      	b.n	8006cc0 <_printf_i+0xa0>
 8006c5a:	2964      	cmp	r1, #100	; 0x64
 8006c5c:	d001      	beq.n	8006c62 <_printf_i+0x42>
 8006c5e:	2969      	cmp	r1, #105	; 0x69
 8006c60:	d1f6      	bne.n	8006c50 <_printf_i+0x30>
 8006c62:	6820      	ldr	r0, [r4, #0]
 8006c64:	6813      	ldr	r3, [r2, #0]
 8006c66:	0605      	lsls	r5, r0, #24
 8006c68:	f103 0104 	add.w	r1, r3, #4
 8006c6c:	d52a      	bpl.n	8006cc4 <_printf_i+0xa4>
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6011      	str	r1, [r2, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	da03      	bge.n	8006c7e <_printf_i+0x5e>
 8006c76:	222d      	movs	r2, #45	; 0x2d
 8006c78:	425b      	negs	r3, r3
 8006c7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c7e:	486f      	ldr	r0, [pc, #444]	; (8006e3c <_printf_i+0x21c>)
 8006c80:	220a      	movs	r2, #10
 8006c82:	e039      	b.n	8006cf8 <_printf_i+0xd8>
 8006c84:	2973      	cmp	r1, #115	; 0x73
 8006c86:	f000 809d 	beq.w	8006dc4 <_printf_i+0x1a4>
 8006c8a:	d808      	bhi.n	8006c9e <_printf_i+0x7e>
 8006c8c:	296f      	cmp	r1, #111	; 0x6f
 8006c8e:	d020      	beq.n	8006cd2 <_printf_i+0xb2>
 8006c90:	2970      	cmp	r1, #112	; 0x70
 8006c92:	d1dd      	bne.n	8006c50 <_printf_i+0x30>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	f043 0320 	orr.w	r3, r3, #32
 8006c9a:	6023      	str	r3, [r4, #0]
 8006c9c:	e003      	b.n	8006ca6 <_printf_i+0x86>
 8006c9e:	2975      	cmp	r1, #117	; 0x75
 8006ca0:	d017      	beq.n	8006cd2 <_printf_i+0xb2>
 8006ca2:	2978      	cmp	r1, #120	; 0x78
 8006ca4:	d1d4      	bne.n	8006c50 <_printf_i+0x30>
 8006ca6:	2378      	movs	r3, #120	; 0x78
 8006ca8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cac:	4864      	ldr	r0, [pc, #400]	; (8006e40 <_printf_i+0x220>)
 8006cae:	e055      	b.n	8006d5c <_printf_i+0x13c>
 8006cb0:	6813      	ldr	r3, [r2, #0]
 8006cb2:	1d19      	adds	r1, r3, #4
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6011      	str	r1, [r2, #0]
 8006cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e08c      	b.n	8006dde <_printf_i+0x1be>
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6011      	str	r1, [r2, #0]
 8006cc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ccc:	bf18      	it	ne
 8006cce:	b21b      	sxthne	r3, r3
 8006cd0:	e7cf      	b.n	8006c72 <_printf_i+0x52>
 8006cd2:	6813      	ldr	r3, [r2, #0]
 8006cd4:	6825      	ldr	r5, [r4, #0]
 8006cd6:	1d18      	adds	r0, r3, #4
 8006cd8:	6010      	str	r0, [r2, #0]
 8006cda:	0628      	lsls	r0, r5, #24
 8006cdc:	d501      	bpl.n	8006ce2 <_printf_i+0xc2>
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	e002      	b.n	8006ce8 <_printf_i+0xc8>
 8006ce2:	0668      	lsls	r0, r5, #25
 8006ce4:	d5fb      	bpl.n	8006cde <_printf_i+0xbe>
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	4854      	ldr	r0, [pc, #336]	; (8006e3c <_printf_i+0x21c>)
 8006cea:	296f      	cmp	r1, #111	; 0x6f
 8006cec:	bf14      	ite	ne
 8006cee:	220a      	movne	r2, #10
 8006cf0:	2208      	moveq	r2, #8
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cf8:	6865      	ldr	r5, [r4, #4]
 8006cfa:	60a5      	str	r5, [r4, #8]
 8006cfc:	2d00      	cmp	r5, #0
 8006cfe:	f2c0 8095 	blt.w	8006e2c <_printf_i+0x20c>
 8006d02:	6821      	ldr	r1, [r4, #0]
 8006d04:	f021 0104 	bic.w	r1, r1, #4
 8006d08:	6021      	str	r1, [r4, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d13d      	bne.n	8006d8a <_printf_i+0x16a>
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	f040 808e 	bne.w	8006e30 <_printf_i+0x210>
 8006d14:	4665      	mov	r5, ip
 8006d16:	2a08      	cmp	r2, #8
 8006d18:	d10b      	bne.n	8006d32 <_printf_i+0x112>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	07db      	lsls	r3, r3, #31
 8006d1e:	d508      	bpl.n	8006d32 <_printf_i+0x112>
 8006d20:	6923      	ldr	r3, [r4, #16]
 8006d22:	6862      	ldr	r2, [r4, #4]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	bfde      	ittt	le
 8006d28:	2330      	movle	r3, #48	; 0x30
 8006d2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d32:	ebac 0305 	sub.w	r3, ip, r5
 8006d36:	6123      	str	r3, [r4, #16]
 8006d38:	f8cd 8000 	str.w	r8, [sp]
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	aa03      	add	r2, sp, #12
 8006d40:	4621      	mov	r1, r4
 8006d42:	4630      	mov	r0, r6
 8006d44:	f7ff fef6 	bl	8006b34 <_printf_common>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d14d      	bne.n	8006de8 <_printf_i+0x1c8>
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	b005      	add	sp, #20
 8006d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d56:	4839      	ldr	r0, [pc, #228]	; (8006e3c <_printf_i+0x21c>)
 8006d58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d5c:	6813      	ldr	r3, [r2, #0]
 8006d5e:	6821      	ldr	r1, [r4, #0]
 8006d60:	1d1d      	adds	r5, r3, #4
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6015      	str	r5, [r2, #0]
 8006d66:	060a      	lsls	r2, r1, #24
 8006d68:	d50b      	bpl.n	8006d82 <_printf_i+0x162>
 8006d6a:	07ca      	lsls	r2, r1, #31
 8006d6c:	bf44      	itt	mi
 8006d6e:	f041 0120 	orrmi.w	r1, r1, #32
 8006d72:	6021      	strmi	r1, [r4, #0]
 8006d74:	b91b      	cbnz	r3, 8006d7e <_printf_i+0x15e>
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	f022 0220 	bic.w	r2, r2, #32
 8006d7c:	6022      	str	r2, [r4, #0]
 8006d7e:	2210      	movs	r2, #16
 8006d80:	e7b7      	b.n	8006cf2 <_printf_i+0xd2>
 8006d82:	064d      	lsls	r5, r1, #25
 8006d84:	bf48      	it	mi
 8006d86:	b29b      	uxthmi	r3, r3
 8006d88:	e7ef      	b.n	8006d6a <_printf_i+0x14a>
 8006d8a:	4665      	mov	r5, ip
 8006d8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d90:	fb02 3311 	mls	r3, r2, r1, r3
 8006d94:	5cc3      	ldrb	r3, [r0, r3]
 8006d96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	2900      	cmp	r1, #0
 8006d9e:	d1f5      	bne.n	8006d8c <_printf_i+0x16c>
 8006da0:	e7b9      	b.n	8006d16 <_printf_i+0xf6>
 8006da2:	6813      	ldr	r3, [r2, #0]
 8006da4:	6825      	ldr	r5, [r4, #0]
 8006da6:	6961      	ldr	r1, [r4, #20]
 8006da8:	1d18      	adds	r0, r3, #4
 8006daa:	6010      	str	r0, [r2, #0]
 8006dac:	0628      	lsls	r0, r5, #24
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	d501      	bpl.n	8006db6 <_printf_i+0x196>
 8006db2:	6019      	str	r1, [r3, #0]
 8006db4:	e002      	b.n	8006dbc <_printf_i+0x19c>
 8006db6:	066a      	lsls	r2, r5, #25
 8006db8:	d5fb      	bpl.n	8006db2 <_printf_i+0x192>
 8006dba:	8019      	strh	r1, [r3, #0]
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	6123      	str	r3, [r4, #16]
 8006dc0:	4665      	mov	r5, ip
 8006dc2:	e7b9      	b.n	8006d38 <_printf_i+0x118>
 8006dc4:	6813      	ldr	r3, [r2, #0]
 8006dc6:	1d19      	adds	r1, r3, #4
 8006dc8:	6011      	str	r1, [r2, #0]
 8006dca:	681d      	ldr	r5, [r3, #0]
 8006dcc:	6862      	ldr	r2, [r4, #4]
 8006dce:	2100      	movs	r1, #0
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f7f9 fa25 	bl	8000220 <memchr>
 8006dd6:	b108      	cbz	r0, 8006ddc <_printf_i+0x1bc>
 8006dd8:	1b40      	subs	r0, r0, r5
 8006dda:	6060      	str	r0, [r4, #4]
 8006ddc:	6863      	ldr	r3, [r4, #4]
 8006dde:	6123      	str	r3, [r4, #16]
 8006de0:	2300      	movs	r3, #0
 8006de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de6:	e7a7      	b.n	8006d38 <_printf_i+0x118>
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	462a      	mov	r2, r5
 8006dec:	4639      	mov	r1, r7
 8006dee:	4630      	mov	r0, r6
 8006df0:	47c0      	blx	r8
 8006df2:	3001      	adds	r0, #1
 8006df4:	d0aa      	beq.n	8006d4c <_printf_i+0x12c>
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	079b      	lsls	r3, r3, #30
 8006dfa:	d413      	bmi.n	8006e24 <_printf_i+0x204>
 8006dfc:	68e0      	ldr	r0, [r4, #12]
 8006dfe:	9b03      	ldr	r3, [sp, #12]
 8006e00:	4298      	cmp	r0, r3
 8006e02:	bfb8      	it	lt
 8006e04:	4618      	movlt	r0, r3
 8006e06:	e7a3      	b.n	8006d50 <_printf_i+0x130>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	464a      	mov	r2, r9
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	4630      	mov	r0, r6
 8006e10:	47c0      	blx	r8
 8006e12:	3001      	adds	r0, #1
 8006e14:	d09a      	beq.n	8006d4c <_printf_i+0x12c>
 8006e16:	3501      	adds	r5, #1
 8006e18:	68e3      	ldr	r3, [r4, #12]
 8006e1a:	9a03      	ldr	r2, [sp, #12]
 8006e1c:	1a9b      	subs	r3, r3, r2
 8006e1e:	42ab      	cmp	r3, r5
 8006e20:	dcf2      	bgt.n	8006e08 <_printf_i+0x1e8>
 8006e22:	e7eb      	b.n	8006dfc <_printf_i+0x1dc>
 8006e24:	2500      	movs	r5, #0
 8006e26:	f104 0919 	add.w	r9, r4, #25
 8006e2a:	e7f5      	b.n	8006e18 <_printf_i+0x1f8>
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1ac      	bne.n	8006d8a <_printf_i+0x16a>
 8006e30:	7803      	ldrb	r3, [r0, #0]
 8006e32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e3a:	e76c      	b.n	8006d16 <_printf_i+0xf6>
 8006e3c:	0800752d 	.word	0x0800752d
 8006e40:	0800753e 	.word	0x0800753e

08006e44 <memcpy>:
 8006e44:	b510      	push	{r4, lr}
 8006e46:	1e43      	subs	r3, r0, #1
 8006e48:	440a      	add	r2, r1
 8006e4a:	4291      	cmp	r1, r2
 8006e4c:	d100      	bne.n	8006e50 <memcpy+0xc>
 8006e4e:	bd10      	pop	{r4, pc}
 8006e50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e58:	e7f7      	b.n	8006e4a <memcpy+0x6>

08006e5a <memmove>:
 8006e5a:	4288      	cmp	r0, r1
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	eb01 0302 	add.w	r3, r1, r2
 8006e62:	d807      	bhi.n	8006e74 <memmove+0x1a>
 8006e64:	1e42      	subs	r2, r0, #1
 8006e66:	4299      	cmp	r1, r3
 8006e68:	d00a      	beq.n	8006e80 <memmove+0x26>
 8006e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e6e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006e72:	e7f8      	b.n	8006e66 <memmove+0xc>
 8006e74:	4283      	cmp	r3, r0
 8006e76:	d9f5      	bls.n	8006e64 <memmove+0xa>
 8006e78:	1881      	adds	r1, r0, r2
 8006e7a:	1ad2      	subs	r2, r2, r3
 8006e7c:	42d3      	cmn	r3, r2
 8006e7e:	d100      	bne.n	8006e82 <memmove+0x28>
 8006e80:	bd10      	pop	{r4, pc}
 8006e82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e86:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006e8a:	e7f7      	b.n	8006e7c <memmove+0x22>

08006e8c <_free_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4605      	mov	r5, r0
 8006e90:	2900      	cmp	r1, #0
 8006e92:	d045      	beq.n	8006f20 <_free_r+0x94>
 8006e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e98:	1f0c      	subs	r4, r1, #4
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	bfb8      	it	lt
 8006e9e:	18e4      	addlt	r4, r4, r3
 8006ea0:	f000 f8d2 	bl	8007048 <__malloc_lock>
 8006ea4:	4a1f      	ldr	r2, [pc, #124]	; (8006f24 <_free_r+0x98>)
 8006ea6:	6813      	ldr	r3, [r2, #0]
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	b933      	cbnz	r3, 8006eba <_free_r+0x2e>
 8006eac:	6063      	str	r3, [r4, #4]
 8006eae:	6014      	str	r4, [r2, #0]
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eb6:	f000 b8c8 	b.w	800704a <__malloc_unlock>
 8006eba:	42a3      	cmp	r3, r4
 8006ebc:	d90c      	bls.n	8006ed8 <_free_r+0x4c>
 8006ebe:	6821      	ldr	r1, [r4, #0]
 8006ec0:	1862      	adds	r2, r4, r1
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	bf04      	itt	eq
 8006ec6:	681a      	ldreq	r2, [r3, #0]
 8006ec8:	685b      	ldreq	r3, [r3, #4]
 8006eca:	6063      	str	r3, [r4, #4]
 8006ecc:	bf04      	itt	eq
 8006ece:	1852      	addeq	r2, r2, r1
 8006ed0:	6022      	streq	r2, [r4, #0]
 8006ed2:	6004      	str	r4, [r0, #0]
 8006ed4:	e7ec      	b.n	8006eb0 <_free_r+0x24>
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	b10a      	cbz	r2, 8006ee0 <_free_r+0x54>
 8006edc:	42a2      	cmp	r2, r4
 8006ede:	d9fa      	bls.n	8006ed6 <_free_r+0x4a>
 8006ee0:	6819      	ldr	r1, [r3, #0]
 8006ee2:	1858      	adds	r0, r3, r1
 8006ee4:	42a0      	cmp	r0, r4
 8006ee6:	d10b      	bne.n	8006f00 <_free_r+0x74>
 8006ee8:	6820      	ldr	r0, [r4, #0]
 8006eea:	4401      	add	r1, r0
 8006eec:	1858      	adds	r0, r3, r1
 8006eee:	4282      	cmp	r2, r0
 8006ef0:	6019      	str	r1, [r3, #0]
 8006ef2:	d1dd      	bne.n	8006eb0 <_free_r+0x24>
 8006ef4:	6810      	ldr	r0, [r2, #0]
 8006ef6:	6852      	ldr	r2, [r2, #4]
 8006ef8:	605a      	str	r2, [r3, #4]
 8006efa:	4401      	add	r1, r0
 8006efc:	6019      	str	r1, [r3, #0]
 8006efe:	e7d7      	b.n	8006eb0 <_free_r+0x24>
 8006f00:	d902      	bls.n	8006f08 <_free_r+0x7c>
 8006f02:	230c      	movs	r3, #12
 8006f04:	602b      	str	r3, [r5, #0]
 8006f06:	e7d3      	b.n	8006eb0 <_free_r+0x24>
 8006f08:	6820      	ldr	r0, [r4, #0]
 8006f0a:	1821      	adds	r1, r4, r0
 8006f0c:	428a      	cmp	r2, r1
 8006f0e:	bf04      	itt	eq
 8006f10:	6811      	ldreq	r1, [r2, #0]
 8006f12:	6852      	ldreq	r2, [r2, #4]
 8006f14:	6062      	str	r2, [r4, #4]
 8006f16:	bf04      	itt	eq
 8006f18:	1809      	addeq	r1, r1, r0
 8006f1a:	6021      	streq	r1, [r4, #0]
 8006f1c:	605c      	str	r4, [r3, #4]
 8006f1e:	e7c7      	b.n	8006eb0 <_free_r+0x24>
 8006f20:	bd38      	pop	{r3, r4, r5, pc}
 8006f22:	bf00      	nop
 8006f24:	200000a8 	.word	0x200000a8

08006f28 <_malloc_r>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	1ccd      	adds	r5, r1, #3
 8006f2c:	f025 0503 	bic.w	r5, r5, #3
 8006f30:	3508      	adds	r5, #8
 8006f32:	2d0c      	cmp	r5, #12
 8006f34:	bf38      	it	cc
 8006f36:	250c      	movcc	r5, #12
 8006f38:	2d00      	cmp	r5, #0
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	db01      	blt.n	8006f42 <_malloc_r+0x1a>
 8006f3e:	42a9      	cmp	r1, r5
 8006f40:	d903      	bls.n	8006f4a <_malloc_r+0x22>
 8006f42:	230c      	movs	r3, #12
 8006f44:	6033      	str	r3, [r6, #0]
 8006f46:	2000      	movs	r0, #0
 8006f48:	bd70      	pop	{r4, r5, r6, pc}
 8006f4a:	f000 f87d 	bl	8007048 <__malloc_lock>
 8006f4e:	4a21      	ldr	r2, [pc, #132]	; (8006fd4 <_malloc_r+0xac>)
 8006f50:	6814      	ldr	r4, [r2, #0]
 8006f52:	4621      	mov	r1, r4
 8006f54:	b991      	cbnz	r1, 8006f7c <_malloc_r+0x54>
 8006f56:	4c20      	ldr	r4, [pc, #128]	; (8006fd8 <_malloc_r+0xb0>)
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	b91b      	cbnz	r3, 8006f64 <_malloc_r+0x3c>
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f000 f863 	bl	8007028 <_sbrk_r>
 8006f62:	6020      	str	r0, [r4, #0]
 8006f64:	4629      	mov	r1, r5
 8006f66:	4630      	mov	r0, r6
 8006f68:	f000 f85e 	bl	8007028 <_sbrk_r>
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	d124      	bne.n	8006fba <_malloc_r+0x92>
 8006f70:	230c      	movs	r3, #12
 8006f72:	6033      	str	r3, [r6, #0]
 8006f74:	4630      	mov	r0, r6
 8006f76:	f000 f868 	bl	800704a <__malloc_unlock>
 8006f7a:	e7e4      	b.n	8006f46 <_malloc_r+0x1e>
 8006f7c:	680b      	ldr	r3, [r1, #0]
 8006f7e:	1b5b      	subs	r3, r3, r5
 8006f80:	d418      	bmi.n	8006fb4 <_malloc_r+0x8c>
 8006f82:	2b0b      	cmp	r3, #11
 8006f84:	d90f      	bls.n	8006fa6 <_malloc_r+0x7e>
 8006f86:	600b      	str	r3, [r1, #0]
 8006f88:	50cd      	str	r5, [r1, r3]
 8006f8a:	18cc      	adds	r4, r1, r3
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f000 f85c 	bl	800704a <__malloc_unlock>
 8006f92:	f104 000b 	add.w	r0, r4, #11
 8006f96:	1d23      	adds	r3, r4, #4
 8006f98:	f020 0007 	bic.w	r0, r0, #7
 8006f9c:	1ac3      	subs	r3, r0, r3
 8006f9e:	d0d3      	beq.n	8006f48 <_malloc_r+0x20>
 8006fa0:	425a      	negs	r2, r3
 8006fa2:	50e2      	str	r2, [r4, r3]
 8006fa4:	e7d0      	b.n	8006f48 <_malloc_r+0x20>
 8006fa6:	428c      	cmp	r4, r1
 8006fa8:	684b      	ldr	r3, [r1, #4]
 8006faa:	bf16      	itet	ne
 8006fac:	6063      	strne	r3, [r4, #4]
 8006fae:	6013      	streq	r3, [r2, #0]
 8006fb0:	460c      	movne	r4, r1
 8006fb2:	e7eb      	b.n	8006f8c <_malloc_r+0x64>
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	6849      	ldr	r1, [r1, #4]
 8006fb8:	e7cc      	b.n	8006f54 <_malloc_r+0x2c>
 8006fba:	1cc4      	adds	r4, r0, #3
 8006fbc:	f024 0403 	bic.w	r4, r4, #3
 8006fc0:	42a0      	cmp	r0, r4
 8006fc2:	d005      	beq.n	8006fd0 <_malloc_r+0xa8>
 8006fc4:	1a21      	subs	r1, r4, r0
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f000 f82e 	bl	8007028 <_sbrk_r>
 8006fcc:	3001      	adds	r0, #1
 8006fce:	d0cf      	beq.n	8006f70 <_malloc_r+0x48>
 8006fd0:	6025      	str	r5, [r4, #0]
 8006fd2:	e7db      	b.n	8006f8c <_malloc_r+0x64>
 8006fd4:	200000a8 	.word	0x200000a8
 8006fd8:	200000ac 	.word	0x200000ac

08006fdc <_realloc_r>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	4607      	mov	r7, r0
 8006fe0:	4614      	mov	r4, r2
 8006fe2:	460e      	mov	r6, r1
 8006fe4:	b921      	cbnz	r1, 8006ff0 <_realloc_r+0x14>
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fec:	f7ff bf9c 	b.w	8006f28 <_malloc_r>
 8006ff0:	b922      	cbnz	r2, 8006ffc <_realloc_r+0x20>
 8006ff2:	f7ff ff4b 	bl	8006e8c <_free_r>
 8006ff6:	4625      	mov	r5, r4
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ffc:	f000 f826 	bl	800704c <_malloc_usable_size_r>
 8007000:	42a0      	cmp	r0, r4
 8007002:	d20f      	bcs.n	8007024 <_realloc_r+0x48>
 8007004:	4621      	mov	r1, r4
 8007006:	4638      	mov	r0, r7
 8007008:	f7ff ff8e 	bl	8006f28 <_malloc_r>
 800700c:	4605      	mov	r5, r0
 800700e:	2800      	cmp	r0, #0
 8007010:	d0f2      	beq.n	8006ff8 <_realloc_r+0x1c>
 8007012:	4631      	mov	r1, r6
 8007014:	4622      	mov	r2, r4
 8007016:	f7ff ff15 	bl	8006e44 <memcpy>
 800701a:	4631      	mov	r1, r6
 800701c:	4638      	mov	r0, r7
 800701e:	f7ff ff35 	bl	8006e8c <_free_r>
 8007022:	e7e9      	b.n	8006ff8 <_realloc_r+0x1c>
 8007024:	4635      	mov	r5, r6
 8007026:	e7e7      	b.n	8006ff8 <_realloc_r+0x1c>

08007028 <_sbrk_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4c06      	ldr	r4, [pc, #24]	; (8007044 <_sbrk_r+0x1c>)
 800702c:	2300      	movs	r3, #0
 800702e:	4605      	mov	r5, r0
 8007030:	4608      	mov	r0, r1
 8007032:	6023      	str	r3, [r4, #0]
 8007034:	f7ff fadc 	bl	80065f0 <_sbrk>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_sbrk_r+0x1a>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	b103      	cbz	r3, 8007042 <_sbrk_r+0x1a>
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	20000270 	.word	0x20000270

08007048 <__malloc_lock>:
 8007048:	4770      	bx	lr

0800704a <__malloc_unlock>:
 800704a:	4770      	bx	lr

0800704c <_malloc_usable_size_r>:
 800704c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007050:	1f18      	subs	r0, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	bfbc      	itt	lt
 8007056:	580b      	ldrlt	r3, [r1, r0]
 8007058:	18c0      	addlt	r0, r0, r3
 800705a:	4770      	bx	lr

0800705c <_init>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	bf00      	nop
 8007060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	469e      	mov	lr, r3
 8007066:	4770      	bx	lr

08007068 <_fini>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	bf00      	nop
 800706c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706e:	bc08      	pop	{r3}
 8007070:	469e      	mov	lr, r3
 8007072:	4770      	bx	lr
