
Boat_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b18  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08005ce8  08005ce8  00015ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006184  08006184  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800618c  0800618c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000070  08006204  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08006204  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002862  00000000  00000000  000310f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e10  00000000  00000000  00033960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  00034770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000237f6  00000000  00000000  00035440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd56  00000000  00000000  00058c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d195d  00000000  00000000  0006698c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001382e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c0c  00000000  00000000  00138364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005cd0 	.word	0x08005cd0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005cd0 	.word	0x08005cd0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_Init+0x40>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <HAL_Init+0x40>)
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x40>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <HAL_Init+0x40>)
 80005d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x40>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x40>)
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 fd51 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f004 fdf4 	bl	80051e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023c00 	.word	0x40023c00

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fd69 	bl	80010fa <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 fd31 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000008 	.word	0x20000008
 800065c:	20000004 	.word	0x20000004
 8000660:	20000000 	.word	0x20000000

08000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x20>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x24>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_IncTick+0x24>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000004 	.word	0x20000004
 8000688:	2000013c 	.word	0x2000013c

0800068c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GetTick+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	2000013c 	.word	0x2000013c

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006ac:	f7ff ffee 	bl	800068c <HAL_GetTick>
 80006b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006bc:	d005      	beq.n	80006ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_Delay+0x40>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ca:	bf00      	nop
 80006cc:	f7ff ffde 	bl	800068c <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d8f7      	bhi.n	80006cc <HAL_Delay+0x28>
  {
  }
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000004 	.word	0x20000004

080006e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006f0:	2300      	movs	r3, #0
 80006f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d101      	bne.n	80006fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e033      	b.n	8000766 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	2b00      	cmp	r3, #0
 8000704:	d109      	bne.n	800071a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f004 fa40 	bl	8004b8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	2b00      	cmp	r3, #0
 8000724:	d118      	bne.n	8000758 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800072e:	f023 0302 	bic.w	r3, r3, #2
 8000732:	f043 0202 	orr.w	r2, r3, #2
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 fa5a 	bl	8000bf4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	f023 0303 	bic.w	r3, r3, #3
 800074e:	f043 0201 	orr.w	r2, r3, #1
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	641a      	str	r2, [r3, #64]	; 0x40
 8000756:	e001      	b.n	800075c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000758:	2301      	movs	r3, #1
 800075a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000786:	2b01      	cmp	r3, #1
 8000788:	d101      	bne.n	800078e <HAL_ADC_Start_DMA+0x1e>
 800078a:	2302      	movs	r3, #2
 800078c:	e0cc      	b.n	8000928 <HAL_ADC_Start_DMA+0x1b8>
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2201      	movs	r2, #1
 8000792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d018      	beq.n	80007d6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	689a      	ldr	r2, [r3, #8]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f042 0201 	orr.w	r2, r2, #1
 80007b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007b4:	4b5e      	ldr	r3, [pc, #376]	; (8000930 <HAL_ADC_Start_DMA+0x1c0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a5e      	ldr	r2, [pc, #376]	; (8000934 <HAL_ADC_Start_DMA+0x1c4>)
 80007ba:	fba2 2303 	umull	r2, r3, r2, r3
 80007be:	0c9a      	lsrs	r2, r3, #18
 80007c0:	4613      	mov	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4413      	add	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80007c8:	e002      	b.n	80007d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f9      	bne.n	80007ca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	f040 80a0 	bne.w	8000926 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007ee:	f023 0301 	bic.w	r3, r3, #1
 80007f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000804:	2b00      	cmp	r3, #0
 8000806:	d007      	beq.n	8000818 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000810:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000824:	d106      	bne.n	8000834 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f023 0206 	bic.w	r2, r3, #6
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	645a      	str	r2, [r3, #68]	; 0x44
 8000832:	e002      	b.n	800083a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2200      	movs	r2, #0
 8000838:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2200      	movs	r2, #0
 800083e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <HAL_ADC_Start_DMA+0x1c8>)
 8000844:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800084a:	4a3c      	ldr	r2, [pc, #240]	; (800093c <HAL_ADC_Start_DMA+0x1cc>)
 800084c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000852:	4a3b      	ldr	r2, [pc, #236]	; (8000940 <HAL_ADC_Start_DMA+0x1d0>)
 8000854:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800085a:	4a3a      	ldr	r2, [pc, #232]	; (8000944 <HAL_ADC_Start_DMA+0x1d4>)
 800085c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000866:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000876:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000886:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	334c      	adds	r3, #76	; 0x4c
 8000892:	4619      	mov	r1, r3
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f000 fcea 	bl	8001270 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	f003 031f 	and.w	r3, r3, #31
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d12a      	bne.n	80008fe <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a26      	ldr	r2, [pc, #152]	; (8000948 <HAL_ADC_Start_DMA+0x1d8>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d015      	beq.n	80008de <HAL_ADC_Start_DMA+0x16e>
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a25      	ldr	r2, [pc, #148]	; (800094c <HAL_ADC_Start_DMA+0x1dc>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d105      	bne.n	80008c8 <HAL_ADC_Start_DMA+0x158>
 80008bc:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <HAL_ADC_Start_DMA+0x1c8>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f003 031f 	and.w	r3, r3, #31
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d00a      	beq.n	80008de <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a20      	ldr	r2, [pc, #128]	; (8000950 <HAL_ADC_Start_DMA+0x1e0>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d129      	bne.n	8000926 <HAL_ADC_Start_DMA+0x1b6>
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <HAL_ADC_Start_DMA+0x1c8>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f003 031f 	and.w	r3, r3, #31
 80008da:	2b0f      	cmp	r3, #15
 80008dc:	d823      	bhi.n	8000926 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d11c      	bne.n	8000926 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	689a      	ldr	r2, [r3, #8]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	e013      	b.n	8000926 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <HAL_ADC_Start_DMA+0x1d8>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d10e      	bne.n	8000926 <HAL_ADC_Start_DMA+0x1b6>
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000912:	2b00      	cmp	r3, #0
 8000914:	d107      	bne.n	8000926 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000924:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000008 	.word	0x20000008
 8000934:	431bde83 	.word	0x431bde83
 8000938:	40012300 	.word	0x40012300
 800093c:	08000ded 	.word	0x08000ded
 8000940:	08000ea7 	.word	0x08000ea7
 8000944:	08000ec3 	.word	0x08000ec3
 8000948:	40012000 	.word	0x40012000
 800094c:	40012100 	.word	0x40012100
 8000950:	40012200 	.word	0x40012200

08000954 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d101      	bne.n	80009ac <HAL_ADC_ConfigChannel+0x1c>
 80009a8:	2302      	movs	r3, #2
 80009aa:	e113      	b.n	8000bd4 <HAL_ADC_ConfigChannel+0x244>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2201      	movs	r2, #1
 80009b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b09      	cmp	r3, #9
 80009ba:	d925      	bls.n	8000a08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68d9      	ldr	r1, [r3, #12]
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	461a      	mov	r2, r3
 80009ca:	4613      	mov	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	4413      	add	r3, r2
 80009d0:	3b1e      	subs	r3, #30
 80009d2:	2207      	movs	r2, #7
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43da      	mvns	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	400a      	ands	r2, r1
 80009e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68d9      	ldr	r1, [r3, #12]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	4603      	mov	r3, r0
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4403      	add	r3, r0
 80009fa:	3b1e      	subs	r3, #30
 80009fc:	409a      	lsls	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	430a      	orrs	r2, r1
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	e022      	b.n	8000a4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6919      	ldr	r1, [r3, #16]
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	461a      	mov	r2, r3
 8000a16:	4613      	mov	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	400a      	ands	r2, r1
 8000a2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	6919      	ldr	r1, [r3, #16]
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	4603      	mov	r3, r0
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4403      	add	r3, r0
 8000a44:	409a      	lsls	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d824      	bhi.n	8000aa0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	3b05      	subs	r3, #5
 8000a68:	221f      	movs	r2, #31
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	400a      	ands	r2, r1
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	4413      	add	r3, r2
 8000a90:	3b05      	subs	r3, #5
 8000a92:	fa00 f203 	lsl.w	r2, r0, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a9e:	e04c      	b.n	8000b3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	2b0c      	cmp	r3, #12
 8000aa6:	d824      	bhi.n	8000af2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	3b23      	subs	r3, #35	; 0x23
 8000aba:	221f      	movs	r2, #31
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43da      	mvns	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	400a      	ands	r2, r1
 8000ac8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	3b23      	subs	r3, #35	; 0x23
 8000ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	430a      	orrs	r2, r1
 8000aee:	631a      	str	r2, [r3, #48]	; 0x30
 8000af0:	e023      	b.n	8000b3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	4613      	mov	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	3b41      	subs	r3, #65	; 0x41
 8000b04:	221f      	movs	r2, #31
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	400a      	ands	r2, r1
 8000b12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	4618      	mov	r0, r3
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	4613      	mov	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	3b41      	subs	r3, #65	; 0x41
 8000b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	430a      	orrs	r2, r1
 8000b38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <HAL_ADC_ConfigChannel+0x250>)
 8000b3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <HAL_ADC_ConfigChannel+0x254>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d10f      	bne.n	8000b68 <HAL_ADC_ConfigChannel+0x1d8>
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b12      	cmp	r3, #18
 8000b4e:	d10b      	bne.n	8000b68 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a1d      	ldr	r2, [pc, #116]	; (8000be4 <HAL_ADC_ConfigChannel+0x254>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12b      	bne.n	8000bca <HAL_ADC_ConfigChannel+0x23a>
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a1c      	ldr	r2, [pc, #112]	; (8000be8 <HAL_ADC_ConfigChannel+0x258>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d003      	beq.n	8000b84 <HAL_ADC_ConfigChannel+0x1f4>
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b11      	cmp	r3, #17
 8000b82:	d122      	bne.n	8000bca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <HAL_ADC_ConfigChannel+0x258>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d111      	bne.n	8000bca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_ADC_ConfigChannel+0x25c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <HAL_ADC_ConfigChannel+0x260>)
 8000bac:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb0:	0c9a      	lsrs	r2, r3, #18
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bbc:	e002      	b.n	8000bc4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f9      	bne.n	8000bbe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	40012300 	.word	0x40012300
 8000be4:	40012000 	.word	0x40012000
 8000be8:	10000012 	.word	0x10000012
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	431bde83 	.word	0x431bde83

08000bf4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bfc:	4b79      	ldr	r3, [pc, #484]	; (8000de4 <ADC_Init+0x1f0>)
 8000bfe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	431a      	orrs	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6859      	ldr	r1, [r3, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	021a      	lsls	r2, r3, #8
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6859      	ldr	r1, [r3, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6899      	ldr	r1, [r3, #8]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c86:	4a58      	ldr	r2, [pc, #352]	; (8000de8 <ADC_Init+0x1f4>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d022      	beq.n	8000cd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6899      	ldr	r1, [r3, #8]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	430a      	orrs	r2, r1
 8000cac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6899      	ldr	r1, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	e00f      	b.n	8000cf2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ce0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cf0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 0202 	bic.w	r2, r2, #2
 8000d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6899      	ldr	r1, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7e1b      	ldrb	r3, [r3, #24]
 8000d0c:	005a      	lsls	r2, r3, #1
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	430a      	orrs	r2, r1
 8000d14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d01b      	beq.n	8000d58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6859      	ldr	r1, [r3, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	035a      	lsls	r2, r3, #13
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	e007      	b.n	8000d68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	051a      	lsls	r2, r3, #20
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6899      	ldr	r1, [r3, #8]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000daa:	025a      	lsls	r2, r3, #9
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6899      	ldr	r1, [r3, #8]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	029a      	lsls	r2, r3, #10
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	609a      	str	r2, [r3, #8]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	40012300 	.word	0x40012300
 8000de8:	0f000001 	.word	0x0f000001

08000dec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d13c      	bne.n	8000e80 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d12b      	bne.n	8000e78 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d127      	bne.n	8000e78 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d006      	beq.n	8000e44 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d119      	bne.n	8000e78 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 0220 	bic.w	r2, r2, #32
 8000e52:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d105      	bne.n	8000e78 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	f043 0201 	orr.w	r2, r3, #1
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff fd6b 	bl	8000954 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8000e7e:	e00e      	b.n	8000e9e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	f003 0310 	and.w	r3, r3, #16
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f7ff fd75 	bl	800097c <HAL_ADC_ErrorCallback>
}
 8000e92:	e004      	b.n	8000e9e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	4798      	blx	r3
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff fd57 	bl	8000968 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ece:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2240      	movs	r2, #64	; 0x40
 8000ed4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f043 0204 	orr.w	r2, r3, #4
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f7ff fd4a 	bl	800097c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff29 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff3e 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff31 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa2 	bl	800104c <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff fab4 	bl	800068c <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e099      	b.n	8001264 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2202      	movs	r2, #2
 800113c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001150:	e00f      	b.n	8001172 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001152:	f7ff fa9b 	bl	800068c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b05      	cmp	r3, #5
 800115e:	d908      	bls.n	8001172 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2220      	movs	r2, #32
 8001164:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2203      	movs	r2, #3
 800116a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e078      	b.n	8001264 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1e8      	bne.n	8001152 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	4b38      	ldr	r3, [pc, #224]	; (800126c <HAL_DMA_Init+0x158>)
 800118c:	4013      	ands	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800119e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d107      	bne.n	80011dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	4313      	orrs	r3, r2
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4313      	orrs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f023 0307 	bic.w	r3, r3, #7
 80011f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	2b04      	cmp	r3, #4
 8001204:	d117      	bne.n	8001236 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4313      	orrs	r3, r2
 800120e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00e      	beq.n	8001236 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 fa6f 	bl	80016fc <DMA_CheckFifoParam>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d008      	beq.n	8001236 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2240      	movs	r2, #64	; 0x40
 8001228:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001232:	2301      	movs	r3, #1
 8001234:	e016      	b.n	8001264 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 fa26 	bl	8001690 <DMA_CalcBaseAndBitshift>
 8001244:	4603      	mov	r3, r0
 8001246:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124c:	223f      	movs	r2, #63	; 0x3f
 800124e:	409a      	lsls	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	f010803f 	.word	0xf010803f

08001270 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_DMA_Start_IT+0x26>
 8001292:	2302      	movs	r3, #2
 8001294:	e040      	b.n	8001318 <HAL_DMA_Start_IT+0xa8>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d12f      	bne.n	800130a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2202      	movs	r2, #2
 80012ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f9b8 	bl	8001634 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c8:	223f      	movs	r2, #63	; 0x3f
 80012ca:	409a      	lsls	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0216 	orr.w	r2, r2, #22
 80012de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0208 	orr.w	r2, r2, #8
 80012f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0201 	orr.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	e005      	b.n	8001316 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001312:	2302      	movs	r3, #2
 8001314:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001316:	7dfb      	ldrb	r3, [r7, #23]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800132c:	4b92      	ldr	r3, [pc, #584]	; (8001578 <HAL_DMA_IRQHandler+0x258>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a92      	ldr	r2, [pc, #584]	; (800157c <HAL_DMA_IRQHandler+0x25c>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	0a9b      	lsrs	r3, r3, #10
 8001338:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134a:	2208      	movs	r2, #8
 800134c:	409a      	lsls	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4013      	ands	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01a      	beq.n	800138c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0204 	bic.w	r2, r2, #4
 8001372:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001378:	2208      	movs	r2, #8
 800137a:	409a      	lsls	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001390:	2201      	movs	r2, #1
 8001392:	409a      	lsls	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4013      	ands	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d012      	beq.n	80013c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ae:	2201      	movs	r2, #1
 80013b0:	409a      	lsls	r2, r3
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ba:	f043 0202 	orr.w	r2, r3, #2
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c6:	2204      	movs	r2, #4
 80013c8:	409a      	lsls	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d012      	beq.n	80013f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00b      	beq.n	80013f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e4:	2204      	movs	r2, #4
 80013e6:	409a      	lsls	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f0:	f043 0204 	orr.w	r2, r3, #4
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fc:	2210      	movs	r2, #16
 80013fe:	409a      	lsls	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d043      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d03c      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141a:	2210      	movs	r2, #16
 800141c:	409a      	lsls	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d018      	beq.n	8001462 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d108      	bne.n	8001450 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	2b00      	cmp	r3, #0
 8001444:	d024      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
 800144e:	e01f      	b.n	8001490 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001454:	2b00      	cmp	r3, #0
 8001456:	d01b      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	4798      	blx	r3
 8001460:	e016      	b.n	8001490 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d107      	bne.n	8001480 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0208 	bic.w	r2, r2, #8
 800147e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001494:	2220      	movs	r2, #32
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 808e 	beq.w	80015be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8086 	beq.w	80015be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b6:	2220      	movs	r2, #32
 80014b8:	409a      	lsls	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d136      	bne.n	8001538 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0216 	bic.w	r2, r2, #22
 80014d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d103      	bne.n	80014fa <HAL_DMA_IRQHandler+0x1da>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0208 	bic.w	r2, r2, #8
 8001508:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	223f      	movs	r2, #63	; 0x3f
 8001510:	409a      	lsls	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800152a:	2b00      	cmp	r3, #0
 800152c:	d07d      	beq.n	800162a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	4798      	blx	r3
        }
        return;
 8001536:	e078      	b.n	800162a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01c      	beq.n	8001580 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	2b00      	cmp	r3, #0
 800155a:	d030      	beq.n	80015be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	4798      	blx	r3
 8001564:	e02b      	b.n	80015be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156a:	2b00      	cmp	r3, #0
 800156c:	d027      	beq.n	80015be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
 8001576:	e022      	b.n	80015be <HAL_DMA_IRQHandler+0x29e>
 8001578:	20000008 	.word	0x20000008
 800157c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0210 	bic.w	r2, r2, #16
 800159c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d032      	beq.n	800162c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d022      	beq.n	8001618 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2205      	movs	r2, #5
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	3301      	adds	r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d307      	bcc.n	8001606 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f2      	bne.n	80015ea <HAL_DMA_IRQHandler+0x2ca>
 8001604:	e000      	b.n	8001608 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001606:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
 8001628:	e000      	b.n	800162c <HAL_DMA_IRQHandler+0x30c>
        return;
 800162a:	bf00      	nop
    }
  }
}
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop

08001634 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001650:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b40      	cmp	r3, #64	; 0x40
 8001660:	d108      	bne.n	8001674 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001672:	e007      	b.n	8001684 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	60da      	str	r2, [r3, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	3b10      	subs	r3, #16
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <DMA_CalcBaseAndBitshift+0x64>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016aa:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <DMA_CalcBaseAndBitshift+0x68>)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d909      	bls.n	80016d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	1d1a      	adds	r2, r3, #4
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	659a      	str	r2, [r3, #88]	; 0x58
 80016d0:	e007      	b.n	80016e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016da:	f023 0303 	bic.w	r3, r3, #3
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	aaaaaaab 	.word	0xaaaaaaab
 80016f8:	08006130 	.word	0x08006130

080016fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d11f      	bne.n	8001756 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d855      	bhi.n	80017c8 <DMA_CheckFifoParam+0xcc>
 800171c:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <DMA_CheckFifoParam+0x28>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001735 	.word	0x08001735
 8001728:	08001747 	.word	0x08001747
 800172c:	08001735 	.word	0x08001735
 8001730:	080017c9 	.word	0x080017c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d045      	beq.n	80017cc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001744:	e042      	b.n	80017cc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800174e:	d13f      	bne.n	80017d0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001754:	e03c      	b.n	80017d0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800175e:	d121      	bne.n	80017a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d836      	bhi.n	80017d4 <DMA_CheckFifoParam+0xd8>
 8001766:	a201      	add	r2, pc, #4	; (adr r2, 800176c <DMA_CheckFifoParam+0x70>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	0800177d 	.word	0x0800177d
 8001770:	08001783 	.word	0x08001783
 8001774:	0800177d 	.word	0x0800177d
 8001778:	08001795 	.word	0x08001795
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
      break;
 8001780:	e02f      	b.n	80017e2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d024      	beq.n	80017d8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001792:	e021      	b.n	80017d8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800179c:	d11e      	bne.n	80017dc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017a2:	e01b      	b.n	80017dc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d902      	bls.n	80017b0 <DMA_CheckFifoParam+0xb4>
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d003      	beq.n	80017b6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017ae:	e018      	b.n	80017e2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
      break;
 80017b4:	e015      	b.n	80017e2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00e      	beq.n	80017e0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
      break;
 80017c6:	e00b      	b.n	80017e0 <DMA_CheckFifoParam+0xe4>
      break;
 80017c8:	bf00      	nop
 80017ca:	e00a      	b.n	80017e2 <DMA_CheckFifoParam+0xe6>
      break;
 80017cc:	bf00      	nop
 80017ce:	e008      	b.n	80017e2 <DMA_CheckFifoParam+0xe6>
      break;
 80017d0:	bf00      	nop
 80017d2:	e006      	b.n	80017e2 <DMA_CheckFifoParam+0xe6>
      break;
 80017d4:	bf00      	nop
 80017d6:	e004      	b.n	80017e2 <DMA_CheckFifoParam+0xe6>
      break;
 80017d8:	bf00      	nop
 80017da:	e002      	b.n	80017e2 <DMA_CheckFifoParam+0xe6>
      break;   
 80017dc:	bf00      	nop
 80017de:	e000      	b.n	80017e2 <DMA_CheckFifoParam+0xe6>
      break;
 80017e0:	bf00      	nop
    }
  } 
  
  return status; 
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	e165      	b.n	8001ad8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800180c:	2201      	movs	r2, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	429a      	cmp	r2, r3
 8001826:	f040 8154 	bne.w	8001ad2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d00b      	beq.n	800184a <HAL_GPIO_Init+0x5a>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800183e:	2b11      	cmp	r3, #17
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b12      	cmp	r3, #18
 8001848:	d130      	bne.n	80018ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001880:	2201      	movs	r2, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	f003 0201 	and.w	r2, r3, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0xfc>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b12      	cmp	r3, #18
 80018ea:	d123      	bne.n	8001934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	08da      	lsrs	r2, r3, #3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3208      	adds	r2, #8
 80018f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	08da      	lsrs	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3208      	adds	r2, #8
 800192e:	69b9      	ldr	r1, [r7, #24]
 8001930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0203 	and.w	r2, r3, #3
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80ae 	beq.w	8001ad2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b5c      	ldr	r3, [pc, #368]	; (8001aec <HAL_GPIO_Init+0x2fc>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a5b      	ldr	r2, [pc, #364]	; (8001aec <HAL_GPIO_Init+0x2fc>)
 8001980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b59      	ldr	r3, [pc, #356]	; (8001aec <HAL_GPIO_Init+0x2fc>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001992:	4a57      	ldr	r2, [pc, #348]	; (8001af0 <HAL_GPIO_Init+0x300>)
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	3302      	adds	r3, #2
 800199a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	220f      	movs	r2, #15
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4e      	ldr	r2, [pc, #312]	; (8001af4 <HAL_GPIO_Init+0x304>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d025      	beq.n	8001a0a <HAL_GPIO_Init+0x21a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4d      	ldr	r2, [pc, #308]	; (8001af8 <HAL_GPIO_Init+0x308>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01f      	beq.n	8001a06 <HAL_GPIO_Init+0x216>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <HAL_GPIO_Init+0x30c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d019      	beq.n	8001a02 <HAL_GPIO_Init+0x212>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4b      	ldr	r2, [pc, #300]	; (8001b00 <HAL_GPIO_Init+0x310>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_GPIO_Init+0x20e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4a      	ldr	r2, [pc, #296]	; (8001b04 <HAL_GPIO_Init+0x314>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00d      	beq.n	80019fa <HAL_GPIO_Init+0x20a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a49      	ldr	r2, [pc, #292]	; (8001b08 <HAL_GPIO_Init+0x318>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d007      	beq.n	80019f6 <HAL_GPIO_Init+0x206>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a48      	ldr	r2, [pc, #288]	; (8001b0c <HAL_GPIO_Init+0x31c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_GPIO_Init+0x202>
 80019ee:	2306      	movs	r3, #6
 80019f0:	e00c      	b.n	8001a0c <HAL_GPIO_Init+0x21c>
 80019f2:	2307      	movs	r3, #7
 80019f4:	e00a      	b.n	8001a0c <HAL_GPIO_Init+0x21c>
 80019f6:	2305      	movs	r3, #5
 80019f8:	e008      	b.n	8001a0c <HAL_GPIO_Init+0x21c>
 80019fa:	2304      	movs	r3, #4
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x21c>
 80019fe:	2303      	movs	r3, #3
 8001a00:	e004      	b.n	8001a0c <HAL_GPIO_Init+0x21c>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_Init+0x21c>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_GPIO_Init+0x21c>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	f002 0203 	and.w	r2, r2, #3
 8001a12:	0092      	lsls	r2, r2, #2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1c:	4934      	ldr	r1, [pc, #208]	; (8001af0 <HAL_GPIO_Init+0x300>)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a2a:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <HAL_GPIO_Init+0x320>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a4e:	4a30      	ldr	r2, [pc, #192]	; (8001b10 <HAL_GPIO_Init+0x320>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_GPIO_Init+0x320>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a78:	4a25      	ldr	r2, [pc, #148]	; (8001b10 <HAL_GPIO_Init+0x320>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_GPIO_Init+0x320>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aa2:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <HAL_GPIO_Init+0x320>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_GPIO_Init+0x320>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001acc:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <HAL_GPIO_Init+0x320>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b0f      	cmp	r3, #15
 8001adc:	f67f ae96 	bls.w	800180c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3724      	adds	r7, #36	; 0x24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40013800 	.word	0x40013800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40020800 	.word	0x40020800
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40021400 	.word	0x40021400
 8001b0c:	40021800 	.word	0x40021800
 8001b10:	40013c00 	.word	0x40013c00

08001b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
 8001b20:	4613      	mov	r3, r2
 8001b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b24:	787b      	ldrb	r3, [r7, #1]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b30:	e003      	b.n	8001b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	041a      	lsls	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	619a      	str	r2, [r3, #24]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e11f      	b.n	8001d9a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f003 f956 	bl	8004e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2224      	movs	r2, #36	; 0x24
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001baa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bac:	f000 f9f6 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 8001bb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4a7b      	ldr	r2, [pc, #492]	; (8001da4 <HAL_I2C_Init+0x25c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d807      	bhi.n	8001bcc <HAL_I2C_Init+0x84>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <HAL_I2C_Init+0x260>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bf94      	ite	ls
 8001bc4:	2301      	movls	r3, #1
 8001bc6:	2300      	movhi	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	e006      	b.n	8001bda <HAL_I2C_Init+0x92>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4a77      	ldr	r2, [pc, #476]	; (8001dac <HAL_I2C_Init+0x264>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	bf94      	ite	ls
 8001bd4:	2301      	movls	r3, #1
 8001bd6:	2300      	movhi	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0db      	b.n	8001d9a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4a72      	ldr	r2, [pc, #456]	; (8001db0 <HAL_I2C_Init+0x268>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0c9b      	lsrs	r3, r3, #18
 8001bec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a64      	ldr	r2, [pc, #400]	; (8001da4 <HAL_I2C_Init+0x25c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d802      	bhi.n	8001c1c <HAL_I2C_Init+0xd4>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	e009      	b.n	8001c30 <HAL_I2C_Init+0xe8>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	4a63      	ldr	r2, [pc, #396]	; (8001db4 <HAL_I2C_Init+0x26c>)
 8001c28:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	3301      	adds	r3, #1
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4956      	ldr	r1, [pc, #344]	; (8001da4 <HAL_I2C_Init+0x25c>)
 8001c4c:	428b      	cmp	r3, r1
 8001c4e:	d80d      	bhi.n	8001c6c <HAL_I2C_Init+0x124>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1e59      	subs	r1, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	bf38      	it	cc
 8001c68:	2304      	movcc	r3, #4
 8001c6a:	e04f      	b.n	8001d0c <HAL_I2C_Init+0x1c4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d111      	bne.n	8001c98 <HAL_I2C_Init+0x150>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1e58      	subs	r0, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	440b      	add	r3, r1
 8001c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	e012      	b.n	8001cbe <HAL_I2C_Init+0x176>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1e58      	subs	r0, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	0099      	lsls	r1, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_Init+0x17e>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e022      	b.n	8001d0c <HAL_I2C_Init+0x1c4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10e      	bne.n	8001cec <HAL_I2C_Init+0x1a4>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1e58      	subs	r0, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6859      	ldr	r1, [r3, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	440b      	add	r3, r1
 8001cdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cea:	e00f      	b.n	8001d0c <HAL_I2C_Init+0x1c4>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1e58      	subs	r0, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	0099      	lsls	r1, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	6809      	ldr	r1, [r1, #0]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69da      	ldr	r2, [r3, #28]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6911      	ldr	r1, [r2, #16]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68d2      	ldr	r2, [r2, #12]
 8001d46:	4311      	orrs	r1, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	000186a0 	.word	0x000186a0
 8001da8:	001e847f 	.word	0x001e847f
 8001dac:	003d08ff 	.word	0x003d08ff
 8001db0:	431bde83 	.word	0x431bde83
 8001db4:	10624dd3 	.word	0x10624dd3

08001db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0cc      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b68      	ldr	r3, [pc, #416]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d90c      	bls.n	8001df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b65      	ldr	r3, [pc, #404]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b63      	ldr	r3, [pc, #396]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0b8      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e0c:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e24:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a52      	ldr	r2, [pc, #328]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e30:	4b50      	ldr	r3, [pc, #320]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	494d      	ldr	r1, [pc, #308]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d044      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d119      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e07f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e06f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e067      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4934      	ldr	r1, [pc, #208]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea8:	f7fe fbf0 	bl	800068c <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7fe fbec 	bl	800068c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e04f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d20c      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e032      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4916      	ldr	r1, [pc, #88]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	490e      	ldr	r1, [pc, #56]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f3e:	f000 f855 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001f42:	4601      	mov	r1, r0
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	fa21 f303 	lsr.w	r3, r1, r3
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fb50 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023c00 	.word	0x40023c00
 8001f74:	40023800 	.word	0x40023800
 8001f78:	08006138 	.word	0x08006138
 8001f7c:	20000008 	.word	0x20000008
 8001f80:	20000000 	.word	0x20000000

08001f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000008 	.word	0x20000008

08001f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa0:	f7ff fff0 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fa4:	4601      	mov	r1, r0
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0a9b      	lsrs	r3, r3, #10
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb2:	5cd3      	ldrb	r3, [r2, r3]
 8001fb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	08006148 	.word	0x08006148

08001fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fc8:	f7ff ffdc 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fcc:	4601      	mov	r1, r0
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	0b5b      	lsrs	r3, r3, #13
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4a03      	ldr	r2, [pc, #12]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	08006148 	.word	0x08006148

08001fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002006:	4bc6      	ldr	r3, [pc, #792]	; (8002320 <HAL_RCC_GetSysClockFreq+0x334>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b0c      	cmp	r3, #12
 8002010:	f200 817e 	bhi.w	8002310 <HAL_RCC_GetSysClockFreq+0x324>
 8002014:	a201      	add	r2, pc, #4	; (adr r2, 800201c <HAL_RCC_GetSysClockFreq+0x30>)
 8002016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201a:	bf00      	nop
 800201c:	08002051 	.word	0x08002051
 8002020:	08002311 	.word	0x08002311
 8002024:	08002311 	.word	0x08002311
 8002028:	08002311 	.word	0x08002311
 800202c:	08002057 	.word	0x08002057
 8002030:	08002311 	.word	0x08002311
 8002034:	08002311 	.word	0x08002311
 8002038:	08002311 	.word	0x08002311
 800203c:	0800205d 	.word	0x0800205d
 8002040:	08002311 	.word	0x08002311
 8002044:	08002311 	.word	0x08002311
 8002048:	08002311 	.word	0x08002311
 800204c:	080021b9 	.word	0x080021b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4bb4      	ldr	r3, [pc, #720]	; (8002324 <HAL_RCC_GetSysClockFreq+0x338>)
 8002052:	613b      	str	r3, [r7, #16]
       break;
 8002054:	e15f      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002056:	4bb4      	ldr	r3, [pc, #720]	; (8002328 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002058:	613b      	str	r3, [r7, #16]
      break;
 800205a:	e15c      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800205c:	4bb0      	ldr	r3, [pc, #704]	; (8002320 <HAL_RCC_GetSysClockFreq+0x334>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002064:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002066:	4bae      	ldr	r3, [pc, #696]	; (8002320 <HAL_RCC_GetSysClockFreq+0x334>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d04a      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002072:	4bab      	ldr	r3, [pc, #684]	; (8002320 <HAL_RCC_GetSysClockFreq+0x334>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	f04f 0400 	mov.w	r4, #0
 800207c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	ea03 0501 	and.w	r5, r3, r1
 8002088:	ea04 0602 	and.w	r6, r4, r2
 800208c:	4629      	mov	r1, r5
 800208e:	4632      	mov	r2, r6
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	f04f 0400 	mov.w	r4, #0
 8002098:	0154      	lsls	r4, r2, #5
 800209a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800209e:	014b      	lsls	r3, r1, #5
 80020a0:	4619      	mov	r1, r3
 80020a2:	4622      	mov	r2, r4
 80020a4:	1b49      	subs	r1, r1, r5
 80020a6:	eb62 0206 	sbc.w	r2, r2, r6
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	f04f 0400 	mov.w	r4, #0
 80020b2:	0194      	lsls	r4, r2, #6
 80020b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020b8:	018b      	lsls	r3, r1, #6
 80020ba:	1a5b      	subs	r3, r3, r1
 80020bc:	eb64 0402 	sbc.w	r4, r4, r2
 80020c0:	f04f 0100 	mov.w	r1, #0
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	00e2      	lsls	r2, r4, #3
 80020ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020ce:	00d9      	lsls	r1, r3, #3
 80020d0:	460b      	mov	r3, r1
 80020d2:	4614      	mov	r4, r2
 80020d4:	195b      	adds	r3, r3, r5
 80020d6:	eb44 0406 	adc.w	r4, r4, r6
 80020da:	f04f 0100 	mov.w	r1, #0
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	0262      	lsls	r2, r4, #9
 80020e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020e8:	0259      	lsls	r1, r3, #9
 80020ea:	460b      	mov	r3, r1
 80020ec:	4614      	mov	r4, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	4621      	mov	r1, r4
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f04f 0400 	mov.w	r4, #0
 80020f8:	461a      	mov	r2, r3
 80020fa:	4623      	mov	r3, r4
 80020fc:	f7fe f8e0 	bl	80002c0 <__aeabi_uldivmod>
 8002100:	4603      	mov	r3, r0
 8002102:	460c      	mov	r4, r1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	e049      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002108:	4b85      	ldr	r3, [pc, #532]	; (8002320 <HAL_RCC_GetSysClockFreq+0x334>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	f04f 0400 	mov.w	r4, #0
 8002112:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	ea03 0501 	and.w	r5, r3, r1
 800211e:	ea04 0602 	and.w	r6, r4, r2
 8002122:	4629      	mov	r1, r5
 8002124:	4632      	mov	r2, r6
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	f04f 0400 	mov.w	r4, #0
 800212e:	0154      	lsls	r4, r2, #5
 8002130:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002134:	014b      	lsls	r3, r1, #5
 8002136:	4619      	mov	r1, r3
 8002138:	4622      	mov	r2, r4
 800213a:	1b49      	subs	r1, r1, r5
 800213c:	eb62 0206 	sbc.w	r2, r2, r6
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	f04f 0400 	mov.w	r4, #0
 8002148:	0194      	lsls	r4, r2, #6
 800214a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800214e:	018b      	lsls	r3, r1, #6
 8002150:	1a5b      	subs	r3, r3, r1
 8002152:	eb64 0402 	sbc.w	r4, r4, r2
 8002156:	f04f 0100 	mov.w	r1, #0
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	00e2      	lsls	r2, r4, #3
 8002160:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002164:	00d9      	lsls	r1, r3, #3
 8002166:	460b      	mov	r3, r1
 8002168:	4614      	mov	r4, r2
 800216a:	195b      	adds	r3, r3, r5
 800216c:	eb44 0406 	adc.w	r4, r4, r6
 8002170:	f04f 0100 	mov.w	r1, #0
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	02a2      	lsls	r2, r4, #10
 800217a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800217e:	0299      	lsls	r1, r3, #10
 8002180:	460b      	mov	r3, r1
 8002182:	4614      	mov	r4, r2
 8002184:	4618      	mov	r0, r3
 8002186:	4621      	mov	r1, r4
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f04f 0400 	mov.w	r4, #0
 800218e:	461a      	mov	r2, r3
 8002190:	4623      	mov	r3, r4
 8002192:	f7fe f895 	bl	80002c0 <__aeabi_uldivmod>
 8002196:	4603      	mov	r3, r0
 8002198:	460c      	mov	r4, r1
 800219a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800219c:	4b60      	ldr	r3, [pc, #384]	; (8002320 <HAL_RCC_GetSysClockFreq+0x334>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	3301      	adds	r3, #1
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	613b      	str	r3, [r7, #16]
      break;
 80021b6:	e0ae      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021b8:	4b59      	ldr	r3, [pc, #356]	; (8002320 <HAL_RCC_GetSysClockFreq+0x334>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c2:	4b57      	ldr	r3, [pc, #348]	; (8002320 <HAL_RCC_GetSysClockFreq+0x334>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d04a      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ce:	4b54      	ldr	r3, [pc, #336]	; (8002320 <HAL_RCC_GetSysClockFreq+0x334>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	099b      	lsrs	r3, r3, #6
 80021d4:	f04f 0400 	mov.w	r4, #0
 80021d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	ea03 0501 	and.w	r5, r3, r1
 80021e4:	ea04 0602 	and.w	r6, r4, r2
 80021e8:	4629      	mov	r1, r5
 80021ea:	4632      	mov	r2, r6
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	f04f 0400 	mov.w	r4, #0
 80021f4:	0154      	lsls	r4, r2, #5
 80021f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021fa:	014b      	lsls	r3, r1, #5
 80021fc:	4619      	mov	r1, r3
 80021fe:	4622      	mov	r2, r4
 8002200:	1b49      	subs	r1, r1, r5
 8002202:	eb62 0206 	sbc.w	r2, r2, r6
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	f04f 0400 	mov.w	r4, #0
 800220e:	0194      	lsls	r4, r2, #6
 8002210:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002214:	018b      	lsls	r3, r1, #6
 8002216:	1a5b      	subs	r3, r3, r1
 8002218:	eb64 0402 	sbc.w	r4, r4, r2
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	00e2      	lsls	r2, r4, #3
 8002226:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800222a:	00d9      	lsls	r1, r3, #3
 800222c:	460b      	mov	r3, r1
 800222e:	4614      	mov	r4, r2
 8002230:	195b      	adds	r3, r3, r5
 8002232:	eb44 0406 	adc.w	r4, r4, r6
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	0262      	lsls	r2, r4, #9
 8002240:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002244:	0259      	lsls	r1, r3, #9
 8002246:	460b      	mov	r3, r1
 8002248:	4614      	mov	r4, r2
 800224a:	4618      	mov	r0, r3
 800224c:	4621      	mov	r1, r4
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f04f 0400 	mov.w	r4, #0
 8002254:	461a      	mov	r2, r3
 8002256:	4623      	mov	r3, r4
 8002258:	f7fe f832 	bl	80002c0 <__aeabi_uldivmod>
 800225c:	4603      	mov	r3, r0
 800225e:	460c      	mov	r4, r1
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e049      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002264:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <HAL_RCC_GetSysClockFreq+0x334>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	f04f 0400 	mov.w	r4, #0
 800226e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	ea03 0501 	and.w	r5, r3, r1
 800227a:	ea04 0602 	and.w	r6, r4, r2
 800227e:	4629      	mov	r1, r5
 8002280:	4632      	mov	r2, r6
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	f04f 0400 	mov.w	r4, #0
 800228a:	0154      	lsls	r4, r2, #5
 800228c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002290:	014b      	lsls	r3, r1, #5
 8002292:	4619      	mov	r1, r3
 8002294:	4622      	mov	r2, r4
 8002296:	1b49      	subs	r1, r1, r5
 8002298:	eb62 0206 	sbc.w	r2, r2, r6
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	f04f 0400 	mov.w	r4, #0
 80022a4:	0194      	lsls	r4, r2, #6
 80022a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022aa:	018b      	lsls	r3, r1, #6
 80022ac:	1a5b      	subs	r3, r3, r1
 80022ae:	eb64 0402 	sbc.w	r4, r4, r2
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	00e2      	lsls	r2, r4, #3
 80022bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022c0:	00d9      	lsls	r1, r3, #3
 80022c2:	460b      	mov	r3, r1
 80022c4:	4614      	mov	r4, r2
 80022c6:	195b      	adds	r3, r3, r5
 80022c8:	eb44 0406 	adc.w	r4, r4, r6
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	02a2      	lsls	r2, r4, #10
 80022d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022da:	0299      	lsls	r1, r3, #10
 80022dc:	460b      	mov	r3, r1
 80022de:	4614      	mov	r4, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	4621      	mov	r1, r4
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f04f 0400 	mov.w	r4, #0
 80022ea:	461a      	mov	r2, r3
 80022ec:	4623      	mov	r3, r4
 80022ee:	f7fd ffe7 	bl	80002c0 <__aeabi_uldivmod>
 80022f2:	4603      	mov	r3, r0
 80022f4:	460c      	mov	r4, r1
 80022f6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_RCC_GetSysClockFreq+0x334>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	0f1b      	lsrs	r3, r3, #28
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	613b      	str	r3, [r7, #16]
      break;
 800230e:	e002      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <HAL_RCC_GetSysClockFreq+0x338>)
 8002312:	613b      	str	r3, [r7, #16]
      break;
 8002314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002316:	693b      	ldr	r3, [r7, #16]
}
 8002318:	4618      	mov	r0, r3
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002320:	40023800 	.word	0x40023800
 8002324:	00f42400 	.word	0x00f42400
 8002328:	007a1200 	.word	0x007a1200

0800232c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8083 	beq.w	800244c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002346:	4b95      	ldr	r3, [pc, #596]	; (800259c <HAL_RCC_OscConfig+0x270>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b04      	cmp	r3, #4
 8002350:	d019      	beq.n	8002386 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002352:	4b92      	ldr	r3, [pc, #584]	; (800259c <HAL_RCC_OscConfig+0x270>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800235a:	2b08      	cmp	r3, #8
 800235c:	d106      	bne.n	800236c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800235e:	4b8f      	ldr	r3, [pc, #572]	; (800259c <HAL_RCC_OscConfig+0x270>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800236a:	d00c      	beq.n	8002386 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236c:	4b8b      	ldr	r3, [pc, #556]	; (800259c <HAL_RCC_OscConfig+0x270>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d112      	bne.n	800239e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002378:	4b88      	ldr	r3, [pc, #544]	; (800259c <HAL_RCC_OscConfig+0x270>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002384:	d10b      	bne.n	800239e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002386:	4b85      	ldr	r3, [pc, #532]	; (800259c <HAL_RCC_OscConfig+0x270>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d05b      	beq.n	800244a <HAL_RCC_OscConfig+0x11e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d157      	bne.n	800244a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e216      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x8a>
 80023a8:	4b7c      	ldr	r3, [pc, #496]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a7b      	ldr	r2, [pc, #492]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80023ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	e01d      	b.n	80023f2 <HAL_RCC_OscConfig+0xc6>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023be:	d10c      	bne.n	80023da <HAL_RCC_OscConfig+0xae>
 80023c0:	4b76      	ldr	r3, [pc, #472]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a75      	ldr	r2, [pc, #468]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80023c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b73      	ldr	r3, [pc, #460]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a72      	ldr	r2, [pc, #456]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80023d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	e00b      	b.n	80023f2 <HAL_RCC_OscConfig+0xc6>
 80023da:	4b70      	ldr	r3, [pc, #448]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a6f      	ldr	r2, [pc, #444]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80023e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b6d      	ldr	r3, [pc, #436]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6c      	ldr	r2, [pc, #432]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80023ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d013      	beq.n	8002422 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7fe f947 	bl	800068c <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002402:	f7fe f943 	bl	800068c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b64      	cmp	r3, #100	; 0x64
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e1db      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002414:	4b61      	ldr	r3, [pc, #388]	; (800259c <HAL_RCC_OscConfig+0x270>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0xd6>
 8002420:	e014      	b.n	800244c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7fe f933 	bl	800068c <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242a:	f7fe f92f 	bl	800068c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b64      	cmp	r3, #100	; 0x64
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e1c7      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243c:	4b57      	ldr	r3, [pc, #348]	; (800259c <HAL_RCC_OscConfig+0x270>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f0      	bne.n	800242a <HAL_RCC_OscConfig+0xfe>
 8002448:	e000      	b.n	800244c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d06f      	beq.n	8002538 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002458:	4b50      	ldr	r3, [pc, #320]	; (800259c <HAL_RCC_OscConfig+0x270>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b00      	cmp	r3, #0
 8002462:	d017      	beq.n	8002494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002464:	4b4d      	ldr	r3, [pc, #308]	; (800259c <HAL_RCC_OscConfig+0x270>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800246c:	2b08      	cmp	r3, #8
 800246e:	d105      	bne.n	800247c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002470:	4b4a      	ldr	r3, [pc, #296]	; (800259c <HAL_RCC_OscConfig+0x270>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00b      	beq.n	8002494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247c:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCC_OscConfig+0x270>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d11c      	bne.n	80024c2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002488:	4b44      	ldr	r3, [pc, #272]	; (800259c <HAL_RCC_OscConfig+0x270>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d116      	bne.n	80024c2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002494:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCC_OscConfig+0x270>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_OscConfig+0x180>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e18f      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	4b3b      	ldr	r3, [pc, #236]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4938      	ldr	r1, [pc, #224]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c0:	e03a      	b.n	8002538 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d020      	beq.n	800250c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ca:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <HAL_RCC_OscConfig+0x274>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe f8dc 	bl	800068c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d8:	f7fe f8d8 	bl	800068c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e170      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	4b2c      	ldr	r3, [pc, #176]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4925      	ldr	r1, [pc, #148]	; (800259c <HAL_RCC_OscConfig+0x270>)
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
 800250a:	e015      	b.n	8002538 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250c:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_RCC_OscConfig+0x274>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe f8bb 	bl	800068c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251a:	f7fe f8b7 	bl	800068c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e14f      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_RCC_OscConfig+0x270>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f0      	bne.n	800251a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d037      	beq.n	80025b4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d016      	beq.n	800257a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_RCC_OscConfig+0x278>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7fe f89b 	bl	800068c <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800255a:	f7fe f897 	bl	800068c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e12f      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_OscConfig+0x270>)
 800256e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x22e>
 8002578:	e01c      	b.n	80025b4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_RCC_OscConfig+0x278>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7fe f884 	bl	800068c <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002586:	e00f      	b.n	80025a8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002588:	f7fe f880 	bl	800068c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d908      	bls.n	80025a8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e118      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	42470000 	.word	0x42470000
 80025a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a8:	4b8a      	ldr	r3, [pc, #552]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 80025aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e9      	bne.n	8002588 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8097 	beq.w	80026f0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c6:	4b83      	ldr	r3, [pc, #524]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10f      	bne.n	80025f2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b7f      	ldr	r3, [pc, #508]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	4a7e      	ldr	r2, [pc, #504]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 80025dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e0:	6413      	str	r3, [r2, #64]	; 0x40
 80025e2:	4b7c      	ldr	r3, [pc, #496]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025ee:	2301      	movs	r3, #1
 80025f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b79      	ldr	r3, [pc, #484]	; (80027d8 <HAL_RCC_OscConfig+0x4ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d118      	bne.n	8002630 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fe:	4b76      	ldr	r3, [pc, #472]	; (80027d8 <HAL_RCC_OscConfig+0x4ac>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a75      	ldr	r2, [pc, #468]	; (80027d8 <HAL_RCC_OscConfig+0x4ac>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260a:	f7fe f83f 	bl	800068c <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002612:	f7fe f83b 	bl	800068c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e0d3      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	4b6c      	ldr	r3, [pc, #432]	; (80027d8 <HAL_RCC_OscConfig+0x4ac>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x31a>
 8002638:	4b66      	ldr	r3, [pc, #408]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	4a65      	ldr	r2, [pc, #404]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6713      	str	r3, [r2, #112]	; 0x70
 8002644:	e01c      	b.n	8002680 <HAL_RCC_OscConfig+0x354>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b05      	cmp	r3, #5
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x33c>
 800264e:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	4a60      	ldr	r2, [pc, #384]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	6713      	str	r3, [r2, #112]	; 0x70
 800265a:	4b5e      	ldr	r3, [pc, #376]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	4a5d      	ldr	r2, [pc, #372]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6713      	str	r3, [r2, #112]	; 0x70
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0x354>
 8002668:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	6713      	str	r3, [r2, #112]	; 0x70
 8002674:	4b57      	ldr	r3, [pc, #348]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	4a56      	ldr	r2, [pc, #344]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 800267a:	f023 0304 	bic.w	r3, r3, #4
 800267e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d015      	beq.n	80026b4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7fe f800 	bl	800068c <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7fd fffc 	bl	800068c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e092      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a6:	4b4b      	ldr	r3, [pc, #300]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0ee      	beq.n	8002690 <HAL_RCC_OscConfig+0x364>
 80026b2:	e014      	b.n	80026de <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7fd ffea 	bl	800068c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7fd ffe6 	bl	800068c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e07c      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d2:	4b40      	ldr	r3, [pc, #256]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ee      	bne.n	80026bc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	4b3b      	ldr	r3, [pc, #236]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	4a3a      	ldr	r2, [pc, #232]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d068      	beq.n	80027ca <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f8:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d060      	beq.n	80027c6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d145      	bne.n	8002798 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270c:	4b33      	ldr	r3, [pc, #204]	; (80027dc <HAL_RCC_OscConfig+0x4b0>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7fd ffbb 	bl	800068c <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271a:	f7fd ffb7 	bl	800068c <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e04f      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	019b      	lsls	r3, r3, #6
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	3b01      	subs	r3, #1
 8002752:	041b      	lsls	r3, r3, #16
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	061b      	lsls	r3, r3, #24
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	071b      	lsls	r3, r3, #28
 8002764:	491b      	ldr	r1, [pc, #108]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276a:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <HAL_RCC_OscConfig+0x4b0>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fd ff8c 	bl	800068c <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002778:	f7fd ff88 	bl	800068c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e020      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278a:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x44c>
 8002796:	e018      	b.n	80027ca <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_RCC_OscConfig+0x4b0>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7fd ff75 	bl	800068c <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a6:	f7fd ff71 	bl	800068c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e009      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_RCC_OscConfig+0x4a8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x47a>
 80027c4:	e001      	b.n	80027ca <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40007000 	.word	0x40007000
 80027dc:	42470060 	.word	0x42470060

080027e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e056      	b.n	80028a0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d106      	bne.n	8002812 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f002 fc6f 	bl	80050f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2202      	movs	r2, #2
 8002816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002828:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	ea42 0103 	orr.w	r1, r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	0c1b      	lsrs	r3, r3, #16
 8002870:	f003 0104 	and.w	r1, r3, #4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_SPI_Transmit+0x22>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e11e      	b.n	8002b08 <HAL_SPI_Transmit+0x260>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028d2:	f7fd fedb 	bl	800068c <HAL_GetTick>
 80028d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d002      	beq.n	80028ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
 80028ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028ec:	e103      	b.n	8002af6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_SPI_Transmit+0x52>
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028fe:	e0fa      	b.n	8002af6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2203      	movs	r2, #3
 8002904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	88fa      	ldrh	r2, [r7, #6]
 8002918:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	88fa      	ldrh	r2, [r7, #6]
 800291e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002946:	d107      	bne.n	8002958 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002956:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b40      	cmp	r3, #64	; 0x40
 8002964:	d007      	beq.n	8002976 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800297e:	d14b      	bne.n	8002a18 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <HAL_SPI_Transmit+0xe6>
 8002988:	8afb      	ldrh	r3, [r7, #22]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d13e      	bne.n	8002a0c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	1c9a      	adds	r2, r3, #2
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029b2:	e02b      	b.n	8002a0c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d112      	bne.n	80029e8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	881a      	ldrh	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	1c9a      	adds	r2, r3, #2
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80029e6:	e011      	b.n	8002a0c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029e8:	f7fd fe50 	bl	800068c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d803      	bhi.n	8002a00 <HAL_SPI_Transmit+0x158>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fe:	d102      	bne.n	8002a06 <HAL_SPI_Transmit+0x15e>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a0a:	e074      	b.n	8002af6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1ce      	bne.n	80029b4 <HAL_SPI_Transmit+0x10c>
 8002a16:	e04c      	b.n	8002ab2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_SPI_Transmit+0x17e>
 8002a20:	8afb      	ldrh	r3, [r7, #22]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d140      	bne.n	8002aa8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	7812      	ldrb	r2, [r2, #0]
 8002a32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a4c:	e02c      	b.n	8002aa8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d113      	bne.n	8002a84 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	330c      	adds	r3, #12
 8002a66:	7812      	ldrb	r2, [r2, #0]
 8002a68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a82:	e011      	b.n	8002aa8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a84:	f7fd fe02 	bl	800068c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d803      	bhi.n	8002a9c <HAL_SPI_Transmit+0x1f4>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d102      	bne.n	8002aa2 <HAL_SPI_Transmit+0x1fa>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002aa6:	e026      	b.n	8002af6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1cd      	bne.n	8002a4e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	6839      	ldr	r1, [r7, #0]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fba4 	bl	8003204 <SPI_EndRxTxTransaction>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	77fb      	strb	r3, [r7, #31]
 8002af2:	e000      	b.n	8002af6 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002af4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b06:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2c:	d112      	bne.n	8002b54 <HAL_SPI_Receive+0x44>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10e      	bne.n	8002b54 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b3e:	88fa      	ldrh	r2, [r7, #6]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f8e9 	bl	8002d22 <HAL_SPI_TransmitReceive>
 8002b50:	4603      	mov	r3, r0
 8002b52:	e0e2      	b.n	8002d1a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_SPI_Receive+0x52>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e0db      	b.n	8002d1a <HAL_SPI_Receive+0x20a>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b6a:	f7fd fd8f 	bl	800068c <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d002      	beq.n	8002b82 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b80:	e0c2      	b.n	8002d08 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <HAL_SPI_Receive+0x7e>
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b92:	e0b9      	b.n	8002d08 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2204      	movs	r2, #4
 8002b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	88fa      	ldrh	r2, [r7, #6]
 8002bac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	88fa      	ldrh	r2, [r7, #6]
 8002bb2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bda:	d107      	bne.n	8002bec <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b40      	cmp	r3, #64	; 0x40
 8002bf8:	d007      	beq.n	8002c0a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c08:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d162      	bne.n	8002cd8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c12:	e02e      	b.n	8002c72 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d115      	bne.n	8002c4e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f103 020c 	add.w	r2, r3, #12
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	7812      	ldrb	r2, [r2, #0]
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c4c:	e011      	b.n	8002c72 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c4e:	f7fd fd1d 	bl	800068c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d803      	bhi.n	8002c66 <HAL_SPI_Receive+0x156>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Receive+0x15c>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c70:	e04a      	b.n	8002d08 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1cb      	bne.n	8002c14 <HAL_SPI_Receive+0x104>
 8002c7c:	e031      	b.n	8002ce2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d113      	bne.n	8002cb4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	b292      	uxth	r2, r2
 8002c98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	1c9a      	adds	r2, r3, #2
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cb2:	e011      	b.n	8002cd8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cb4:	f7fd fcea 	bl	800068c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d803      	bhi.n	8002ccc <HAL_SPI_Receive+0x1bc>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d102      	bne.n	8002cd2 <HAL_SPI_Receive+0x1c2>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cd6:	e017      	b.n	8002d08 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1cd      	bne.n	8002c7e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	6839      	ldr	r1, [r7, #0]
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fa27 	bl	800313a <SPI_EndRxTransaction>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
 8002d04:	e000      	b.n	8002d08 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002d06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b08c      	sub	sp, #48	; 0x30
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d30:	2301      	movs	r3, #1
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_SPI_TransmitReceive+0x26>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e18a      	b.n	800305e <HAL_SPI_TransmitReceive+0x33c>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d50:	f7fd fc9c 	bl	800068c <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d00f      	beq.n	8002d92 <HAL_SPI_TransmitReceive+0x70>
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d78:	d107      	bne.n	8002d8a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d103      	bne.n	8002d8a <HAL_SPI_TransmitReceive+0x68>
 8002d82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d003      	beq.n	8002d92 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d90:	e15b      	b.n	800304a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_SPI_TransmitReceive+0x82>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_SPI_TransmitReceive+0x82>
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d103      	bne.n	8002dac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002daa:	e14e      	b.n	800304a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d003      	beq.n	8002dc0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2205      	movs	r2, #5
 8002dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	887a      	ldrh	r2, [r7, #2]
 8002dd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	887a      	ldrh	r2, [r7, #2]
 8002de2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e00:	2b40      	cmp	r3, #64	; 0x40
 8002e02:	d007      	beq.n	8002e14 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e1c:	d178      	bne.n	8002f10 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_SPI_TransmitReceive+0x10a>
 8002e26:	8b7b      	ldrh	r3, [r7, #26]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d166      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	1c9a      	adds	r2, r3, #2
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e50:	e053      	b.n	8002efa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d11b      	bne.n	8002e98 <HAL_SPI_TransmitReceive+0x176>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <HAL_SPI_TransmitReceive+0x176>
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d113      	bne.n	8002e98 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	881a      	ldrh	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	1c9a      	adds	r2, r3, #2
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d119      	bne.n	8002eda <HAL_SPI_TransmitReceive+0x1b8>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d014      	beq.n	8002eda <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	1c9a      	adds	r2, r3, #2
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002eda:	f7fd fbd7 	bl	800068c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d807      	bhi.n	8002efa <HAL_SPI_TransmitReceive+0x1d8>
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d003      	beq.n	8002efa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ef8:	e0a7      	b.n	800304a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1a6      	bne.n	8002e52 <HAL_SPI_TransmitReceive+0x130>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1a1      	bne.n	8002e52 <HAL_SPI_TransmitReceive+0x130>
 8002f0e:	e07c      	b.n	800300a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_SPI_TransmitReceive+0x1fc>
 8002f18:	8b7b      	ldrh	r3, [r7, #26]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d16b      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	330c      	adds	r3, #12
 8002f28:	7812      	ldrb	r2, [r2, #0]
 8002f2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f44:	e057      	b.n	8002ff6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d11c      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x26c>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d017      	beq.n	8002f8e <HAL_SPI_TransmitReceive+0x26c>
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d114      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	7812      	ldrb	r2, [r2, #0]
 8002f70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d119      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x2ae>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d014      	beq.n	8002fd0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fd0:	f7fd fb5c 	bl	800068c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d803      	bhi.n	8002fe8 <HAL_SPI_TransmitReceive+0x2c6>
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d102      	bne.n	8002fee <HAL_SPI_TransmitReceive+0x2cc>
 8002fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ff4:	e029      	b.n	800304a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1a2      	bne.n	8002f46 <HAL_SPI_TransmitReceive+0x224>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d19d      	bne.n	8002f46 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800300a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f8f8 	bl	8003204 <SPI_EndRxTxTransaction>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d006      	beq.n	8003028 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003026:	e010      	b.n	800304a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	e000      	b.n	800304a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003048:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800305a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800305e:	4618      	mov	r0, r3
 8003060:	3730      	adds	r7, #48	; 0x30
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	4613      	mov	r3, r2
 8003074:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003076:	e04c      	b.n	8003112 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307e:	d048      	beq.n	8003112 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003080:	f7fd fb04 	bl	800068c <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d902      	bls.n	8003096 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d13d      	bne.n	8003112 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ae:	d111      	bne.n	80030d4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b8:	d004      	beq.n	80030c4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c2:	d107      	bne.n	80030d4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030dc:	d10f      	bne.n	80030fe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e00f      	b.n	8003132 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4013      	ands	r3, r2
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	429a      	cmp	r2, r3
 800312e:	d1a3      	bne.n	8003078 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af02      	add	r7, sp, #8
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800314e:	d111      	bne.n	8003174 <SPI_EndRxTransaction+0x3a>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003158:	d004      	beq.n	8003164 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003162:	d107      	bne.n	8003174 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003172:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800317c:	d12a      	bne.n	80031d4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003186:	d012      	beq.n	80031ae <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2200      	movs	r2, #0
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7ff ff67 	bl	8003066 <SPI_WaitFlagStateUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d02d      	beq.n	80031fa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	f043 0220 	orr.w	r2, r3, #32
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e026      	b.n	80031fc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2200      	movs	r2, #0
 80031b6:	2101      	movs	r1, #1
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7ff ff54 	bl	8003066 <SPI_WaitFlagStateUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01a      	beq.n	80031fa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e013      	b.n	80031fc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2200      	movs	r2, #0
 80031dc:	2101      	movs	r1, #1
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f7ff ff41 	bl	8003066 <SPI_WaitFlagStateUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	f043 0220 	orr.w	r2, r3, #32
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e000      	b.n	80031fc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <SPI_EndRxTxTransaction+0x7c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <SPI_EndRxTxTransaction+0x80>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	0d5b      	lsrs	r3, r3, #21
 800321c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003220:	fb02 f303 	mul.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800322e:	d112      	bne.n	8003256 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2200      	movs	r2, #0
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f7ff ff13 	bl	8003066 <SPI_WaitFlagStateUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e00f      	b.n	8003276 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	3b01      	subs	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	2b80      	cmp	r3, #128	; 0x80
 800326e:	d0f2      	beq.n	8003256 <SPI_EndRxTxTransaction+0x52>
 8003270:	e000      	b.n	8003274 <SPI_EndRxTxTransaction+0x70>
        break;
 8003272:	bf00      	nop
  }

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000008 	.word	0x20000008
 8003284:	165e9f81 	.word	0x165e9f81

08003288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e03f      	b.n	800331a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f002 f862 	bl	8005378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2224      	movs	r2, #36	; 0x24
 80032b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f90b 	bl	80034e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b088      	sub	sp, #32
 8003326:	af02      	add	r7, sp, #8
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b20      	cmp	r3, #32
 8003340:	f040 8083 	bne.w	800344a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_UART_Transmit+0x2e>
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e07b      	b.n	800344c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_UART_Transmit+0x40>
 800335e:	2302      	movs	r3, #2
 8003360:	e074      	b.n	800344c <HAL_UART_Transmit+0x12a>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2221      	movs	r2, #33	; 0x21
 8003374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003378:	f7fd f988 	bl	800068c <HAL_GetTick>
 800337c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	88fa      	ldrh	r2, [r7, #6]
 8003382:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	88fa      	ldrh	r2, [r7, #6]
 8003388:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003392:	e042      	b.n	800341a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033aa:	d122      	bne.n	80033f2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2200      	movs	r2, #0
 80033b4:	2180      	movs	r1, #128	; 0x80
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f84c 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e042      	b.n	800344c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033d8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d103      	bne.n	80033ea <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	3302      	adds	r3, #2
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	e017      	b.n	800341a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	3301      	adds	r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	e013      	b.n	800341a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2200      	movs	r2, #0
 80033fa:	2180      	movs	r1, #128	; 0x80
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f829 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e01f      	b.n	800344c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	60ba      	str	r2, [r7, #8]
 8003412:	781a      	ldrb	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1b7      	bne.n	8003394 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2200      	movs	r2, #0
 800342c:	2140      	movs	r1, #64	; 0x40
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f810 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e006      	b.n	800344c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	e000      	b.n	800344c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800344a:	2302      	movs	r3, #2
  }
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003464:	e02c      	b.n	80034c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d028      	beq.n	80034c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <UART_WaitOnFlagUntilTimeout+0x30>
 8003474:	f7fd f90a 	bl	800068c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	429a      	cmp	r2, r3
 8003482:	d21d      	bcs.n	80034c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003492:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e00f      	b.n	80034e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4013      	ands	r3, r2
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d0c3      	beq.n	8003466 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800352a:	f023 030c 	bic.w	r3, r3, #12
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	68f9      	ldr	r1, [r7, #12]
 8003534:	430b      	orrs	r3, r1
 8003536:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003556:	f040 818b 	bne.w	8003870 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4ac1      	ldr	r2, [pc, #772]	; (8003864 <UART_SetConfig+0x37c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d005      	beq.n	8003570 <UART_SetConfig+0x88>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4abf      	ldr	r2, [pc, #764]	; (8003868 <UART_SetConfig+0x380>)
 800356a:	4293      	cmp	r3, r2
 800356c:	f040 80bd 	bne.w	80036ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003570:	f7fe fd28 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8003574:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	461d      	mov	r5, r3
 800357a:	f04f 0600 	mov.w	r6, #0
 800357e:	46a8      	mov	r8, r5
 8003580:	46b1      	mov	r9, r6
 8003582:	eb18 0308 	adds.w	r3, r8, r8
 8003586:	eb49 0409 	adc.w	r4, r9, r9
 800358a:	4698      	mov	r8, r3
 800358c:	46a1      	mov	r9, r4
 800358e:	eb18 0805 	adds.w	r8, r8, r5
 8003592:	eb49 0906 	adc.w	r9, r9, r6
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035aa:	4688      	mov	r8, r1
 80035ac:	4691      	mov	r9, r2
 80035ae:	eb18 0005 	adds.w	r0, r8, r5
 80035b2:	eb49 0106 	adc.w	r1, r9, r6
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	461d      	mov	r5, r3
 80035bc:	f04f 0600 	mov.w	r6, #0
 80035c0:	196b      	adds	r3, r5, r5
 80035c2:	eb46 0406 	adc.w	r4, r6, r6
 80035c6:	461a      	mov	r2, r3
 80035c8:	4623      	mov	r3, r4
 80035ca:	f7fc fe79 	bl	80002c0 <__aeabi_uldivmod>
 80035ce:	4603      	mov	r3, r0
 80035d0:	460c      	mov	r4, r1
 80035d2:	461a      	mov	r2, r3
 80035d4:	4ba5      	ldr	r3, [pc, #660]	; (800386c <UART_SetConfig+0x384>)
 80035d6:	fba3 2302 	umull	r2, r3, r3, r2
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	461d      	mov	r5, r3
 80035e4:	f04f 0600 	mov.w	r6, #0
 80035e8:	46a9      	mov	r9, r5
 80035ea:	46b2      	mov	sl, r6
 80035ec:	eb19 0309 	adds.w	r3, r9, r9
 80035f0:	eb4a 040a 	adc.w	r4, sl, sl
 80035f4:	4699      	mov	r9, r3
 80035f6:	46a2      	mov	sl, r4
 80035f8:	eb19 0905 	adds.w	r9, r9, r5
 80035fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003600:	f04f 0100 	mov.w	r1, #0
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800360c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003610:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003614:	4689      	mov	r9, r1
 8003616:	4692      	mov	sl, r2
 8003618:	eb19 0005 	adds.w	r0, r9, r5
 800361c:	eb4a 0106 	adc.w	r1, sl, r6
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	461d      	mov	r5, r3
 8003626:	f04f 0600 	mov.w	r6, #0
 800362a:	196b      	adds	r3, r5, r5
 800362c:	eb46 0406 	adc.w	r4, r6, r6
 8003630:	461a      	mov	r2, r3
 8003632:	4623      	mov	r3, r4
 8003634:	f7fc fe44 	bl	80002c0 <__aeabi_uldivmod>
 8003638:	4603      	mov	r3, r0
 800363a:	460c      	mov	r4, r1
 800363c:	461a      	mov	r2, r3
 800363e:	4b8b      	ldr	r3, [pc, #556]	; (800386c <UART_SetConfig+0x384>)
 8003640:	fba3 1302 	umull	r1, r3, r3, r2
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	2164      	movs	r1, #100	; 0x64
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	3332      	adds	r3, #50	; 0x32
 8003652:	4a86      	ldr	r2, [pc, #536]	; (800386c <UART_SetConfig+0x384>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003660:	4498      	add	r8, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	461d      	mov	r5, r3
 8003666:	f04f 0600 	mov.w	r6, #0
 800366a:	46a9      	mov	r9, r5
 800366c:	46b2      	mov	sl, r6
 800366e:	eb19 0309 	adds.w	r3, r9, r9
 8003672:	eb4a 040a 	adc.w	r4, sl, sl
 8003676:	4699      	mov	r9, r3
 8003678:	46a2      	mov	sl, r4
 800367a:	eb19 0905 	adds.w	r9, r9, r5
 800367e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800368e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003692:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003696:	4689      	mov	r9, r1
 8003698:	4692      	mov	sl, r2
 800369a:	eb19 0005 	adds.w	r0, r9, r5
 800369e:	eb4a 0106 	adc.w	r1, sl, r6
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	461d      	mov	r5, r3
 80036a8:	f04f 0600 	mov.w	r6, #0
 80036ac:	196b      	adds	r3, r5, r5
 80036ae:	eb46 0406 	adc.w	r4, r6, r6
 80036b2:	461a      	mov	r2, r3
 80036b4:	4623      	mov	r3, r4
 80036b6:	f7fc fe03 	bl	80002c0 <__aeabi_uldivmod>
 80036ba:	4603      	mov	r3, r0
 80036bc:	460c      	mov	r4, r1
 80036be:	461a      	mov	r2, r3
 80036c0:	4b6a      	ldr	r3, [pc, #424]	; (800386c <UART_SetConfig+0x384>)
 80036c2:	fba3 1302 	umull	r1, r3, r3, r2
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2164      	movs	r1, #100	; 0x64
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	3332      	adds	r3, #50	; 0x32
 80036d4:	4a65      	ldr	r2, [pc, #404]	; (800386c <UART_SetConfig+0x384>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	f003 0207 	and.w	r2, r3, #7
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4442      	add	r2, r8
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	e26f      	b.n	8003bca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036ea:	f7fe fc57 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 80036ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	461d      	mov	r5, r3
 80036f4:	f04f 0600 	mov.w	r6, #0
 80036f8:	46a8      	mov	r8, r5
 80036fa:	46b1      	mov	r9, r6
 80036fc:	eb18 0308 	adds.w	r3, r8, r8
 8003700:	eb49 0409 	adc.w	r4, r9, r9
 8003704:	4698      	mov	r8, r3
 8003706:	46a1      	mov	r9, r4
 8003708:	eb18 0805 	adds.w	r8, r8, r5
 800370c:	eb49 0906 	adc.w	r9, r9, r6
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800371c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003720:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003724:	4688      	mov	r8, r1
 8003726:	4691      	mov	r9, r2
 8003728:	eb18 0005 	adds.w	r0, r8, r5
 800372c:	eb49 0106 	adc.w	r1, r9, r6
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	461d      	mov	r5, r3
 8003736:	f04f 0600 	mov.w	r6, #0
 800373a:	196b      	adds	r3, r5, r5
 800373c:	eb46 0406 	adc.w	r4, r6, r6
 8003740:	461a      	mov	r2, r3
 8003742:	4623      	mov	r3, r4
 8003744:	f7fc fdbc 	bl	80002c0 <__aeabi_uldivmod>
 8003748:	4603      	mov	r3, r0
 800374a:	460c      	mov	r4, r1
 800374c:	461a      	mov	r2, r3
 800374e:	4b47      	ldr	r3, [pc, #284]	; (800386c <UART_SetConfig+0x384>)
 8003750:	fba3 2302 	umull	r2, r3, r3, r2
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	461d      	mov	r5, r3
 800375e:	f04f 0600 	mov.w	r6, #0
 8003762:	46a9      	mov	r9, r5
 8003764:	46b2      	mov	sl, r6
 8003766:	eb19 0309 	adds.w	r3, r9, r9
 800376a:	eb4a 040a 	adc.w	r4, sl, sl
 800376e:	4699      	mov	r9, r3
 8003770:	46a2      	mov	sl, r4
 8003772:	eb19 0905 	adds.w	r9, r9, r5
 8003776:	eb4a 0a06 	adc.w	sl, sl, r6
 800377a:	f04f 0100 	mov.w	r1, #0
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003786:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800378a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800378e:	4689      	mov	r9, r1
 8003790:	4692      	mov	sl, r2
 8003792:	eb19 0005 	adds.w	r0, r9, r5
 8003796:	eb4a 0106 	adc.w	r1, sl, r6
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	461d      	mov	r5, r3
 80037a0:	f04f 0600 	mov.w	r6, #0
 80037a4:	196b      	adds	r3, r5, r5
 80037a6:	eb46 0406 	adc.w	r4, r6, r6
 80037aa:	461a      	mov	r2, r3
 80037ac:	4623      	mov	r3, r4
 80037ae:	f7fc fd87 	bl	80002c0 <__aeabi_uldivmod>
 80037b2:	4603      	mov	r3, r0
 80037b4:	460c      	mov	r4, r1
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b2c      	ldr	r3, [pc, #176]	; (800386c <UART_SetConfig+0x384>)
 80037ba:	fba3 1302 	umull	r1, r3, r3, r2
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	2164      	movs	r1, #100	; 0x64
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	3332      	adds	r3, #50	; 0x32
 80037cc:	4a27      	ldr	r2, [pc, #156]	; (800386c <UART_SetConfig+0x384>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037da:	4498      	add	r8, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	461d      	mov	r5, r3
 80037e0:	f04f 0600 	mov.w	r6, #0
 80037e4:	46a9      	mov	r9, r5
 80037e6:	46b2      	mov	sl, r6
 80037e8:	eb19 0309 	adds.w	r3, r9, r9
 80037ec:	eb4a 040a 	adc.w	r4, sl, sl
 80037f0:	4699      	mov	r9, r3
 80037f2:	46a2      	mov	sl, r4
 80037f4:	eb19 0905 	adds.w	r9, r9, r5
 80037f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80037fc:	f04f 0100 	mov.w	r1, #0
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003808:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800380c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003810:	4689      	mov	r9, r1
 8003812:	4692      	mov	sl, r2
 8003814:	eb19 0005 	adds.w	r0, r9, r5
 8003818:	eb4a 0106 	adc.w	r1, sl, r6
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	461d      	mov	r5, r3
 8003822:	f04f 0600 	mov.w	r6, #0
 8003826:	196b      	adds	r3, r5, r5
 8003828:	eb46 0406 	adc.w	r4, r6, r6
 800382c:	461a      	mov	r2, r3
 800382e:	4623      	mov	r3, r4
 8003830:	f7fc fd46 	bl	80002c0 <__aeabi_uldivmod>
 8003834:	4603      	mov	r3, r0
 8003836:	460c      	mov	r4, r1
 8003838:	461a      	mov	r2, r3
 800383a:	4b0c      	ldr	r3, [pc, #48]	; (800386c <UART_SetConfig+0x384>)
 800383c:	fba3 1302 	umull	r1, r3, r3, r2
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	2164      	movs	r1, #100	; 0x64
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	3332      	adds	r3, #50	; 0x32
 800384e:	4a07      	ldr	r2, [pc, #28]	; (800386c <UART_SetConfig+0x384>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	f003 0207 	and.w	r2, r3, #7
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4442      	add	r2, r8
 8003860:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003862:	e1b2      	b.n	8003bca <UART_SetConfig+0x6e2>
 8003864:	40011000 	.word	0x40011000
 8003868:	40011400 	.word	0x40011400
 800386c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4ad7      	ldr	r2, [pc, #860]	; (8003bd4 <UART_SetConfig+0x6ec>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d005      	beq.n	8003886 <UART_SetConfig+0x39e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4ad6      	ldr	r2, [pc, #856]	; (8003bd8 <UART_SetConfig+0x6f0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	f040 80d1 	bne.w	8003a28 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003886:	f7fe fb9d 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 800388a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	469a      	mov	sl, r3
 8003890:	f04f 0b00 	mov.w	fp, #0
 8003894:	46d0      	mov	r8, sl
 8003896:	46d9      	mov	r9, fp
 8003898:	eb18 0308 	adds.w	r3, r8, r8
 800389c:	eb49 0409 	adc.w	r4, r9, r9
 80038a0:	4698      	mov	r8, r3
 80038a2:	46a1      	mov	r9, r4
 80038a4:	eb18 080a 	adds.w	r8, r8, sl
 80038a8:	eb49 090b 	adc.w	r9, r9, fp
 80038ac:	f04f 0100 	mov.w	r1, #0
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038c0:	4688      	mov	r8, r1
 80038c2:	4691      	mov	r9, r2
 80038c4:	eb1a 0508 	adds.w	r5, sl, r8
 80038c8:	eb4b 0609 	adc.w	r6, fp, r9
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4619      	mov	r1, r3
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	f04f 0400 	mov.w	r4, #0
 80038de:	0094      	lsls	r4, r2, #2
 80038e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038e4:	008b      	lsls	r3, r1, #2
 80038e6:	461a      	mov	r2, r3
 80038e8:	4623      	mov	r3, r4
 80038ea:	4628      	mov	r0, r5
 80038ec:	4631      	mov	r1, r6
 80038ee:	f7fc fce7 	bl	80002c0 <__aeabi_uldivmod>
 80038f2:	4603      	mov	r3, r0
 80038f4:	460c      	mov	r4, r1
 80038f6:	461a      	mov	r2, r3
 80038f8:	4bb8      	ldr	r3, [pc, #736]	; (8003bdc <UART_SetConfig+0x6f4>)
 80038fa:	fba3 2302 	umull	r2, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	469b      	mov	fp, r3
 8003908:	f04f 0c00 	mov.w	ip, #0
 800390c:	46d9      	mov	r9, fp
 800390e:	46e2      	mov	sl, ip
 8003910:	eb19 0309 	adds.w	r3, r9, r9
 8003914:	eb4a 040a 	adc.w	r4, sl, sl
 8003918:	4699      	mov	r9, r3
 800391a:	46a2      	mov	sl, r4
 800391c:	eb19 090b 	adds.w	r9, r9, fp
 8003920:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003924:	f04f 0100 	mov.w	r1, #0
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003930:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003934:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003938:	4689      	mov	r9, r1
 800393a:	4692      	mov	sl, r2
 800393c:	eb1b 0509 	adds.w	r5, fp, r9
 8003940:	eb4c 060a 	adc.w	r6, ip, sl
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4619      	mov	r1, r3
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	f04f 0400 	mov.w	r4, #0
 8003956:	0094      	lsls	r4, r2, #2
 8003958:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800395c:	008b      	lsls	r3, r1, #2
 800395e:	461a      	mov	r2, r3
 8003960:	4623      	mov	r3, r4
 8003962:	4628      	mov	r0, r5
 8003964:	4631      	mov	r1, r6
 8003966:	f7fc fcab 	bl	80002c0 <__aeabi_uldivmod>
 800396a:	4603      	mov	r3, r0
 800396c:	460c      	mov	r4, r1
 800396e:	461a      	mov	r2, r3
 8003970:	4b9a      	ldr	r3, [pc, #616]	; (8003bdc <UART_SetConfig+0x6f4>)
 8003972:	fba3 1302 	umull	r1, r3, r3, r2
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	2164      	movs	r1, #100	; 0x64
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	3332      	adds	r3, #50	; 0x32
 8003984:	4a95      	ldr	r2, [pc, #596]	; (8003bdc <UART_SetConfig+0x6f4>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003990:	4498      	add	r8, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	469b      	mov	fp, r3
 8003996:	f04f 0c00 	mov.w	ip, #0
 800399a:	46d9      	mov	r9, fp
 800399c:	46e2      	mov	sl, ip
 800399e:	eb19 0309 	adds.w	r3, r9, r9
 80039a2:	eb4a 040a 	adc.w	r4, sl, sl
 80039a6:	4699      	mov	r9, r3
 80039a8:	46a2      	mov	sl, r4
 80039aa:	eb19 090b 	adds.w	r9, r9, fp
 80039ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039b2:	f04f 0100 	mov.w	r1, #0
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039c6:	4689      	mov	r9, r1
 80039c8:	4692      	mov	sl, r2
 80039ca:	eb1b 0509 	adds.w	r5, fp, r9
 80039ce:	eb4c 060a 	adc.w	r6, ip, sl
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4619      	mov	r1, r3
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	f04f 0400 	mov.w	r4, #0
 80039e4:	0094      	lsls	r4, r2, #2
 80039e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039ea:	008b      	lsls	r3, r1, #2
 80039ec:	461a      	mov	r2, r3
 80039ee:	4623      	mov	r3, r4
 80039f0:	4628      	mov	r0, r5
 80039f2:	4631      	mov	r1, r6
 80039f4:	f7fc fc64 	bl	80002c0 <__aeabi_uldivmod>
 80039f8:	4603      	mov	r3, r0
 80039fa:	460c      	mov	r4, r1
 80039fc:	461a      	mov	r2, r3
 80039fe:	4b77      	ldr	r3, [pc, #476]	; (8003bdc <UART_SetConfig+0x6f4>)
 8003a00:	fba3 1302 	umull	r1, r3, r3, r2
 8003a04:	095b      	lsrs	r3, r3, #5
 8003a06:	2164      	movs	r1, #100	; 0x64
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	3332      	adds	r3, #50	; 0x32
 8003a12:	4a72      	ldr	r2, [pc, #456]	; (8003bdc <UART_SetConfig+0x6f4>)
 8003a14:	fba2 2303 	umull	r2, r3, r2, r3
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	f003 020f 	and.w	r2, r3, #15
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4442      	add	r2, r8
 8003a24:	609a      	str	r2, [r3, #8]
 8003a26:	e0d0      	b.n	8003bca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a28:	f7fe fab8 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 8003a2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	469a      	mov	sl, r3
 8003a32:	f04f 0b00 	mov.w	fp, #0
 8003a36:	46d0      	mov	r8, sl
 8003a38:	46d9      	mov	r9, fp
 8003a3a:	eb18 0308 	adds.w	r3, r8, r8
 8003a3e:	eb49 0409 	adc.w	r4, r9, r9
 8003a42:	4698      	mov	r8, r3
 8003a44:	46a1      	mov	r9, r4
 8003a46:	eb18 080a 	adds.w	r8, r8, sl
 8003a4a:	eb49 090b 	adc.w	r9, r9, fp
 8003a4e:	f04f 0100 	mov.w	r1, #0
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a62:	4688      	mov	r8, r1
 8003a64:	4691      	mov	r9, r2
 8003a66:	eb1a 0508 	adds.w	r5, sl, r8
 8003a6a:	eb4b 0609 	adc.w	r6, fp, r9
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4619      	mov	r1, r3
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	f04f 0400 	mov.w	r4, #0
 8003a80:	0094      	lsls	r4, r2, #2
 8003a82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a86:	008b      	lsls	r3, r1, #2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	4631      	mov	r1, r6
 8003a90:	f7fc fc16 	bl	80002c0 <__aeabi_uldivmod>
 8003a94:	4603      	mov	r3, r0
 8003a96:	460c      	mov	r4, r1
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <UART_SetConfig+0x6f4>)
 8003a9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	469b      	mov	fp, r3
 8003aaa:	f04f 0c00 	mov.w	ip, #0
 8003aae:	46d9      	mov	r9, fp
 8003ab0:	46e2      	mov	sl, ip
 8003ab2:	eb19 0309 	adds.w	r3, r9, r9
 8003ab6:	eb4a 040a 	adc.w	r4, sl, sl
 8003aba:	4699      	mov	r9, r3
 8003abc:	46a2      	mov	sl, r4
 8003abe:	eb19 090b 	adds.w	r9, r9, fp
 8003ac2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ac6:	f04f 0100 	mov.w	r1, #0
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ad6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ada:	4689      	mov	r9, r1
 8003adc:	4692      	mov	sl, r2
 8003ade:	eb1b 0509 	adds.w	r5, fp, r9
 8003ae2:	eb4c 060a 	adc.w	r6, ip, sl
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4619      	mov	r1, r3
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	f04f 0400 	mov.w	r4, #0
 8003af8:	0094      	lsls	r4, r2, #2
 8003afa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003afe:	008b      	lsls	r3, r1, #2
 8003b00:	461a      	mov	r2, r3
 8003b02:	4623      	mov	r3, r4
 8003b04:	4628      	mov	r0, r5
 8003b06:	4631      	mov	r1, r6
 8003b08:	f7fc fbda 	bl	80002c0 <__aeabi_uldivmod>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	460c      	mov	r4, r1
 8003b10:	461a      	mov	r2, r3
 8003b12:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <UART_SetConfig+0x6f4>)
 8003b14:	fba3 1302 	umull	r1, r3, r3, r2
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	2164      	movs	r1, #100	; 0x64
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	3332      	adds	r3, #50	; 0x32
 8003b26:	4a2d      	ldr	r2, [pc, #180]	; (8003bdc <UART_SetConfig+0x6f4>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b32:	4498      	add	r8, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	469b      	mov	fp, r3
 8003b38:	f04f 0c00 	mov.w	ip, #0
 8003b3c:	46d9      	mov	r9, fp
 8003b3e:	46e2      	mov	sl, ip
 8003b40:	eb19 0309 	adds.w	r3, r9, r9
 8003b44:	eb4a 040a 	adc.w	r4, sl, sl
 8003b48:	4699      	mov	r9, r3
 8003b4a:	46a2      	mov	sl, r4
 8003b4c:	eb19 090b 	adds.w	r9, r9, fp
 8003b50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b54:	f04f 0100 	mov.w	r1, #0
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b68:	4689      	mov	r9, r1
 8003b6a:	4692      	mov	sl, r2
 8003b6c:	eb1b 0509 	adds.w	r5, fp, r9
 8003b70:	eb4c 060a 	adc.w	r6, ip, sl
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	f04f 0400 	mov.w	r4, #0
 8003b86:	0094      	lsls	r4, r2, #2
 8003b88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b8c:	008b      	lsls	r3, r1, #2
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4623      	mov	r3, r4
 8003b92:	4628      	mov	r0, r5
 8003b94:	4631      	mov	r1, r6
 8003b96:	f7fc fb93 	bl	80002c0 <__aeabi_uldivmod>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <UART_SetConfig+0x6f4>)
 8003ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2164      	movs	r1, #100	; 0x64
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	3332      	adds	r3, #50	; 0x32
 8003bb4:	4a09      	ldr	r2, [pc, #36]	; (8003bdc <UART_SetConfig+0x6f4>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4442      	add	r2, r8
 8003bc6:	609a      	str	r2, [r3, #8]
}
 8003bc8:	e7ff      	b.n	8003bca <UART_SetConfig+0x6e2>
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd4:	40011000 	.word	0x40011000
 8003bd8:	40011400 	.word	0x40011400
 8003bdc:	51eb851f 	.word	0x51eb851f

08003be0 <NRF24_CSN>:

/*########################### CSN / CE OPERATIONS ###########################################*/

// CSN
void NRF24_CSN(uint8_t state)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
	if (state)
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <NRF24_CSN+0x22>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <NRF24_CSN+0x3c>)
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <NRF24_CSN+0x40>)
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f7fd ff8a 	bl	8001b14 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8003c00:	e007      	b.n	8003c12 <NRF24_CSN+0x32>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <NRF24_CSN+0x3c>)
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <NRF24_CSN+0x40>)
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f7fd ff81 	bl	8001b14 <HAL_GPIO_WritePin>
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000090 	.word	0x20000090
 8003c20:	20000094 	.word	0x20000094

08003c24 <NRF24_CE>:

// CE
void NRF24_CE(uint8_t state)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	71fb      	strb	r3, [r7, #7]
	if (state)
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <NRF24_CE+0x22>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <NRF24_CE+0x3c>)
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <NRF24_CE+0x40>)
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f7fd ff68 	bl	8001b14 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8003c44:	e007      	b.n	8003c56 <NRF24_CE+0x32>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <NRF24_CE+0x3c>)
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <NRF24_CE+0x40>)
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	4619      	mov	r1, r3
 8003c52:	f7fd ff5f 	bl	8001b14 <HAL_GPIO_WritePin>
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000090 	.word	0x20000090
 8003c64:	20000096 	.word	0x20000096

08003c68 <NRF24_read_register>:

/*##################### BASIC READ / WRITE REGISTER OPERATIONS ##############################*/

// Read Single Byte From Register
uint8_t NRF24_read_register(uint8_t reg)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8003c72:	2000      	movs	r0, #0
 8003c74:	f7ff ffb4 	bl	8003be0 <NRF24_CSN>

	//Transmit register address
	SPI_Buf[0] = reg & CMD_REGISTER_MASK;
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, SPI_Buf, 1, 100);
 8003c82:	f107 010c 	add.w	r1, r7, #12
 8003c86:	2364      	movs	r3, #100	; 0x64
 8003c88:	2201      	movs	r2, #1
 8003c8a:	4809      	ldr	r0, [pc, #36]	; (8003cb0 <NRF24_read_register+0x48>)
 8003c8c:	f7fe fe0c 	bl	80028a8 <HAL_SPI_Transmit>

	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &SPI_Buf[1], 1, 100);
 8003c90:	f107 030c 	add.w	r3, r7, #12
 8003c94:	1c59      	adds	r1, r3, #1
 8003c96:	2364      	movs	r3, #100	; 0x64
 8003c98:	2201      	movs	r2, #1
 8003c9a:	4805      	ldr	r0, [pc, #20]	; (8003cb0 <NRF24_read_register+0x48>)
 8003c9c:	f7fe ff38 	bl	8002b10 <HAL_SPI_Receive>

	NRF24_CSN(HIGH);
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	f7ff ff9d 	bl	8003be0 <NRF24_CSN>

	return SPI_Buf[1];
 8003ca6:	7b7b      	ldrb	r3, [r7, #13]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20000098 	.word	0x20000098

08003cb4 <NRF24_read_registerN>:

// Read Multiple Bytes From Register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	6039      	str	r1, [r7, #0]
 8003cbe:	71fb      	strb	r3, [r7, #7]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	71bb      	strb	r3, [r7, #6]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f7ff ff8b 	bl	8003be0 <NRF24_CSN>

	//Transmit register address
	SPI_Buf[0] = reg & CMD_REGISTER_MASK;
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, SPI_Buf, 1, 100);
 8003cd4:	f107 010c 	add.w	r1, r7, #12
 8003cd8:	2364      	movs	r3, #100	; 0x64
 8003cda:	2201      	movs	r2, #1
 8003cdc:	4808      	ldr	r0, [pc, #32]	; (8003d00 <NRF24_read_registerN+0x4c>)
 8003cde:	f7fe fde3 	bl	80028a8 <HAL_SPI_Transmit>

	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8003ce2:	79bb      	ldrb	r3, [r7, #6]
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	2364      	movs	r3, #100	; 0x64
 8003ce8:	6839      	ldr	r1, [r7, #0]
 8003cea:	4805      	ldr	r0, [pc, #20]	; (8003d00 <NRF24_read_registerN+0x4c>)
 8003cec:	f7fe ff10 	bl	8002b10 <HAL_SPI_Receive>

	NRF24_CSN(HIGH);
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	f7ff ff75 	bl	8003be0 <NRF24_CSN>
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000098 	.word	0x20000098

08003d04 <NRF24_write_register>:

// Write Single Byte To Register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	71fb      	strb	r3, [r7, #7]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71bb      	strb	r3, [r7, #6]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8003d14:	2000      	movs	r0, #0
 8003d16:	f7ff ff63 	bl	8003be0 <NRF24_CSN>

	//Transmit register address and data
	SPI_Buf[0] = reg | CMD_W_REGISTER;
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	f043 0320 	orr.w	r3, r3, #32
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	733b      	strb	r3, [r7, #12]
	SPI_Buf[1] = value;
 8003d24:	79bb      	ldrb	r3, [r7, #6]
 8003d26:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, SPI_Buf, 2, 100);
 8003d28:	f107 010c 	add.w	r1, r7, #12
 8003d2c:	2364      	movs	r3, #100	; 0x64
 8003d2e:	2202      	movs	r2, #2
 8003d30:	4804      	ldr	r0, [pc, #16]	; (8003d44 <NRF24_write_register+0x40>)
 8003d32:	f7fe fdb9 	bl	80028a8 <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 8003d36:	2001      	movs	r0, #1
 8003d38:	f7ff ff52 	bl	8003be0 <NRF24_CSN>
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000098 	.word	0x20000098

08003d48 <NRF24_write_registerN>:

// Write Multiple Bytes To Register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	6039      	str	r1, [r7, #0]
 8003d52:	71fb      	strb	r3, [r7, #7]
 8003d54:	4613      	mov	r3, r2
 8003d56:	71bb      	strb	r3, [r7, #6]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f7ff ff41 	bl	8003be0 <NRF24_CSN>

	//Transmit register address and data
	SPI_Buf[0] = reg | CMD_W_REGISTER;
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	f043 0320 	orr.w	r3, r3, #32
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, SPI_Buf, 1, 100);
 8003d68:	f107 010c 	add.w	r1, r7, #12
 8003d6c:	2364      	movs	r3, #100	; 0x64
 8003d6e:	2201      	movs	r2, #1
 8003d70:	4808      	ldr	r0, [pc, #32]	; (8003d94 <NRF24_write_registerN+0x4c>)
 8003d72:	f7fe fd99 	bl	80028a8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8003d76:	79bb      	ldrb	r3, [r7, #6]
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	2364      	movs	r3, #100	; 0x64
 8003d7c:	6839      	ldr	r1, [r7, #0]
 8003d7e:	4805      	ldr	r0, [pc, #20]	; (8003d94 <NRF24_write_registerN+0x4c>)
 8003d80:	f7fe fd92 	bl	80028a8 <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7ff ff2b 	bl	8003be0 <NRF24_CSN>
}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000098 	.word	0x20000098

08003d98 <NRF24_ACTIVATE_cmd>:

/*########################### CUSTOM SETTINGS AND COMMANDS ##################################*/

// Activate CMD
void NRF24_ACTIVATE_cmd(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];

	NRF24_CSN(LOW);
 8003d9e:	2000      	movs	r0, #0
 8003da0:	f7ff ff1e 	bl	8003be0 <NRF24_CSN>

	//Read data from Rx payload buffer
	cmdRxBuf[0] = CMD_ACTIVATE;
 8003da4:	2350      	movs	r3, #80	; 0x50
 8003da6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8003da8:	2373      	movs	r3, #115	; 0x73
 8003daa:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8003dac:	1d39      	adds	r1, r7, #4
 8003dae:	2364      	movs	r3, #100	; 0x64
 8003db0:	2202      	movs	r2, #2
 8003db2:	4805      	ldr	r0, [pc, #20]	; (8003dc8 <NRF24_ACTIVATE_cmd+0x30>)
 8003db4:	f7fe fd78 	bl	80028a8 <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 8003db8:	2001      	movs	r0, #1
 8003dba:	f7ff ff11 	bl	8003be0 <NRF24_CSN>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000098 	.word	0x20000098

08003dcc <NRF24_setPayloadSize>:

// Set Payload Size
void NRF24_setPayloadSize(uint8_t size)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8003dd6:	2320      	movs	r3, #32
 8003dd8:	73fb      	strb	r3, [r7, #15]
	payload_size = MIN(size, max_payload_size);
 8003dda:	7bfa      	ldrb	r2, [r7, #15]
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	4293      	cmp	r3, r2
 8003de0:	bf28      	it	cs
 8003de2:	4613      	movcs	r3, r2
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <NRF24_setPayloadSize+0x2c>)
 8003de8:	701a      	strb	r2, [r3, #0]
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	2000008c 	.word	0x2000008c

08003dfc <NRF24_resetStatus>:
	return payload_size;
}

// Reset Status
void NRF24_resetStatus(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS, NRF24_read_register(REG_CONFIG) & MASK_REG_CONFIG_RESET_STATUS);
 8003e00:	2000      	movs	r0, #0
 8003e02:	f7ff ff31 	bl	8003c68 <NRF24_read_register>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	4619      	mov	r1, r3
 8003e10:	2007      	movs	r0, #7
 8003e12:	f7ff ff77 	bl	8003d04 <NRF24_write_register>
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <NRF24_powerDown>:

// Power Down
void NRF24_powerDown(void)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) & ~MASK_REG_CONFIG_POWER);
 8003e1e:	2000      	movs	r0, #0
 8003e20:	f7ff ff22 	bl	8003c68 <NRF24_read_register>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f023 0302 	bic.w	r3, r3, #2
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f7ff ff68 	bl	8003d04 <NRF24_write_register>
}
 8003e34:	bf00      	nop
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <NRF24_available>:

/*############################### PIPE OPERATIONS ###########################################*/

// Check For Available Data To Read
uint8_t NRF24_available(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
	uint8_t status = NRF24_read_register(REG_STATUS);
 8003e3e:	2007      	movs	r0, #7
 8003e40:	f7ff ff12 	bl	8003c68 <NRF24_read_register>
 8003e44:	4603      	mov	r3, r0
 8003e46:	71fb      	strb	r3, [r7, #7]

	uint8_t result = (status & MASK_REG_CONFIG_RX_DX);
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	71bb      	strb	r3, [r7, #6]

	if (result)
 8003e50:	79bb      	ldrb	r3, [r7, #6]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00c      	beq.n	8003e70 <NRF24_available+0x38>
	{
		// Clear the status bit
		NRF24_write_register(REG_STATUS, MASK_REG_CONFIG_RX_DX );
 8003e56:	2140      	movs	r1, #64	; 0x40
 8003e58:	2007      	movs	r0, #7
 8003e5a:	f7ff ff53 	bl	8003d04 <NRF24_write_register>

		// Handle ack payload receipt
		if (status & MASK_REG_CONFIG_TX_DS)
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <NRF24_available+0x38>
		{
			NRF24_write_register(REG_STATUS, MASK_REG_CONFIG_TX_DS);
 8003e68:	2120      	movs	r1, #32
 8003e6a:	2007      	movs	r0, #7
 8003e6c:	f7ff ff4a 	bl	8003d04 <NRF24_write_register>
		}
	}
	return result;
 8003e70:	79bb      	ldrb	r3, [r7, #6]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <NRF24_write>:

// Write Data
uint8_t NRF24_write( const void* buf, uint8_t len )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
	// Data monitor
	uint8_t retStatus;
	uint8_t observe_tx;
	uint8_t status;
	const uint32_t timeout = 10;
 8003e88:	230a      	movs	r3, #10
 8003e8a:	617b      	str	r3, [r7, #20]

	NRF24_resetStatus();
 8003e8c:	f7ff ffb6 	bl	8003dfc <NRF24_resetStatus>

	// Transmitter power-up
	NRF24_CE(LOW);
 8003e90:	2000      	movs	r0, #0
 8003e92:	f7ff fec7 	bl	8003c24 <NRF24_CE>

	NRF24_write_register(REG_CONFIG, (NRF24_read_register(REG_CONFIG) | MASK_REG_CONFIG_POWER) & ~MASK_REG_CONFIG_PRIM_RX);
 8003e96:	2000      	movs	r0, #0
 8003e98:	f7ff fee6 	bl	8003c68 <NRF24_read_register>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f043 0302 	orr.w	r3, r3, #2
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4619      	mov	r1, r3
 8003eac:	2000      	movs	r0, #0
 8003eae:	f7ff ff29 	bl	8003d04 <NRF24_write_register>

	NRF24_CE(HIGH);
 8003eb2:	2001      	movs	r0, #1
 8003eb4:	f7ff feb6 	bl	8003c24 <NRF24_CE>

	HAL_Delay(1);
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f7fc fbf3 	bl	80006a4 <HAL_Delay>

	// Send the payload
	uint8_t wrPayloadCmd;

	NRF24_CSN(LOW);
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	f7ff fe8e 	bl	8003be0 <NRF24_CSN>

	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8003ec4:	23a0      	movs	r3, #160	; 0xa0
 8003ec6:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8003ec8:	f107 010c 	add.w	r1, r7, #12
 8003ecc:	2364      	movs	r3, #100	; 0x64
 8003ece:	2201      	movs	r2, #1
 8003ed0:	4820      	ldr	r0, [pc, #128]	; (8003f54 <NRF24_write+0xd8>)
 8003ed2:	f7fe fce9 	bl	80028a8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	2364      	movs	r3, #100	; 0x64
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	481d      	ldr	r0, [pc, #116]	; (8003f54 <NRF24_write+0xd8>)
 8003ee0:	f7fe fce2 	bl	80028a8 <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	f7ff fe7b 	bl	8003be0 <NRF24_CSN>

	// Enable Tx for 1ms
	NRF24_CE(HIGH);
 8003eea:	2001      	movs	r0, #1
 8003eec:	f7ff fe9a 	bl	8003c24 <NRF24_CE>

	HAL_Delay(1);
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	f7fc fbd7 	bl	80006a4 <HAL_Delay>

	NRF24_CE(LOW);
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	f7ff fe94 	bl	8003c24 <NRF24_CE>

	uint32_t sent_at = HAL_GetTick();
 8003efc:	f7fc fbc6 	bl	800068c <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]
	do
	{
		NRF24_read_registerN(REG_OBSERVE_TX, &observe_tx, 1);
 8003f02:	f107 030d 	add.w	r3, r7, #13
 8003f06:	2201      	movs	r2, #1
 8003f08:	4619      	mov	r1, r3
 8003f0a:	2008      	movs	r0, #8
 8003f0c:	f7ff fed2 	bl	8003cb4 <NRF24_read_registerN>

		//Get status register
		status = NRF24_read_register(REG_STATUS);
 8003f10:	2007      	movs	r0, #7
 8003f12:	f7ff fea9 	bl	8003c68 <NRF24_read_register>
 8003f16:	4603      	mov	r3, r0
 8003f18:	73fb      	strb	r3, [r7, #15]
	}
	while(!(status & MASK_REG_CONFIG_TX_DS_MAX_RT) && ((HAL_GetTick() - sent_at) < timeout ));
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d107      	bne.n	8003f34 <NRF24_write+0xb8>
 8003f24:	f7fc fbb2 	bl	800068c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d8e6      	bhi.n	8003f02 <NRF24_write+0x86>

	retStatus = NRF24_read_register(REG_STATUS) & MASK_REG_CONFIG_TX_DS;
 8003f34:	2007      	movs	r0, #7
 8003f36:	f7ff fe97 	bl	8003c68 <NRF24_read_register>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	73bb      	strb	r3, [r7, #14]

	//Power down
	NRF24_available();
 8003f42:	f7ff ff79 	bl	8003e38 <NRF24_available>
	NRF24_flush_TX();
 8003f46:	f000 f91b 	bl	8004180 <NRF24_flush_TX>

	return retStatus;
 8003f4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000098 	.word	0x20000098

08003f58 <NRF24_openWritingPipe>:
	return rxStatus;
}

// Open TX Pipe
void NRF24_openWritingPipe(uint64_t address)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8003f62:	463b      	mov	r3, r7
 8003f64:	2205      	movs	r2, #5
 8003f66:	4619      	mov	r1, r3
 8003f68:	200a      	movs	r0, #10
 8003f6a:	f7ff feed 	bl	8003d48 <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8003f6e:	463b      	mov	r3, r7
 8003f70:	2205      	movs	r2, #5
 8003f72:	4619      	mov	r1, r3
 8003f74:	2010      	movs	r0, #16
 8003f76:	f7ff fee7 	bl	8003d48 <NRF24_write_registerN>

	NRF24_write_register(REG_RX_PW_P0, payload_size);
 8003f7a:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <NRF24_openWritingPipe+0x38>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	2011      	movs	r0, #17
 8003f82:	f7ff febf 	bl	8003d04 <NRF24_write_register>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	2000008c 	.word	0x2000008c

08003f94 <NRF24_stopListening>:
	HAL_Delay(1);
}

// Stop Listening On Pipes
void NRF24_stopListening(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	NRF24_CE(LOW);
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f7ff fe43 	bl	8003c24 <NRF24_CE>

	NRF24_flush_TX();
 8003f9e:	f000 f8ef 	bl	8004180 <NRF24_flush_TX>
	NRF24_flush_RX();
 8003fa2:	f000 f8f5 	bl	8004190 <NRF24_flush_RX>
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <NRF24_begin>:

/*########################## DEFAULT INITIALIZATION #########################################*/

// NRF24 INIT
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8003fac:	b082      	sub	sp, #8
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	803b      	strh	r3, [r7, #0]
	// Copy SPI handle, Pins And Port Variables
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8003fc0:	4b5d      	ldr	r3, [pc, #372]	; (8004138 <NRF24_begin+0x18c>)
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f107 031c 	add.w	r3, r7, #28
 8003fc8:	2258      	movs	r2, #88	; 0x58
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f001 fa70 	bl	80054b0 <memcpy>

	nrf24_PORT 		= 	nrf24PORT;
 8003fd0:	4a5a      	ldr	r2, [pc, #360]	; (800413c <NRF24_begin+0x190>)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN 	= 	nrfCSN_Pin;
 8003fd6:	4a5a      	ldr	r2, [pc, #360]	; (8004140 <NRF24_begin+0x194>)
 8003fd8:	887b      	ldrh	r3, [r7, #2]
 8003fda:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN 	= 	nrfCE_Pin;
 8003fdc:	4a59      	ldr	r2, [pc, #356]	; (8004144 <NRF24_begin+0x198>)
 8003fde:	883b      	ldrh	r3, [r7, #0]
 8003fe0:	8013      	strh	r3, [r2, #0]

	// Put Pins To Idle State
	NRF24_CSN(HIGH);
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	f7ff fdfc 	bl	8003be0 <NRF24_CSN>
	NRF24_CE(LOW);
 8003fe8:	2000      	movs	r0, #0
 8003fea:	f7ff fe1b 	bl	8003c24 <NRF24_CE>

	// Initial Delay
	HAL_Delay(5);
 8003fee:	2005      	movs	r0, #5
 8003ff0:	f7fc fb58 	bl	80006a4 <HAL_Delay>

	// Soft Reset Registers
	NRF24_write_register(REG_CONFIG, 		MASK_REG_CONFIG_2BYTES_CRC);
 8003ff4:	210c      	movs	r1, #12
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	f7ff fe84 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 		MASK_REG_EN_AA_AUTO_ACK_NO_PIPES);
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	2001      	movs	r0, #1
 8004000:	f7ff fe80 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 	MASK_REG_EN_RXADDR_PIPES_1_2_ENABLE);
 8004004:	2103      	movs	r1, #3
 8004006:	2002      	movs	r0, #2
 8004008:	f7ff fe7c 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 		MASK_REG_SETUP_AW_5BYTES_ADDR_FIELD);
 800400c:	2103      	movs	r1, #3
 800400e:	2003      	movs	r0, #3
 8004010:	f7ff fe78 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 	MASK_REG_SETUP_RETR_SET_15RETR_1250DELAY);
 8004014:	214f      	movs	r1, #79	; 0x4f
 8004016:	2004      	movs	r0, #4
 8004018:	f7ff fe74 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 		MASK_REG_RF_CH_SET_CHANNEL_52);
 800401c:	2134      	movs	r1, #52	; 0x34
 800401e:	2005      	movs	r0, #5
 8004020:	f7ff fe70 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 		MASK_REG_RF_SETUP_POWER_0DBM_2MBPS);
 8004024:	210f      	movs	r1, #15
 8004026:	2006      	movs	r0, #6
 8004028:	f7ff fe6c 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 		MASK_REG_STATUS_CLEAR);
 800402c:	210e      	movs	r1, #14
 800402e:	2007      	movs	r0, #7
 8004030:	f7ff fe68 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 	MASK_REG_OBSERVE_TX_CLEAR);
 8004034:	2100      	movs	r1, #0
 8004036:	2008      	movs	r0, #8
 8004038:	f7ff fe64 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_CD, 			MASK_REG_CD_CLEAR);
 800403c:	2100      	movs	r1, #0
 800403e:	2009      	movs	r0, #9
 8004040:	f7ff fe60 	bl	8003d04 <NRF24_write_register>

	uint8_t pipeAddrVar[6];
	pipeAddrVar[4] = 0xE7;
 8004044:	23e7      	movs	r3, #231	; 0xe7
 8004046:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xE7;
 8004048:	23e7      	movs	r3, #231	; 0xe7
 800404a:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xE7;
 800404c:	23e7      	movs	r3, #231	; 0xe7
 800404e:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xE7;
 8004050:	23e7      	movs	r3, #231	; 0xe7
 8004052:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xE7;
 8004054:	23e7      	movs	r3, #231	; 0xe7
 8004056:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 8004058:	f107 0308 	add.w	r3, r7, #8
 800405c:	2205      	movs	r2, #5
 800405e:	4619      	mov	r1, r3
 8004060:	200a      	movs	r0, #10
 8004062:	f7ff fe71 	bl	8003d48 <NRF24_write_registerN>

	pipeAddrVar[4] = 0xC2;
 8004066:	23c2      	movs	r3, #194	; 0xc2
 8004068:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xC2;
 800406a:	23c2      	movs	r3, #194	; 0xc2
 800406c:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xC2;
 800406e:	23c2      	movs	r3, #194	; 0xc2
 8004070:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xC2;
 8004072:	23c2      	movs	r3, #194	; 0xc2
 8004074:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xC2;
 8004076:	23c2      	movs	r3, #194	; 0xc2
 8004078:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 800407a:	f107 0308 	add.w	r3, r7, #8
 800407e:	2205      	movs	r2, #5
 8004080:	4619      	mov	r1, r3
 8004082:	200b      	movs	r0, #11
 8004084:	f7ff fe60 	bl	8003d48 <NRF24_write_registerN>

	NRF24_write_register(REG_RX_ADDR_P2, 	0xC3);
 8004088:	21c3      	movs	r1, #195	; 0xc3
 800408a:	200c      	movs	r0, #12
 800408c:	f7ff fe3a 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 	0xC4);
 8004090:	21c4      	movs	r1, #196	; 0xc4
 8004092:	200d      	movs	r0, #13
 8004094:	f7ff fe36 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 	0xC5);
 8004098:	21c5      	movs	r1, #197	; 0xc5
 800409a:	200e      	movs	r0, #14
 800409c:	f7ff fe32 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 	0xC6);
 80040a0:	21c6      	movs	r1, #198	; 0xc6
 80040a2:	200f      	movs	r0, #15
 80040a4:	f7ff fe2e 	bl	8003d04 <NRF24_write_register>

	pipeAddrVar[4] = 0xE7;
 80040a8:	23e7      	movs	r3, #231	; 0xe7
 80040aa:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xE7;
 80040ac:	23e7      	movs	r3, #231	; 0xe7
 80040ae:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xE7;
 80040b0:	23e7      	movs	r3, #231	; 0xe7
 80040b2:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xE7;
 80040b4:	23e7      	movs	r3, #231	; 0xe7
 80040b6:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xE7;
 80040b8:	23e7      	movs	r3, #231	; 0xe7
 80040ba:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 80040bc:	f107 0308 	add.w	r3, r7, #8
 80040c0:	2205      	movs	r2, #5
 80040c2:	4619      	mov	r1, r3
 80040c4:	2010      	movs	r0, #16
 80040c6:	f7ff fe3f 	bl	8003d48 <NRF24_write_registerN>

	NRF24_write_register(REG_RX_PW_P0, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 80040ca:	2100      	movs	r1, #0
 80040cc:	2011      	movs	r0, #17
 80040ce:	f7ff fe19 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 80040d2:	2100      	movs	r1, #0
 80040d4:	2012      	movs	r0, #18
 80040d6:	f7ff fe15 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 80040da:	2100      	movs	r1, #0
 80040dc:	2013      	movs	r0, #19
 80040de:	f7ff fe11 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 80040e2:	2100      	movs	r1, #0
 80040e4:	2014      	movs	r0, #20
 80040e6:	f7ff fe0d 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 80040ea:	2100      	movs	r1, #0
 80040ec:	2015      	movs	r0, #21
 80040ee:	f7ff fe09 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 80040f2:	2100      	movs	r1, #0
 80040f4:	2016      	movs	r0, #22
 80040f6:	f7ff fe05 	bl	8003d04 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80040fa:	f7ff fe4d 	bl	8003d98 <NRF24_ACTIVATE_cmd>

	NRF24_write_register(REG_DYNPD, 		MASK_REG_DYNPD_DISABLE_DYNAMIC_PAYLOAD);
 80040fe:	2100      	movs	r1, #0
 8004100:	201c      	movs	r0, #28
 8004102:	f7ff fdff 	bl	8003d04 <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 		MASK_REG_FEATURE_DISABLE_DYNAMIC_PAYLOAD);
 8004106:	2100      	movs	r1, #0
 8004108:	201d      	movs	r0, #29
 800410a:	f7ff fdfb 	bl	8003d04 <NRF24_write_register>

	printRadioSettings();
 800410e:	f000 f847 	bl	80041a0 <printRadioSettings>

	//Set payload size
	NRF24_setPayloadSize(PAYLOAD_SIZE);
 8004112:	2002      	movs	r0, #2
 8004114:	f7ff fe5a 	bl	8003dcc <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8004118:	f7ff fe70 	bl	8003dfc <NRF24_resetStatus>

	//Flush buffers
	NRF24_flush_TX();
 800411c:	f000 f830 	bl	8004180 <NRF24_flush_TX>
	NRF24_flush_RX();
 8004120:	f000 f836 	bl	8004190 <NRF24_flush_RX>

	NRF24_powerDown();
 8004124:	f7ff fe79 	bl	8003e1a <NRF24_powerDown>
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004132:	b002      	add	sp, #8
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000098 	.word	0x20000098
 800413c:	20000090 	.word	0x20000090
 8004140:	20000094 	.word	0x20000094
 8004144:	20000096 	.word	0x20000096

08004148 <nrf24_DebugUART_Init>:

// Init UART Debug for NRF24
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8004148:	b084      	sub	sp, #16
 800414a:	b4b0      	push	{r4, r5, r7}
 800414c:	af00      	add	r7, sp, #0
 800414e:	f107 040c 	add.w	r4, r7, #12
 8004152:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <nrf24_DebugUART_Init+0x34>)
 8004158:	461c      	mov	r4, r3
 800415a:	f107 050c 	add.w	r5, r7, #12
 800415e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800416a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800416e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004172:	bf00      	nop
 8004174:	46bd      	mov	sp, r7
 8004176:	bcb0      	pop	{r4, r5, r7}
 8004178:	b004      	add	sp, #16
 800417a:	4770      	bx	lr
 800417c:	200000f0 	.word	0x200000f0

08004180 <NRF24_flush_TX>:

/*############################ Flush RX / TX Functions ######################################*/

// Flush TX Buffer
void NRF24_flush_TX(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, CMD_FLUSH);
 8004184:	21ff      	movs	r1, #255	; 0xff
 8004186:	20e1      	movs	r0, #225	; 0xe1
 8004188:	f7ff fdbc 	bl	8003d04 <NRF24_write_register>
}
 800418c:	bf00      	nop
 800418e:	bd80      	pop	{r7, pc}

08004190 <NRF24_flush_RX>:

// Flush RX Buffer
void NRF24_flush_RX(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, CMD_FLUSH);
 8004194:	21ff      	movs	r1, #255	; 0xff
 8004196:	20e2      	movs	r0, #226	; 0xe2
 8004198:	f7ff fdb4 	bl	8003d04 <NRF24_write_register>
}
 800419c:	bf00      	nop
 800419e:	bd80      	pop	{r7, pc}

080041a0 <printRadioSettings>:

/*############################ PRINT SETTINGS FUNCTIONS #####################################*/

// Print Radio Settings
void printRadioSettings(void)
{
 80041a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041a2:	b0a1      	sub	sp, #132	; 0x84
 80041a4:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];

	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80041a6:	f107 0308 	add.w	r3, r7, #8
 80041aa:	4ab6      	ldr	r2, [pc, #728]	; (8004484 <printRadioSettings+0x2e4>)
 80041ac:	461c      	mov	r4, r3
 80041ae:	4615      	mov	r5, r2
 80041b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	8022      	strh	r2, [r4, #0]
 80041c2:	3402      	adds	r4, #2
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80041c8:	f107 0308 	add.w	r3, r7, #8
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc f81f 	bl	8000210 <strlen>
 80041d2:	4603      	mov	r3, r0
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	f107 0108 	add.w	r1, r7, #8
 80041da:	230a      	movs	r3, #10
 80041dc:	48aa      	ldr	r0, [pc, #680]	; (8004488 <printRadioSettings+0x2e8>)
 80041de:	f7ff f8a0 	bl	8003322 <HAL_UART_Transmit>

	// Print CRC Setting
	reg8Val = NRF24_read_register(REG_CONFIG);
 80041e2:	2000      	movs	r0, #0
 80041e4:	f7ff fd40 	bl	8003c68 <NRF24_read_register>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80041ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d020      	beq.n	800423c <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2))
 80041fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00b      	beq.n	800421e <printRadioSettings+0x7e>
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8004206:	f107 0308 	add.w	r3, r7, #8
 800420a:	4aa0      	ldr	r2, [pc, #640]	; (800448c <printRadioSettings+0x2ec>)
 800420c:	461c      	mov	r4, r3
 800420e:	4615      	mov	r5, r2
 8004210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004214:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800421c:	e017      	b.n	800424e <printRadioSettings+0xae>
		else
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 800421e:	f107 0308 	add.w	r3, r7, #8
 8004222:	4a9b      	ldr	r2, [pc, #620]	; (8004490 <printRadioSettings+0x2f0>)
 8004224:	461c      	mov	r4, r3
 8004226:	4615      	mov	r5, r2
 8004228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800422a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800422c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004230:	c403      	stmia	r4!, {r0, r1}
 8004232:	8022      	strh	r2, [r4, #0]
 8004234:	3402      	adds	r4, #2
 8004236:	0c13      	lsrs	r3, r2, #16
 8004238:	7023      	strb	r3, [r4, #0]
 800423a:	e008      	b.n	800424e <printRadioSettings+0xae>
	}
	else
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 800423c:	f107 0308 	add.w	r3, r7, #8
 8004240:	4a94      	ldr	r2, [pc, #592]	; (8004494 <printRadioSettings+0x2f4>)
 8004242:	461c      	mov	r4, r3
 8004244:	4615      	mov	r5, r2
 8004246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800424a:	682b      	ldr	r3, [r5, #0]
 800424c:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800424e:	f107 0308 	add.w	r3, r7, #8
 8004252:	4618      	mov	r0, r3
 8004254:	f7fb ffdc 	bl	8000210 <strlen>
 8004258:	4603      	mov	r3, r0
 800425a:	b29a      	uxth	r2, r3
 800425c:	f107 0108 	add.w	r1, r7, #8
 8004260:	230a      	movs	r3, #10
 8004262:	4889      	ldr	r0, [pc, #548]	; (8004488 <printRadioSettings+0x2e8>)
 8004264:	f7ff f85d 	bl	8003322 <HAL_UART_Transmit>

	// Print Auto ACK Setting
	reg8Val = NRF24_read_register(REG_EN_AA);
 8004268:	2001      	movs	r0, #1
 800426a:	f7ff fcfd 	bl	8003c68 <NRF24_read_register>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004278:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800427c:	2b00      	cmp	r3, #0
 800427e:	bfcc      	ite	gt
 8004280:	2301      	movgt	r3, #1
 8004282:	2300      	movle	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	461d      	mov	r5, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004288:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800428c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004290:	2b00      	cmp	r3, #0
 8004292:	bfcc      	ite	gt
 8004294:	2301      	movgt	r3, #1
 8004296:	2300      	movle	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461e      	mov	r6, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 800429c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042a0:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bfcc      	ite	gt
 80042a8:	2301      	movgt	r3, #1
 80042aa:	2300      	movle	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80042b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042b4:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bfcc      	ite	gt
 80042bc:	2301      	movgt	r3, #1
 80042be:	2300      	movle	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	4619      	mov	r1, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80042c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042c8:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bfcc      	ite	gt
 80042d0:	2301      	movgt	r3, #1
 80042d2:	2300      	movle	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461c      	mov	r4, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80042d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042dc:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bfcc      	ite	gt
 80042e4:	2301      	movgt	r3, #1
 80042e6:	2300      	movle	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	f107 0008 	add.w	r0, r7, #8
 80042ee:	9303      	str	r3, [sp, #12]
 80042f0:	9402      	str	r4, [sp, #8]
 80042f2:	9101      	str	r1, [sp, #4]
 80042f4:	9200      	str	r2, [sp, #0]
 80042f6:	4633      	mov	r3, r6
 80042f8:	462a      	mov	r2, r5
 80042fa:	4967      	ldr	r1, [pc, #412]	; (8004498 <printRadioSettings+0x2f8>)
 80042fc:	f001 f8ec 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004300:	f107 0308 	add.w	r3, r7, #8
 8004304:	4618      	mov	r0, r3
 8004306:	f7fb ff83 	bl	8000210 <strlen>
 800430a:	4603      	mov	r3, r0
 800430c:	b29a      	uxth	r2, r3
 800430e:	f107 0108 	add.w	r1, r7, #8
 8004312:	230a      	movs	r3, #10
 8004314:	485c      	ldr	r0, [pc, #368]	; (8004488 <printRadioSettings+0x2e8>)
 8004316:	f7ff f804 	bl	8003322 <HAL_UART_Transmit>

	// Print Enabled RX Addresses
	reg8Val = NRF24_read_register(REG_EN_RXADDR);
 800431a:	2002      	movs	r0, #2
 800431c:	f7ff fca4 	bl	8003c68 <NRF24_read_register>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004326:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800432a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800432e:	2b00      	cmp	r3, #0
 8004330:	bfcc      	ite	gt
 8004332:	2301      	movgt	r3, #1
 8004334:	2300      	movle	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	461d      	mov	r5, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 800433a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800433e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004342:	2b00      	cmp	r3, #0
 8004344:	bfcc      	ite	gt
 8004346:	2301      	movgt	r3, #1
 8004348:	2300      	movle	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461e      	mov	r6, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 800434e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004352:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004356:	2b00      	cmp	r3, #0
 8004358:	bfcc      	ite	gt
 800435a:	2301      	movgt	r3, #1
 800435c:	2300      	movle	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	461a      	mov	r2, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004362:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004366:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800436a:	2b00      	cmp	r3, #0
 800436c:	bfcc      	ite	gt
 800436e:	2301      	movgt	r3, #1
 8004370:	2300      	movle	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	4619      	mov	r1, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004376:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800437a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800437e:	2b00      	cmp	r3, #0
 8004380:	bfcc      	ite	gt
 8004382:	2301      	movgt	r3, #1
 8004384:	2300      	movle	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461c      	mov	r4, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 800438a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800438e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004392:	2b00      	cmp	r3, #0
 8004394:	bfcc      	ite	gt
 8004396:	2301      	movgt	r3, #1
 8004398:	2300      	movle	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f107 0008 	add.w	r0, r7, #8
 80043a0:	9303      	str	r3, [sp, #12]
 80043a2:	9402      	str	r4, [sp, #8]
 80043a4:	9101      	str	r1, [sp, #4]
 80043a6:	9200      	str	r2, [sp, #0]
 80043a8:	4633      	mov	r3, r6
 80043aa:	462a      	mov	r2, r5
 80043ac:	493b      	ldr	r1, [pc, #236]	; (800449c <printRadioSettings+0x2fc>)
 80043ae:	f001 f893 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80043b2:	f107 0308 	add.w	r3, r7, #8
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fb ff2a 	bl	8000210 <strlen>
 80043bc:	4603      	mov	r3, r0
 80043be:	b29a      	uxth	r2, r3
 80043c0:	f107 0108 	add.w	r1, r7, #8
 80043c4:	230a      	movs	r3, #10
 80043c6:	4830      	ldr	r0, [pc, #192]	; (8004488 <printRadioSettings+0x2e8>)
 80043c8:	f7fe ffab 	bl	8003322 <HAL_UART_Transmit>

	// Print Address Width
	reg8Val = NRF24_read_register(REG_SETUP_AW) & 0x03;
 80043cc:	2003      	movs	r0, #3
 80043ce:	f7ff fc4b 	bl	8003c68 <NRF24_read_register>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val += 2;
 80043dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80043e0:	3302      	adds	r3, #2
 80043e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80043e6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80043ea:	f107 0308 	add.w	r3, r7, #8
 80043ee:	492c      	ldr	r1, [pc, #176]	; (80044a0 <printRadioSettings+0x300>)
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 f871 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80043f6:	f107 0308 	add.w	r3, r7, #8
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fb ff08 	bl	8000210 <strlen>
 8004400:	4603      	mov	r3, r0
 8004402:	b29a      	uxth	r2, r3
 8004404:	f107 0108 	add.w	r1, r7, #8
 8004408:	230a      	movs	r3, #10
 800440a:	481f      	ldr	r0, [pc, #124]	; (8004488 <printRadioSettings+0x2e8>)
 800440c:	f7fe ff89 	bl	8003322 <HAL_UART_Transmit>

	// Print RF Channel
	reg8Val = NRF24_read_register(REG_RF_CH);
 8004410:	2005      	movs	r0, #5
 8004412:	f7ff fc29 	bl	8003c68 <NRF24_read_register>
 8004416:	4603      	mov	r3, r0
 8004418:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val & 0x7F);
 800441c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004424:	f107 0308 	add.w	r3, r7, #8
 8004428:	491e      	ldr	r1, [pc, #120]	; (80044a4 <printRadioSettings+0x304>)
 800442a:	4618      	mov	r0, r3
 800442c:	f001 f854 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004430:	f107 0308 	add.w	r3, r7, #8
 8004434:	4618      	mov	r0, r3
 8004436:	f7fb feeb 	bl	8000210 <strlen>
 800443a:	4603      	mov	r3, r0
 800443c:	b29a      	uxth	r2, r3
 800443e:	f107 0108 	add.w	r1, r7, #8
 8004442:	230a      	movs	r3, #10
 8004444:	4810      	ldr	r0, [pc, #64]	; (8004488 <printRadioSettings+0x2e8>)
 8004446:	f7fe ff6c 	bl	8003322 <HAL_UART_Transmit>

	// Print Data Rate And Power
	reg8Val = NRF24_read_register(REG_RF_SETUP);
 800444a:	2006      	movs	r0, #6
 800444c:	f7ff fc0c 	bl	8003c68 <NRF24_read_register>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8004456:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d024      	beq.n	80044ac <printRadioSettings+0x30c>
		sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8004462:	f107 0308 	add.w	r3, r7, #8
 8004466:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <printRadioSettings+0x308>)
 8004468:	461c      	mov	r4, r3
 800446a:	4615      	mov	r5, r2
 800446c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800446e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004470:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004474:	6020      	str	r0, [r4, #0]
 8004476:	3404      	adds	r4, #4
 8004478:	8021      	strh	r1, [r4, #0]
 800447a:	3402      	adds	r4, #2
 800447c:	0c0b      	lsrs	r3, r1, #16
 800447e:	7023      	strb	r3, [r4, #0]
 8004480:	e023      	b.n	80044ca <printRadioSettings+0x32a>
 8004482:	bf00      	nop
 8004484:	08005ce8 	.word	0x08005ce8
 8004488:	200000f0 	.word	0x200000f0
 800448c:	08005d1c 	.word	0x08005d1c
 8004490:	08005d38 	.word	0x08005d38
 8004494:	08005d54 	.word	0x08005d54
 8004498:	08005d68 	.word	0x08005d68
 800449c:	08005dac 	.word	0x08005dac
 80044a0:	08005df8 	.word	0x08005df8
 80044a4:	08005e14 	.word	0x08005e14
 80044a8:	08005e28 	.word	0x08005e28
	else
		sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80044ac:	f107 0308 	add.w	r3, r7, #8
 80044b0:	4a29      	ldr	r2, [pc, #164]	; (8004558 <printRadioSettings+0x3b8>)
 80044b2:	461c      	mov	r4, r3
 80044b4:	4615      	mov	r5, r2
 80044b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80044be:	6020      	str	r0, [r4, #0]
 80044c0:	3404      	adds	r4, #4
 80044c2:	8021      	strh	r1, [r4, #0]
 80044c4:	3402      	adds	r4, #2
 80044c6:	0c0b      	lsrs	r3, r1, #16
 80044c8:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80044ca:	f107 0308 	add.w	r3, r7, #8
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fb fe9e 	bl	8000210 <strlen>
 80044d4:	4603      	mov	r3, r0
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	f107 0108 	add.w	r1, r7, #8
 80044dc:	230a      	movs	r3, #10
 80044de:	481f      	ldr	r0, [pc, #124]	; (800455c <printRadioSettings+0x3bc>)
 80044e0:	f7fe ff1f 	bl	8003322 <HAL_UART_Transmit>

	reg8Val &= (3 << 1);
 80044e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044e8:	f003 0306 	and.w	r3, r3, #6
 80044ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val >> 1);
 80044f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044f4:	085b      	lsrs	r3, r3, #1
 80044f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0)
 80044fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <printRadioSettings+0x376>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8004502:	f107 0308 	add.w	r3, r7, #8
 8004506:	4a16      	ldr	r2, [pc, #88]	; (8004560 <printRadioSettings+0x3c0>)
 8004508:	461c      	mov	r4, r3
 800450a:	4615      	mov	r5, r2
 800450c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800450e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	6023      	str	r3, [r4, #0]
 8004514:	e03b      	b.n	800458e <printRadioSettings+0x3ee>
	else if(reg8Val == 1)
 8004516:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800451a:	2b01      	cmp	r3, #1
 800451c:	d109      	bne.n	8004532 <printRadioSettings+0x392>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800451e:	f107 0308 	add.w	r3, r7, #8
 8004522:	4a10      	ldr	r2, [pc, #64]	; (8004564 <printRadioSettings+0x3c4>)
 8004524:	461c      	mov	r4, r3
 8004526:	4615      	mov	r5, r2
 8004528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800452a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	6023      	str	r3, [r4, #0]
 8004530:	e02d      	b.n	800458e <printRadioSettings+0x3ee>
	else if(reg8Val == 2)
 8004532:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004536:	2b02      	cmp	r3, #2
 8004538:	d118      	bne.n	800456c <printRadioSettings+0x3cc>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800453a:	f107 0308 	add.w	r3, r7, #8
 800453e:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <printRadioSettings+0x3c8>)
 8004540:	461c      	mov	r4, r3
 8004542:	4615      	mov	r5, r2
 8004544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	8022      	strh	r2, [r4, #0]
 800454e:	3402      	adds	r4, #2
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	7023      	strb	r3, [r4, #0]
 8004554:	e01b      	b.n	800458e <printRadioSettings+0x3ee>
 8004556:	bf00      	nop
 8004558:	08005e40 	.word	0x08005e40
 800455c:	200000f0 	.word	0x200000f0
 8004560:	08005e58 	.word	0x08005e58
 8004564:	08005e6c 	.word	0x08005e6c
 8004568:	08005e80 	.word	0x08005e80
	else if(reg8Val == 3)
 800456c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004570:	2b03      	cmp	r3, #3
 8004572:	d10c      	bne.n	800458e <printRadioSettings+0x3ee>
		sprintf(uartTxBuf, "RF_PWR:\r\n		 0dB \r\n");
 8004574:	f107 0308 	add.w	r3, r7, #8
 8004578:	4ad7      	ldr	r2, [pc, #860]	; (80048d8 <printRadioSettings+0x738>)
 800457a:	461c      	mov	r4, r3
 800457c:	4615      	mov	r5, r2
 800457e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004582:	682b      	ldr	r3, [r5, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	8022      	strh	r2, [r4, #0]
 8004588:	3402      	adds	r4, #2
 800458a:	0c1b      	lsrs	r3, r3, #16
 800458c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800458e:	f107 0308 	add.w	r3, r7, #8
 8004592:	4618      	mov	r0, r3
 8004594:	f7fb fe3c 	bl	8000210 <strlen>
 8004598:	4603      	mov	r3, r0
 800459a:	b29a      	uxth	r2, r3
 800459c:	f107 0108 	add.w	r1, r7, #8
 80045a0:	230a      	movs	r3, #10
 80045a2:	48ce      	ldr	r0, [pc, #824]	; (80048dc <printRadioSettings+0x73c>)
 80045a4:	f7fe febd 	bl	8003322 <HAL_UART_Transmit>

	// Print RX Pipes Addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(REG_RX_ADDR_P0, pipeAddrs, 5);
 80045a8:	463b      	mov	r3, r7
 80045aa:	2205      	movs	r2, #5
 80045ac:	4619      	mov	r1, r3
 80045ae:	200a      	movs	r0, #10
 80045b0:	f7ff fb80 	bl	8003cb4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80045b4:	793b      	ldrb	r3, [r7, #4]
 80045b6:	461c      	mov	r4, r3
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	461d      	mov	r5, r3
 80045bc:	78bb      	ldrb	r3, [r7, #2]
 80045be:	787a      	ldrb	r2, [r7, #1]
 80045c0:	7839      	ldrb	r1, [r7, #0]
 80045c2:	f107 0008 	add.w	r0, r7, #8
 80045c6:	9102      	str	r1, [sp, #8]
 80045c8:	9201      	str	r2, [sp, #4]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	462b      	mov	r3, r5
 80045ce:	4622      	mov	r2, r4
 80045d0:	49c3      	ldr	r1, [pc, #780]	; (80048e0 <printRadioSettings+0x740>)
 80045d2:	f000 ff81 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80045d6:	f107 0308 	add.w	r3, r7, #8
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fb fe18 	bl	8000210 <strlen>
 80045e0:	4603      	mov	r3, r0
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	f107 0108 	add.w	r1, r7, #8
 80045e8:	230a      	movs	r3, #10
 80045ea:	48bc      	ldr	r0, [pc, #752]	; (80048dc <printRadioSettings+0x73c>)
 80045ec:	f7fe fe99 	bl	8003322 <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P1, pipeAddrs, 5);
 80045f0:	463b      	mov	r3, r7
 80045f2:	2205      	movs	r2, #5
 80045f4:	4619      	mov	r1, r3
 80045f6:	200b      	movs	r0, #11
 80045f8:	f7ff fb5c 	bl	8003cb4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80045fc:	793b      	ldrb	r3, [r7, #4]
 80045fe:	461c      	mov	r4, r3
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	461d      	mov	r5, r3
 8004604:	78bb      	ldrb	r3, [r7, #2]
 8004606:	787a      	ldrb	r2, [r7, #1]
 8004608:	7839      	ldrb	r1, [r7, #0]
 800460a:	f107 0008 	add.w	r0, r7, #8
 800460e:	9102      	str	r1, [sp, #8]
 8004610:	9201      	str	r2, [sp, #4]
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	462b      	mov	r3, r5
 8004616:	4622      	mov	r2, r4
 8004618:	49b2      	ldr	r1, [pc, #712]	; (80048e4 <printRadioSettings+0x744>)
 800461a:	f000 ff5d 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800461e:	f107 0308 	add.w	r3, r7, #8
 8004622:	4618      	mov	r0, r3
 8004624:	f7fb fdf4 	bl	8000210 <strlen>
 8004628:	4603      	mov	r3, r0
 800462a:	b29a      	uxth	r2, r3
 800462c:	f107 0108 	add.w	r1, r7, #8
 8004630:	230a      	movs	r3, #10
 8004632:	48aa      	ldr	r0, [pc, #680]	; (80048dc <printRadioSettings+0x73c>)
 8004634:	f7fe fe75 	bl	8003322 <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P2, pipeAddrs, 1);
 8004638:	463b      	mov	r3, r7
 800463a:	2201      	movs	r2, #1
 800463c:	4619      	mov	r1, r3
 800463e:	200c      	movs	r0, #12
 8004640:	f7ff fb38 	bl	8003cb4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004644:	783b      	ldrb	r3, [r7, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	f107 0308 	add.w	r3, r7, #8
 800464c:	49a6      	ldr	r1, [pc, #664]	; (80048e8 <printRadioSettings+0x748>)
 800464e:	4618      	mov	r0, r3
 8004650:	f000 ff42 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004654:	f107 0308 	add.w	r3, r7, #8
 8004658:	4618      	mov	r0, r3
 800465a:	f7fb fdd9 	bl	8000210 <strlen>
 800465e:	4603      	mov	r3, r0
 8004660:	b29a      	uxth	r2, r3
 8004662:	f107 0108 	add.w	r1, r7, #8
 8004666:	230a      	movs	r3, #10
 8004668:	489c      	ldr	r0, [pc, #624]	; (80048dc <printRadioSettings+0x73c>)
 800466a:	f7fe fe5a 	bl	8003322 <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P3, pipeAddrs, 1);
 800466e:	463b      	mov	r3, r7
 8004670:	2201      	movs	r2, #1
 8004672:	4619      	mov	r1, r3
 8004674:	200d      	movs	r0, #13
 8004676:	f7ff fb1d 	bl	8003cb4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800467a:	783b      	ldrb	r3, [r7, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	f107 0308 	add.w	r3, r7, #8
 8004682:	499a      	ldr	r1, [pc, #616]	; (80048ec <printRadioSettings+0x74c>)
 8004684:	4618      	mov	r0, r3
 8004686:	f000 ff27 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800468a:	f107 0308 	add.w	r3, r7, #8
 800468e:	4618      	mov	r0, r3
 8004690:	f7fb fdbe 	bl	8000210 <strlen>
 8004694:	4603      	mov	r3, r0
 8004696:	b29a      	uxth	r2, r3
 8004698:	f107 0108 	add.w	r1, r7, #8
 800469c:	230a      	movs	r3, #10
 800469e:	488f      	ldr	r0, [pc, #572]	; (80048dc <printRadioSettings+0x73c>)
 80046a0:	f7fe fe3f 	bl	8003322 <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P4, pipeAddrs, 1);
 80046a4:	463b      	mov	r3, r7
 80046a6:	2201      	movs	r2, #1
 80046a8:	4619      	mov	r1, r3
 80046aa:	200e      	movs	r0, #14
 80046ac:	f7ff fb02 	bl	8003cb4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80046b0:	783b      	ldrb	r3, [r7, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	f107 0308 	add.w	r3, r7, #8
 80046b8:	498d      	ldr	r1, [pc, #564]	; (80048f0 <printRadioSettings+0x750>)
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 ff0c 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80046c0:	f107 0308 	add.w	r3, r7, #8
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fb fda3 	bl	8000210 <strlen>
 80046ca:	4603      	mov	r3, r0
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	f107 0108 	add.w	r1, r7, #8
 80046d2:	230a      	movs	r3, #10
 80046d4:	4881      	ldr	r0, [pc, #516]	; (80048dc <printRadioSettings+0x73c>)
 80046d6:	f7fe fe24 	bl	8003322 <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P5, pipeAddrs, 1);
 80046da:	463b      	mov	r3, r7
 80046dc:	2201      	movs	r2, #1
 80046de:	4619      	mov	r1, r3
 80046e0:	200f      	movs	r0, #15
 80046e2:	f7ff fae7 	bl	8003cb4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80046e6:	783b      	ldrb	r3, [r7, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	f107 0308 	add.w	r3, r7, #8
 80046ee:	4981      	ldr	r1, [pc, #516]	; (80048f4 <printRadioSettings+0x754>)
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fef1 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80046f6:	f107 0308 	add.w	r3, r7, #8
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fb fd88 	bl	8000210 <strlen>
 8004700:	4603      	mov	r3, r0
 8004702:	b29a      	uxth	r2, r3
 8004704:	f107 0108 	add.w	r1, r7, #8
 8004708:	230a      	movs	r3, #10
 800470a:	4874      	ldr	r0, [pc, #464]	; (80048dc <printRadioSettings+0x73c>)
 800470c:	f7fe fe09 	bl	8003322 <HAL_UART_Transmit>

	NRF24_read_registerN(REG_TX_ADDR, pipeAddrs, 5);
 8004710:	463b      	mov	r3, r7
 8004712:	2205      	movs	r2, #5
 8004714:	4619      	mov	r1, r3
 8004716:	2010      	movs	r0, #16
 8004718:	f7ff facc 	bl	8003cb4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800471c:	793b      	ldrb	r3, [r7, #4]
 800471e:	461c      	mov	r4, r3
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	461d      	mov	r5, r3
 8004724:	78bb      	ldrb	r3, [r7, #2]
 8004726:	787a      	ldrb	r2, [r7, #1]
 8004728:	7839      	ldrb	r1, [r7, #0]
 800472a:	f107 0008 	add.w	r0, r7, #8
 800472e:	9102      	str	r1, [sp, #8]
 8004730:	9201      	str	r2, [sp, #4]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	462b      	mov	r3, r5
 8004736:	4622      	mov	r2, r4
 8004738:	496f      	ldr	r1, [pc, #444]	; (80048f8 <printRadioSettings+0x758>)
 800473a:	f000 fecd 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800473e:	f107 0308 	add.w	r3, r7, #8
 8004742:	4618      	mov	r0, r3
 8004744:	f7fb fd64 	bl	8000210 <strlen>
 8004748:	4603      	mov	r3, r0
 800474a:	b29a      	uxth	r2, r3
 800474c:	f107 0108 	add.w	r1, r7, #8
 8004750:	230a      	movs	r3, #10
 8004752:	4862      	ldr	r0, [pc, #392]	; (80048dc <printRadioSettings+0x73c>)
 8004754:	f7fe fde5 	bl	8003322 <HAL_UART_Transmit>

	// Print RX Payload Width In Each Pipe
	reg8Val = NRF24_read_register(REG_RX_PW_P0);
 8004758:	2011      	movs	r0, #17
 800475a:	f7ff fa85 	bl	8003c68 <NRF24_read_register>
 800475e:	4603      	mov	r3, r0
 8004760:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8004764:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004768:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800476c:	f107 0308 	add.w	r3, r7, #8
 8004770:	4962      	ldr	r1, [pc, #392]	; (80048fc <printRadioSettings+0x75c>)
 8004772:	4618      	mov	r0, r3
 8004774:	f000 feb0 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004778:	f107 0308 	add.w	r3, r7, #8
 800477c:	4618      	mov	r0, r3
 800477e:	f7fb fd47 	bl	8000210 <strlen>
 8004782:	4603      	mov	r3, r0
 8004784:	b29a      	uxth	r2, r3
 8004786:	f107 0108 	add.w	r1, r7, #8
 800478a:	230a      	movs	r3, #10
 800478c:	4853      	ldr	r0, [pc, #332]	; (80048dc <printRadioSettings+0x73c>)
 800478e:	f7fe fdc8 	bl	8003322 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P1);
 8004792:	2012      	movs	r0, #18
 8004794:	f7ff fa68 	bl	8003c68 <NRF24_read_register>
 8004798:	4603      	mov	r3, r0
 800479a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 800479e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80047a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047a6:	f107 0308 	add.w	r3, r7, #8
 80047aa:	4955      	ldr	r1, [pc, #340]	; (8004900 <printRadioSettings+0x760>)
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fe93 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80047b2:	f107 0308 	add.w	r3, r7, #8
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fb fd2a 	bl	8000210 <strlen>
 80047bc:	4603      	mov	r3, r0
 80047be:	b29a      	uxth	r2, r3
 80047c0:	f107 0108 	add.w	r1, r7, #8
 80047c4:	230a      	movs	r3, #10
 80047c6:	4845      	ldr	r0, [pc, #276]	; (80048dc <printRadioSettings+0x73c>)
 80047c8:	f7fe fdab 	bl	8003322 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P2);
 80047cc:	2013      	movs	r0, #19
 80047ce:	f7ff fa4b 	bl	8003c68 <NRF24_read_register>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80047d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80047dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047e0:	f107 0308 	add.w	r3, r7, #8
 80047e4:	4947      	ldr	r1, [pc, #284]	; (8004904 <printRadioSettings+0x764>)
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fe76 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80047ec:	f107 0308 	add.w	r3, r7, #8
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fb fd0d 	bl	8000210 <strlen>
 80047f6:	4603      	mov	r3, r0
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	f107 0108 	add.w	r1, r7, #8
 80047fe:	230a      	movs	r3, #10
 8004800:	4836      	ldr	r0, [pc, #216]	; (80048dc <printRadioSettings+0x73c>)
 8004802:	f7fe fd8e 	bl	8003322 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P3);
 8004806:	2014      	movs	r0, #20
 8004808:	f7ff fa2e 	bl	8003c68 <NRF24_read_register>
 800480c:	4603      	mov	r3, r0
 800480e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8004812:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800481a:	f107 0308 	add.w	r3, r7, #8
 800481e:	493a      	ldr	r1, [pc, #232]	; (8004908 <printRadioSettings+0x768>)
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fe59 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004826:	f107 0308 	add.w	r3, r7, #8
 800482a:	4618      	mov	r0, r3
 800482c:	f7fb fcf0 	bl	8000210 <strlen>
 8004830:	4603      	mov	r3, r0
 8004832:	b29a      	uxth	r2, r3
 8004834:	f107 0108 	add.w	r1, r7, #8
 8004838:	230a      	movs	r3, #10
 800483a:	4828      	ldr	r0, [pc, #160]	; (80048dc <printRadioSettings+0x73c>)
 800483c:	f7fe fd71 	bl	8003322 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P4);
 8004840:	2015      	movs	r0, #21
 8004842:	f7ff fa11 	bl	8003c68 <NRF24_read_register>
 8004846:	4603      	mov	r3, r0
 8004848:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 800484c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004850:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004854:	f107 0308 	add.w	r3, r7, #8
 8004858:	492c      	ldr	r1, [pc, #176]	; (800490c <printRadioSettings+0x76c>)
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fe3c 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004860:	f107 0308 	add.w	r3, r7, #8
 8004864:	4618      	mov	r0, r3
 8004866:	f7fb fcd3 	bl	8000210 <strlen>
 800486a:	4603      	mov	r3, r0
 800486c:	b29a      	uxth	r2, r3
 800486e:	f107 0108 	add.w	r1, r7, #8
 8004872:	230a      	movs	r3, #10
 8004874:	4819      	ldr	r0, [pc, #100]	; (80048dc <printRadioSettings+0x73c>)
 8004876:	f7fe fd54 	bl	8003322 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P5);
 800487a:	2016      	movs	r0, #22
 800487c:	f7ff f9f4 	bl	8003c68 <NRF24_read_register>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8004886:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800488a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800488e:	f107 0308 	add.w	r3, r7, #8
 8004892:	491f      	ldr	r1, [pc, #124]	; (8004910 <printRadioSettings+0x770>)
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fe1f 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800489a:	f107 0308 	add.w	r3, r7, #8
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fb fcb6 	bl	8000210 <strlen>
 80048a4:	4603      	mov	r3, r0
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	f107 0108 	add.w	r1, r7, #8
 80048ac:	230a      	movs	r3, #10
 80048ae:	480b      	ldr	r0, [pc, #44]	; (80048dc <printRadioSettings+0x73c>)
 80048b0:	f7fe fd37 	bl	8003322 <HAL_UART_Transmit>

	// Print Dynamic Payload Enable For Each Pipe
	reg8Val = NRF24_read_register(REG_DYNPD);
 80048b4:	201c      	movs	r0, #28
 80048b6:	f7ff f9d7 	bl	8003c68 <NRF24_read_register>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80048c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80048c4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bfcc      	ite	gt
 80048cc:	2301      	movgt	r3, #1
 80048ce:	2300      	movle	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461d      	mov	r5, r3
 80048d4:	e01e      	b.n	8004914 <printRadioSettings+0x774>
 80048d6:	bf00      	nop
 80048d8:	08005e94 	.word	0x08005e94
 80048dc:	200000f0 	.word	0x200000f0
 80048e0:	08005ea8 	.word	0x08005ea8
 80048e4:	08005ed8 	.word	0x08005ed8
 80048e8:	08005f08 	.word	0x08005f08
 80048ec:	08005f30 	.word	0x08005f30
 80048f0:	08005f58 	.word	0x08005f58
 80048f4:	08005f80 	.word	0x08005f80
 80048f8:	08005fa8 	.word	0x08005fa8
 80048fc:	08005fd4 	.word	0x08005fd4
 8004900:	08005ff0 	.word	0x08005ff0
 8004904:	0800600c 	.word	0x0800600c
 8004908:	08006028 	.word	0x08006028
 800490c:	08006044 	.word	0x08006044
 8004910:	08006060 	.word	0x08006060
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004914:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004918:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800491c:	2b00      	cmp	r3, #0
 800491e:	bfcc      	ite	gt
 8004920:	2301      	movgt	r3, #1
 8004922:	2300      	movle	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461e      	mov	r6, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004928:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800492c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004930:	2b00      	cmp	r3, #0
 8004932:	bfcc      	ite	gt
 8004934:	2301      	movgt	r3, #1
 8004936:	2300      	movle	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	461a      	mov	r2, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 800493c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004940:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004944:	2b00      	cmp	r3, #0
 8004946:	bfcc      	ite	gt
 8004948:	2301      	movgt	r3, #1
 800494a:	2300      	movle	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	4619      	mov	r1, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004950:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004954:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004958:	2b00      	cmp	r3, #0
 800495a:	bfcc      	ite	gt
 800495c:	2301      	movgt	r3, #1
 800495e:	2300      	movle	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	461c      	mov	r4, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004964:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004968:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800496c:	2b00      	cmp	r3, #0
 800496e:	bfcc      	ite	gt
 8004970:	2301      	movgt	r3, #1
 8004972:	2300      	movle	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f107 0008 	add.w	r0, r7, #8
 800497a:	9303      	str	r3, [sp, #12]
 800497c:	9402      	str	r4, [sp, #8]
 800497e:	9101      	str	r1, [sp, #4]
 8004980:	9200      	str	r2, [sp, #0]
 8004982:	4633      	mov	r3, r6
 8004984:	462a      	mov	r2, r5
 8004986:	494a      	ldr	r1, [pc, #296]	; (8004ab0 <printRadioSettings+0x910>)
 8004988:	f000 fda6 	bl	80054d8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800498c:	f107 0308 	add.w	r3, r7, #8
 8004990:	4618      	mov	r0, r3
 8004992:	f7fb fc3d 	bl	8000210 <strlen>
 8004996:	4603      	mov	r3, r0
 8004998:	b29a      	uxth	r2, r3
 800499a:	f107 0108 	add.w	r1, r7, #8
 800499e:	230a      	movs	r3, #10
 80049a0:	4844      	ldr	r0, [pc, #272]	; (8004ab4 <printRadioSettings+0x914>)
 80049a2:	f7fe fcbe 	bl	8003322 <HAL_UART_Transmit>

	// Print If Dynamic Payload Feature Is Enabled
	reg8Val = NRF24_read_register(REG_FEATURE);
 80049a6:	201d      	movs	r0, #29
 80049a8:	f7ff f95e 	bl	8003c68 <NRF24_read_register>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80049b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00c      	beq.n	80049d8 <printRadioSettings+0x838>
 80049be:	f107 0308 	add.w	r3, r7, #8
 80049c2:	4a3d      	ldr	r2, [pc, #244]	; (8004ab8 <printRadioSettings+0x918>)
 80049c4:	461c      	mov	r4, r3
 80049c6:	4615      	mov	r5, r2
 80049c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80049d0:	6020      	str	r0, [r4, #0]
 80049d2:	3404      	adds	r4, #4
 80049d4:	8021      	strh	r1, [r4, #0]
 80049d6:	e00e      	b.n	80049f6 <printRadioSettings+0x856>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80049d8:	f107 0308 	add.w	r3, r7, #8
 80049dc:	4a37      	ldr	r2, [pc, #220]	; (8004abc <printRadioSettings+0x91c>)
 80049de:	461c      	mov	r4, r3
 80049e0:	4615      	mov	r5, r2
 80049e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80049ea:	6020      	str	r0, [r4, #0]
 80049ec:	3404      	adds	r4, #4
 80049ee:	8021      	strh	r1, [r4, #0]
 80049f0:	3402      	adds	r4, #2
 80049f2:	0c0b      	lsrs	r3, r1, #16
 80049f4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049f6:	f107 0308 	add.w	r3, r7, #8
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fb fc08 	bl	8000210 <strlen>
 8004a00:	4603      	mov	r3, r0
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	f107 0108 	add.w	r1, r7, #8
 8004a08:	230a      	movs	r3, #10
 8004a0a:	482a      	ldr	r0, [pc, #168]	; (8004ab4 <printRadioSettings+0x914>)
 8004a0c:	f7fe fc89 	bl	8003322 <HAL_UART_Transmit>

	// Print If ACK Payload Feature Is Enabled
	if(reg8Val & (1 << 1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8004a10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00b      	beq.n	8004a34 <printRadioSettings+0x894>
 8004a1c:	f107 0308 	add.w	r3, r7, #8
 8004a20:	4a27      	ldr	r2, [pc, #156]	; (8004ac0 <printRadioSettings+0x920>)
 8004a22:	461c      	mov	r4, r3
 8004a24:	4615      	mov	r5, r2
 8004a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a2e:	c403      	stmia	r4!, {r0, r1}
 8004a30:	8022      	strh	r2, [r4, #0]
 8004a32:	e00d      	b.n	8004a50 <printRadioSettings+0x8b0>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8004a34:	f107 0308 	add.w	r3, r7, #8
 8004a38:	4a22      	ldr	r2, [pc, #136]	; (8004ac4 <printRadioSettings+0x924>)
 8004a3a:	461c      	mov	r4, r3
 8004a3c:	4615      	mov	r5, r2
 8004a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a46:	c403      	stmia	r4!, {r0, r1}
 8004a48:	8022      	strh	r2, [r4, #0]
 8004a4a:	3402      	adds	r4, #2
 8004a4c:	0c13      	lsrs	r3, r2, #16
 8004a4e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a50:	f107 0308 	add.w	r3, r7, #8
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fb fbdb 	bl	8000210 <strlen>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	f107 0108 	add.w	r1, r7, #8
 8004a62:	230a      	movs	r3, #10
 8004a64:	4813      	ldr	r0, [pc, #76]	; (8004ab4 <printRadioSettings+0x914>)
 8004a66:	f7fe fc5c 	bl	8003322 <HAL_UART_Transmit>

	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004a6a:	f107 0308 	add.w	r3, r7, #8
 8004a6e:	4a16      	ldr	r2, [pc, #88]	; (8004ac8 <printRadioSettings+0x928>)
 8004a70:	461c      	mov	r4, r3
 8004a72:	4615      	mov	r5, r2
 8004a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	8022      	strh	r2, [r4, #0]
 8004a86:	3402      	adds	r4, #2
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a8c:	f107 0308 	add.w	r3, r7, #8
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fb fbbd 	bl	8000210 <strlen>
 8004a96:	4603      	mov	r3, r0
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	f107 0108 	add.w	r1, r7, #8
 8004a9e:	230a      	movs	r3, #10
 8004aa0:	4804      	ldr	r0, [pc, #16]	; (8004ab4 <printRadioSettings+0x914>)
 8004aa2:	f7fe fc3e 	bl	8003322 <HAL_UART_Transmit>
}
 8004aa6:	bf00      	nop
 8004aa8:	3774      	adds	r7, #116	; 0x74
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	0800607c 	.word	0x0800607c
 8004ab4:	200000f0 	.word	0x200000f0
 8004ab8:	080060c8 	.word	0x080060c8
 8004abc:	080060e0 	.word	0x080060e0
 8004ac0:	080060f8 	.word	0x080060f8
 8004ac4:	08006114 	.word	0x08006114
 8004ac8:	08005ce8 	.word	0x08005ce8

08004acc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8004ad2:	463b      	mov	r3, r7
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	609a      	str	r2, [r3, #8]
 8004adc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8004ade:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004ae0:	4a28      	ldr	r2, [pc, #160]	; (8004b84 <MX_ADC1_Init+0xb8>)
 8004ae2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004ae4:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004ae6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004aea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004aec:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004af2:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004af4:	2201      	movs	r2, #1
 8004af6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004af8:	4b21      	ldr	r3, [pc, #132]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b06:	4b1e      	ldr	r3, [pc, #120]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004b0e:	4a1e      	ldr	r2, [pc, #120]	; (8004b88 <MX_ADC1_Init+0xbc>)
 8004b10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b12:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004b18:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004b1e:	4b18      	ldr	r3, [pc, #96]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b26:	4b16      	ldr	r3, [pc, #88]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004b2c:	4814      	ldr	r0, [pc, #80]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004b2e:	f7fb fddb 	bl	80006e8 <HAL_ADC_Init>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004b38:	f000 fa9c 	bl	8005074 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004b40:	2301      	movs	r3, #1
 8004b42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004b44:	2307      	movs	r3, #7
 8004b46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b48:	463b      	mov	r3, r7
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	480c      	ldr	r0, [pc, #48]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004b4e:	f7fb ff1f 	bl	8000990 <HAL_ADC_ConfigChannel>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004b58:	f000 fa8c 	bl	8005074 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004b60:	2302      	movs	r3, #2
 8004b62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b64:	463b      	mov	r3, r7
 8004b66:	4619      	mov	r1, r3
 8004b68:	4805      	ldr	r0, [pc, #20]	; (8004b80 <MX_ADC1_Init+0xb4>)
 8004b6a:	f7fb ff11 	bl	8000990 <HAL_ADC_ConfigChannel>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004b74:	f000 fa7e 	bl	8005074 <Error_Handler>
  }

}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000140 	.word	0x20000140
 8004b84:	40012000 	.word	0x40012000
 8004b88:	0f000001 	.word	0x0f000001

08004b8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	; 0x28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b94:	f107 0314 	add.w	r3, r7, #20
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a2f      	ldr	r2, [pc, #188]	; (8004c68 <HAL_ADC_MspInit+0xdc>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d157      	bne.n	8004c5e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <HAL_ADC_MspInit+0xe0>)
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	4a2d      	ldr	r2, [pc, #180]	; (8004c6c <HAL_ADC_MspInit+0xe0>)
 8004bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bbe:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <HAL_ADC_MspInit+0xe0>)
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	4b27      	ldr	r3, [pc, #156]	; (8004c6c <HAL_ADC_MspInit+0xe0>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	4a26      	ldr	r2, [pc, #152]	; (8004c6c <HAL_ADC_MspInit+0xe0>)
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bda:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <HAL_ADC_MspInit+0xe0>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004be6:	2303      	movs	r3, #3
 8004be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bea:	2303      	movs	r3, #3
 8004bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf2:	f107 0314 	add.w	r3, r7, #20
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	481d      	ldr	r0, [pc, #116]	; (8004c70 <HAL_ADC_MspInit+0xe4>)
 8004bfa:	f7fc fdf9 	bl	80017f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004bfe:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <HAL_ADC_MspInit+0xe8>)
 8004c00:	4a1d      	ldr	r2, [pc, #116]	; (8004c78 <HAL_ADC_MspInit+0xec>)
 8004c02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004c04:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <HAL_ADC_MspInit+0xe8>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c0a:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <HAL_ADC_MspInit+0xe8>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c10:	4b18      	ldr	r3, [pc, #96]	; (8004c74 <HAL_ADC_MspInit+0xe8>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004c16:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <HAL_ADC_MspInit+0xe8>)
 8004c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c1e:	4b15      	ldr	r3, [pc, #84]	; (8004c74 <HAL_ADC_MspInit+0xe8>)
 8004c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c26:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <HAL_ADC_MspInit+0xe8>)
 8004c28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <HAL_ADC_MspInit+0xe8>)
 8004c30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004c36:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <HAL_ADC_MspInit+0xe8>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <HAL_ADC_MspInit+0xe8>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004c42:	480c      	ldr	r0, [pc, #48]	; (8004c74 <HAL_ADC_MspInit+0xe8>)
 8004c44:	f7fc fa66 	bl	8001114 <HAL_DMA_Init>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004c4e:	f000 fa11 	bl	8005074 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a07      	ldr	r2, [pc, #28]	; (8004c74 <HAL_ADC_MspInit+0xe8>)
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
 8004c58:	4a06      	ldr	r2, [pc, #24]	; (8004c74 <HAL_ADC_MspInit+0xe8>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004c5e:	bf00      	nop
 8004c60:	3728      	adds	r7, #40	; 0x28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40012000 	.word	0x40012000
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40020000 	.word	0x40020000
 8004c74:	20000188 	.word	0x20000188
 8004c78:	40026410 	.word	0x40026410

08004c7c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <MX_DMA_Init+0x3c>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <MX_DMA_Init+0x3c>)
 8004c8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c90:	6313      	str	r3, [r2, #48]	; 0x30
 8004c92:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <MX_DMA_Init+0x3c>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9a:	607b      	str	r3, [r7, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	2038      	movs	r0, #56	; 0x38
 8004ca4:	f7fc f9ff 	bl	80010a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004ca8:	2038      	movs	r0, #56	; 0x38
 8004caa:	f7fc fa18 	bl	80010de <HAL_NVIC_EnableIRQ>

}
 8004cae:	bf00      	nop
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40023800 	.word	0x40023800

08004cbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	; 0x28
 8004cc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc2:	f107 0314 	add.w	r3, r7, #20
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	605a      	str	r2, [r3, #4]
 8004ccc:	609a      	str	r2, [r3, #8]
 8004cce:	60da      	str	r2, [r3, #12]
 8004cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	4b37      	ldr	r3, [pc, #220]	; (8004db4 <MX_GPIO_Init+0xf8>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	4a36      	ldr	r2, [pc, #216]	; (8004db4 <MX_GPIO_Init+0xf8>)
 8004cdc:	f043 0304 	orr.w	r3, r3, #4
 8004ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce2:	4b34      	ldr	r3, [pc, #208]	; (8004db4 <MX_GPIO_Init+0xf8>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	4b30      	ldr	r3, [pc, #192]	; (8004db4 <MX_GPIO_Init+0xf8>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	4a2f      	ldr	r2, [pc, #188]	; (8004db4 <MX_GPIO_Init+0xf8>)
 8004cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cfe:	4b2d      	ldr	r3, [pc, #180]	; (8004db4 <MX_GPIO_Init+0xf8>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <MX_GPIO_Init+0xf8>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	4a28      	ldr	r2, [pc, #160]	; (8004db4 <MX_GPIO_Init+0xf8>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1a:	4b26      	ldr	r3, [pc, #152]	; (8004db4 <MX_GPIO_Init+0xf8>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <MX_GPIO_Init+0xf8>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	4a21      	ldr	r2, [pc, #132]	; (8004db4 <MX_GPIO_Init+0xf8>)
 8004d30:	f043 0302 	orr.w	r3, r3, #2
 8004d34:	6313      	str	r3, [r2, #48]	; 0x30
 8004d36:	4b1f      	ldr	r3, [pc, #124]	; (8004db4 <MX_GPIO_Init+0xf8>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	607b      	str	r3, [r7, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004d42:	2200      	movs	r2, #0
 8004d44:	2120      	movs	r1, #32
 8004d46:	481c      	ldr	r0, [pc, #112]	; (8004db8 <MX_GPIO_Init+0xfc>)
 8004d48:	f7fc fee4 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004d52:	481a      	ldr	r0, [pc, #104]	; (8004dbc <MX_GPIO_Init+0x100>)
 8004d54:	f7fc fede 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004d5e:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <MX_GPIO_Init+0x104>)
 8004d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004d66:	f107 0314 	add.w	r3, r7, #20
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4813      	ldr	r0, [pc, #76]	; (8004dbc <MX_GPIO_Init+0x100>)
 8004d6e:	f7fc fd3f 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004d72:	2320      	movs	r3, #32
 8004d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d76:	2301      	movs	r3, #1
 8004d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004d82:	f107 0314 	add.w	r3, r7, #20
 8004d86:	4619      	mov	r1, r3
 8004d88:	480b      	ldr	r0, [pc, #44]	; (8004db8 <MX_GPIO_Init+0xfc>)
 8004d8a:	f7fc fd31 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8004d8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d94:	2301      	movs	r3, #1
 8004d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004da0:	f107 0314 	add.w	r3, r7, #20
 8004da4:	4619      	mov	r1, r3
 8004da6:	4805      	ldr	r0, [pc, #20]	; (8004dbc <MX_GPIO_Init+0x100>)
 8004da8:	f7fc fd22 	bl	80017f0 <HAL_GPIO_Init>

}
 8004dac:	bf00      	nop
 8004dae:	3728      	adds	r7, #40	; 0x28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40023800 	.word	0x40023800
 8004db8:	40020000 	.word	0x40020000
 8004dbc:	40020800 	.word	0x40020800
 8004dc0:	10210000 	.word	0x10210000

08004dc4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004dc8:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <MX_I2C1_Init+0x50>)
 8004dca:	4a13      	ldr	r2, [pc, #76]	; (8004e18 <MX_I2C1_Init+0x54>)
 8004dcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004dce:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <MX_I2C1_Init+0x50>)
 8004dd0:	4a12      	ldr	r2, [pc, #72]	; (8004e1c <MX_I2C1_Init+0x58>)
 8004dd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <MX_I2C1_Init+0x50>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004dda:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <MX_I2C1_Init+0x50>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <MX_I2C1_Init+0x50>)
 8004de2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004de6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <MX_I2C1_Init+0x50>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004dee:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <MX_I2C1_Init+0x50>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004df4:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <MX_I2C1_Init+0x50>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <MX_I2C1_Init+0x50>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e00:	4804      	ldr	r0, [pc, #16]	; (8004e14 <MX_I2C1_Init+0x50>)
 8004e02:	f7fc fea1 	bl	8001b48 <HAL_I2C_Init>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004e0c:	f000 f932 	bl	8005074 <Error_Handler>
  }

}
 8004e10:	bf00      	nop
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	200001e8 	.word	0x200001e8
 8004e18:	40005400 	.word	0x40005400
 8004e1c:	000186a0 	.word	0x000186a0

08004e20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	; 0x28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e28:	f107 0314 	add.w	r3, r7, #20
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	609a      	str	r2, [r3, #8]
 8004e34:	60da      	str	r2, [r3, #12]
 8004e36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a19      	ldr	r2, [pc, #100]	; (8004ea4 <HAL_I2C_MspInit+0x84>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d12b      	bne.n	8004e9a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	4b18      	ldr	r3, [pc, #96]	; (8004ea8 <HAL_I2C_MspInit+0x88>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	4a17      	ldr	r2, [pc, #92]	; (8004ea8 <HAL_I2C_MspInit+0x88>)
 8004e4c:	f043 0302 	orr.w	r3, r3, #2
 8004e50:	6313      	str	r3, [r2, #48]	; 0x30
 8004e52:	4b15      	ldr	r3, [pc, #84]	; (8004ea8 <HAL_I2C_MspInit+0x88>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e5e:	23c0      	movs	r3, #192	; 0xc0
 8004e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e62:	2312      	movs	r3, #18
 8004e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e66:	2301      	movs	r3, #1
 8004e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e6e:	2304      	movs	r3, #4
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e72:	f107 0314 	add.w	r3, r7, #20
 8004e76:	4619      	mov	r1, r3
 8004e78:	480c      	ldr	r0, [pc, #48]	; (8004eac <HAL_I2C_MspInit+0x8c>)
 8004e7a:	f7fc fcb9 	bl	80017f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <HAL_I2C_MspInit+0x88>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <HAL_I2C_MspInit+0x88>)
 8004e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_I2C_MspInit+0x88>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	3728      	adds	r7, #40	; 0x28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40005400 	.word	0x40005400
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	40020400 	.word	0x40020400

08004eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb2:	b099      	sub	sp, #100	; 0x64
 8004eb4:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004eb6:	f7fb fb83 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004eba:	f000 f86d 	bl	8004f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ebe:	f7ff fefd 	bl	8004cbc <MX_GPIO_Init>
  MX_DMA_Init();
 8004ec2:	f7ff fedb 	bl	8004c7c <MX_DMA_Init>
  MX_SPI2_Init();
 8004ec6:	f000 f8dd 	bl	8005084 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8004eca:	f000 fa2b 	bl	8005324 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004ece:	f7ff fdfd 	bl	8004acc <MX_ADC1_Init>
  MX_I2C1_Init();
 8004ed2:	f7ff ff77 	bl	8004dc4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, Joystick, 2);
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	4929      	ldr	r1, [pc, #164]	; (8004f80 <main+0xd0>)
 8004eda:	482a      	ldr	r0, [pc, #168]	; (8004f84 <main+0xd4>)
 8004edc:	f7fb fc48 	bl	8000770 <HAL_ADC_Start_DMA>
  NRF24_begin(GPIOC, NRF24_CSN_Pin, NRF24_CE_Pin, hspi2);
 8004ee0:	4c29      	ldr	r4, [pc, #164]	; (8004f88 <main+0xd8>)
 8004ee2:	4668      	mov	r0, sp
 8004ee4:	1d23      	adds	r3, r4, #4
 8004ee6:	2254      	movs	r2, #84	; 0x54
 8004ee8:	4619      	mov	r1, r3
 8004eea:	f000 fae1 	bl	80054b0 <memcpy>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ef8:	4824      	ldr	r0, [pc, #144]	; (8004f8c <main+0xdc>)
 8004efa:	f7ff f857 	bl	8003fac <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 8004efe:	4e24      	ldr	r6, [pc, #144]	; (8004f90 <main+0xe0>)
 8004f00:	466d      	mov	r5, sp
 8004f02:	f106 0410 	add.w	r4, r6, #16
 8004f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f12:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004f16:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004f1a:	f7ff f915 	bl	8004148 <nrf24_DebugUART_Init>

  printRadioSettings();
 8004f1e:	f7ff f93f 	bl	80041a0 <printRadioSettings>

  NRF24_stopListening();
 8004f22:	f7ff f837 	bl	8003f94 <NRF24_stopListening>
  NRF24_openWritingPipe(tx_pipe_addr);
 8004f26:	a414      	add	r4, pc, #80	; (adr r4, 8004f78 <main+0xc8>)
 8004f28:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	4621      	mov	r1, r4
 8004f30:	f7ff f812 	bl	8003f58 <NRF24_openWritingPipe>

  uint8_t i = 30;
 8004f34:	231e      	movs	r3, #30
 8004f36:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  my_tx_data[0] = i++;  	//(uint8_t)((float)Joystick[0] * (100.0 / 4095.0));
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	71fa      	strb	r2, [r7, #7]
 8004f3e:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <main+0xe4>)
 8004f40:	7013      	strb	r3, [r2, #0]
	  my_tx_data[1] = i;  		//(uint8_t)((float)Joystick[1] * (100.0 / 4095.0));
 8004f42:	4a14      	ldr	r2, [pc, #80]	; (8004f94 <main+0xe4>)
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	7053      	strb	r3, [r2, #1]
	  if(NRF24_write(my_tx_data, PAYLOAD_SIZE)){
 8004f48:	2102      	movs	r1, #2
 8004f4a:	4812      	ldr	r0, [pc, #72]	; (8004f94 <main+0xe4>)
 8004f4c:	f7fe ff96 	bl	8003e7c <NRF24_write>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <main+0xbe>
		  my_tx_data[PAYLOAD_SIZE] = '\r';
 8004f56:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <main+0xe4>)
 8004f58:	220d      	movs	r2, #13
 8004f5a:	709a      	strb	r2, [r3, #2]
		  my_tx_data[PAYLOAD_SIZE + 1] = '\n';
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <main+0xe4>)
 8004f5e:	220a      	movs	r2, #10
 8004f60:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit(&huart2, my_tx_data, PAYLOAD_SIZE + 2, 100);
 8004f62:	2364      	movs	r3, #100	; 0x64
 8004f64:	2204      	movs	r2, #4
 8004f66:	490b      	ldr	r1, [pc, #44]	; (8004f94 <main+0xe4>)
 8004f68:	4809      	ldr	r0, [pc, #36]	; (8004f90 <main+0xe0>)
 8004f6a:	f7fe f9da 	bl	8003322 <HAL_UART_Transmit>
	  }

	  HAL_Delay(1000);
 8004f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f72:	f7fb fb97 	bl	80006a4 <HAL_Delay>
	  my_tx_data[0] = i++;  	//(uint8_t)((float)Joystick[0] * (100.0 / 4095.0));
 8004f76:	e7df      	b.n	8004f38 <main+0x88>
 8004f78:	223344aa 	.word	0x223344aa
 8004f7c:	00000011 	.word	0x00000011
 8004f80:	2000023c 	.word	0x2000023c
 8004f84:	20000140 	.word	0x20000140
 8004f88:	20000264 	.word	0x20000264
 8004f8c:	40020800 	.word	0x40020800
 8004f90:	200002bc 	.word	0x200002bc
 8004f94:	20000240 	.word	0x20000240

08004f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b094      	sub	sp, #80	; 0x50
 8004f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f9e:	f107 031c 	add.w	r3, r7, #28
 8004fa2:	2234      	movs	r2, #52	; 0x34
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fa8d 	bl	80054c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fac:	f107 0308 	add.w	r3, r7, #8
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	609a      	str	r2, [r3, #8]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	4b2a      	ldr	r3, [pc, #168]	; (800506c <SystemClock_Config+0xd4>)
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	4a29      	ldr	r2, [pc, #164]	; (800506c <SystemClock_Config+0xd4>)
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fca:	6413      	str	r3, [r2, #64]	; 0x40
 8004fcc:	4b27      	ldr	r3, [pc, #156]	; (800506c <SystemClock_Config+0xd4>)
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004fd8:	2300      	movs	r3, #0
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4b24      	ldr	r3, [pc, #144]	; (8005070 <SystemClock_Config+0xd8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004fe4:	4a22      	ldr	r2, [pc, #136]	; (8005070 <SystemClock_Config+0xd8>)
 8004fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	4b20      	ldr	r3, [pc, #128]	; (8005070 <SystemClock_Config+0xd8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005000:	2310      	movs	r3, #16
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005004:	2302      	movs	r3, #2
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005008:	2300      	movs	r3, #0
 800500a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800500c:	2310      	movs	r3, #16
 800500e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005010:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005014:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005016:	2304      	movs	r3, #4
 8005018:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800501a:	2302      	movs	r3, #2
 800501c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800501e:	2302      	movs	r3, #2
 8005020:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005022:	f107 031c 	add.w	r3, r7, #28
 8005026:	4618      	mov	r0, r3
 8005028:	f7fd f980 	bl	800232c <HAL_RCC_OscConfig>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8005032:	f000 f81f 	bl	8005074 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005036:	230f      	movs	r3, #15
 8005038:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800503a:	2302      	movs	r3, #2
 800503c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005048:	2300      	movs	r3, #0
 800504a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800504c:	f107 0308 	add.w	r3, r7, #8
 8005050:	2102      	movs	r1, #2
 8005052:	4618      	mov	r0, r3
 8005054:	f7fc feb0 	bl	8001db8 <HAL_RCC_ClockConfig>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800505e:	f000 f809 	bl	8005074 <Error_Handler>
  }
}
 8005062:	bf00      	nop
 8005064:	3750      	adds	r7, #80	; 0x50
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40023800 	.word	0x40023800
 8005070:	40007000 	.word	0x40007000

08005074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005078:	bf00      	nop
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
	...

08005084 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8005088:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <MX_SPI2_Init+0x64>)
 800508a:	4a18      	ldr	r2, [pc, #96]	; (80050ec <MX_SPI2_Init+0x68>)
 800508c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800508e:	4b16      	ldr	r3, [pc, #88]	; (80050e8 <MX_SPI2_Init+0x64>)
 8005090:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005094:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <MX_SPI2_Init+0x64>)
 8005098:	2200      	movs	r2, #0
 800509a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800509c:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <MX_SPI2_Init+0x64>)
 800509e:	2200      	movs	r2, #0
 80050a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80050a2:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <MX_SPI2_Init+0x64>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80050a8:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <MX_SPI2_Init+0x64>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80050ae:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <MX_SPI2_Init+0x64>)
 80050b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80050b6:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <MX_SPI2_Init+0x64>)
 80050b8:	2220      	movs	r2, #32
 80050ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <MX_SPI2_Init+0x64>)
 80050be:	2200      	movs	r2, #0
 80050c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <MX_SPI2_Init+0x64>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c8:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <MX_SPI2_Init+0x64>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <MX_SPI2_Init+0x64>)
 80050d0:	220a      	movs	r2, #10
 80050d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80050d4:	4804      	ldr	r0, [pc, #16]	; (80050e8 <MX_SPI2_Init+0x64>)
 80050d6:	f7fd fb83 	bl	80027e0 <HAL_SPI_Init>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80050e0:	f7ff ffc8 	bl	8005074 <Error_Handler>
  }

}
 80050e4:	bf00      	nop
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20000264 	.word	0x20000264
 80050ec:	40003800 	.word	0x40003800

080050f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	; 0x28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050f8:	f107 0314 	add.w	r3, r7, #20
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	605a      	str	r2, [r3, #4]
 8005102:	609a      	str	r2, [r3, #8]
 8005104:	60da      	str	r2, [r3, #12]
 8005106:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a30      	ldr	r2, [pc, #192]	; (80051d0 <HAL_SPI_MspInit+0xe0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d15a      	bne.n	80051c8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	4b2f      	ldr	r3, [pc, #188]	; (80051d4 <HAL_SPI_MspInit+0xe4>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	4a2e      	ldr	r2, [pc, #184]	; (80051d4 <HAL_SPI_MspInit+0xe4>)
 800511c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005120:	6413      	str	r3, [r2, #64]	; 0x40
 8005122:	4b2c      	ldr	r3, [pc, #176]	; (80051d4 <HAL_SPI_MspInit+0xe4>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	4b28      	ldr	r3, [pc, #160]	; (80051d4 <HAL_SPI_MspInit+0xe4>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	4a27      	ldr	r2, [pc, #156]	; (80051d4 <HAL_SPI_MspInit+0xe4>)
 8005138:	f043 0304 	orr.w	r3, r3, #4
 800513c:	6313      	str	r3, [r2, #48]	; 0x30
 800513e:	4b25      	ldr	r3, [pc, #148]	; (80051d4 <HAL_SPI_MspInit+0xe4>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	4b21      	ldr	r3, [pc, #132]	; (80051d4 <HAL_SPI_MspInit+0xe4>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	4a20      	ldr	r2, [pc, #128]	; (80051d4 <HAL_SPI_MspInit+0xe4>)
 8005154:	f043 0302 	orr.w	r3, r3, #2
 8005158:	6313      	str	r3, [r2, #48]	; 0x30
 800515a:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <HAL_SPI_MspInit+0xe4>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	60bb      	str	r3, [r7, #8]
 8005164:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005166:	2302      	movs	r3, #2
 8005168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516a:	2302      	movs	r3, #2
 800516c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005172:	2303      	movs	r3, #3
 8005174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8005176:	2307      	movs	r3, #7
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800517a:	f107 0314 	add.w	r3, r7, #20
 800517e:	4619      	mov	r1, r3
 8005180:	4815      	ldr	r0, [pc, #84]	; (80051d8 <HAL_SPI_MspInit+0xe8>)
 8005182:	f7fc fb35 	bl	80017f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005186:	2304      	movs	r3, #4
 8005188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518a:	2302      	movs	r3, #2
 800518c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005192:	2303      	movs	r3, #3
 8005194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005196:	2305      	movs	r3, #5
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800519a:	f107 0314 	add.w	r3, r7, #20
 800519e:	4619      	mov	r1, r3
 80051a0:	480d      	ldr	r0, [pc, #52]	; (80051d8 <HAL_SPI_MspInit+0xe8>)
 80051a2:	f7fc fb25 	bl	80017f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80051a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ac:	2302      	movs	r3, #2
 80051ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051b4:	2303      	movs	r3, #3
 80051b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80051b8:	2305      	movs	r3, #5
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4619      	mov	r1, r3
 80051c2:	4806      	ldr	r0, [pc, #24]	; (80051dc <HAL_SPI_MspInit+0xec>)
 80051c4:	f7fc fb14 	bl	80017f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80051c8:	bf00      	nop
 80051ca:	3728      	adds	r7, #40	; 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40003800 	.word	0x40003800
 80051d4:	40023800 	.word	0x40023800
 80051d8:	40020800 	.word	0x40020800
 80051dc:	40020400 	.word	0x40020400

080051e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051e6:	2300      	movs	r3, #0
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	4b10      	ldr	r3, [pc, #64]	; (800522c <HAL_MspInit+0x4c>)
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	4a0f      	ldr	r2, [pc, #60]	; (800522c <HAL_MspInit+0x4c>)
 80051f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051f4:	6453      	str	r3, [r2, #68]	; 0x44
 80051f6:	4b0d      	ldr	r3, [pc, #52]	; (800522c <HAL_MspInit+0x4c>)
 80051f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	603b      	str	r3, [r7, #0]
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_MspInit+0x4c>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	4a08      	ldr	r2, [pc, #32]	; (800522c <HAL_MspInit+0x4c>)
 800520c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005210:	6413      	str	r3, [r2, #64]	; 0x40
 8005212:	4b06      	ldr	r3, [pc, #24]	; (800522c <HAL_MspInit+0x4c>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800521e:	2007      	movs	r0, #7
 8005220:	f7fb ff36 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40023800 	.word	0x40023800

08005230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800523e:	b480      	push	{r7}
 8005240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005242:	e7fe      	b.n	8005242 <HardFault_Handler+0x4>

08005244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005248:	e7fe      	b.n	8005248 <MemManage_Handler+0x4>

0800524a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800524a:	b480      	push	{r7}
 800524c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800524e:	e7fe      	b.n	800524e <BusFault_Handler+0x4>

08005250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005254:	e7fe      	b.n	8005254 <UsageFault_Handler+0x4>

08005256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005256:	b480      	push	{r7}
 8005258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800525a:	bf00      	nop
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005268:	bf00      	nop
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005272:	b480      	push	{r7}
 8005274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005276:	bf00      	nop
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005284:	f7fb f9ee 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005288:	bf00      	nop
 800528a:	bd80      	pop	{r7, pc}

0800528c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005290:	4802      	ldr	r0, [pc, #8]	; (800529c <DMA2_Stream0_IRQHandler+0x10>)
 8005292:	f7fc f845 	bl	8001320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000188 	.word	0x20000188

080052a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <_sbrk+0x50>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d102      	bne.n	80052b6 <_sbrk+0x16>
		heap_end = &end;
 80052b0:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <_sbrk+0x50>)
 80052b2:	4a10      	ldr	r2, [pc, #64]	; (80052f4 <_sbrk+0x54>)
 80052b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80052b6:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <_sbrk+0x50>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80052bc:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <_sbrk+0x50>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4413      	add	r3, r2
 80052c4:	466a      	mov	r2, sp
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d907      	bls.n	80052da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80052ca:	f000 f8c7 	bl	800545c <__errno>
 80052ce:	4602      	mov	r2, r0
 80052d0:	230c      	movs	r3, #12
 80052d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80052d4:	f04f 33ff 	mov.w	r3, #4294967295
 80052d8:	e006      	b.n	80052e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80052da:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <_sbrk+0x50>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4413      	add	r3, r2
 80052e2:	4a03      	ldr	r2, [pc, #12]	; (80052f0 <_sbrk+0x50>)
 80052e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80052e6:	68fb      	ldr	r3, [r7, #12]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000130 	.word	0x20000130
 80052f4:	20000300 	.word	0x20000300

080052f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052fc:	4b08      	ldr	r3, [pc, #32]	; (8005320 <SystemInit+0x28>)
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005302:	4a07      	ldr	r2, [pc, #28]	; (8005320 <SystemInit+0x28>)
 8005304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <SystemInit+0x28>)
 800530e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005312:	609a      	str	r2, [r3, #8]
#endif
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	e000ed00 	.word	0xe000ed00

08005324 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005328:	4b11      	ldr	r3, [pc, #68]	; (8005370 <MX_USART2_UART_Init+0x4c>)
 800532a:	4a12      	ldr	r2, [pc, #72]	; (8005374 <MX_USART2_UART_Init+0x50>)
 800532c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800532e:	4b10      	ldr	r3, [pc, #64]	; (8005370 <MX_USART2_UART_Init+0x4c>)
 8005330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005336:	4b0e      	ldr	r3, [pc, #56]	; (8005370 <MX_USART2_UART_Init+0x4c>)
 8005338:	2200      	movs	r2, #0
 800533a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800533c:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <MX_USART2_UART_Init+0x4c>)
 800533e:	2200      	movs	r2, #0
 8005340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005342:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <MX_USART2_UART_Init+0x4c>)
 8005344:	2200      	movs	r2, #0
 8005346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005348:	4b09      	ldr	r3, [pc, #36]	; (8005370 <MX_USART2_UART_Init+0x4c>)
 800534a:	220c      	movs	r2, #12
 800534c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800534e:	4b08      	ldr	r3, [pc, #32]	; (8005370 <MX_USART2_UART_Init+0x4c>)
 8005350:	2200      	movs	r2, #0
 8005352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <MX_USART2_UART_Init+0x4c>)
 8005356:	2200      	movs	r2, #0
 8005358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800535a:	4805      	ldr	r0, [pc, #20]	; (8005370 <MX_USART2_UART_Init+0x4c>)
 800535c:	f7fd ff94 	bl	8003288 <HAL_UART_Init>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005366:	f7ff fe85 	bl	8005074 <Error_Handler>
  }

}
 800536a:	bf00      	nop
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	200002bc 	.word	0x200002bc
 8005374:	40004400 	.word	0x40004400

08005378 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005380:	f107 0314 	add.w	r3, r7, #20
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a19      	ldr	r2, [pc, #100]	; (80053fc <HAL_UART_MspInit+0x84>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d12b      	bne.n	80053f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	4b18      	ldr	r3, [pc, #96]	; (8005400 <HAL_UART_MspInit+0x88>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	4a17      	ldr	r2, [pc, #92]	; (8005400 <HAL_UART_MspInit+0x88>)
 80053a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a8:	6413      	str	r3, [r2, #64]	; 0x40
 80053aa:	4b15      	ldr	r3, [pc, #84]	; (8005400 <HAL_UART_MspInit+0x88>)
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	4b11      	ldr	r3, [pc, #68]	; (8005400 <HAL_UART_MspInit+0x88>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	4a10      	ldr	r2, [pc, #64]	; (8005400 <HAL_UART_MspInit+0x88>)
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	6313      	str	r3, [r2, #48]	; 0x30
 80053c6:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <HAL_UART_MspInit+0x88>)
 80053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80053d2:	230c      	movs	r3, #12
 80053d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d6:	2302      	movs	r3, #2
 80053d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053de:	2303      	movs	r3, #3
 80053e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053e2:	2307      	movs	r3, #7
 80053e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053e6:	f107 0314 	add.w	r3, r7, #20
 80053ea:	4619      	mov	r1, r3
 80053ec:	4805      	ldr	r0, [pc, #20]	; (8005404 <HAL_UART_MspInit+0x8c>)
 80053ee:	f7fc f9ff 	bl	80017f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80053f2:	bf00      	nop
 80053f4:	3728      	adds	r7, #40	; 0x28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40004400 	.word	0x40004400
 8005400:	40023800 	.word	0x40023800
 8005404:	40020000 	.word	0x40020000

08005408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005440 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800540c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800540e:	e003      	b.n	8005418 <LoopCopyDataInit>

08005410 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005410:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005412:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005414:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005416:	3104      	adds	r1, #4

08005418 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005418:	480b      	ldr	r0, [pc, #44]	; (8005448 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800541c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800541e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005420:	d3f6      	bcc.n	8005410 <CopyDataInit>
  ldr  r2, =_sbss
 8005422:	4a0b      	ldr	r2, [pc, #44]	; (8005450 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005424:	e002      	b.n	800542c <LoopFillZerobss>

08005426 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005426:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005428:	f842 3b04 	str.w	r3, [r2], #4

0800542c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800542e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005430:	d3f9      	bcc.n	8005426 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005432:	f7ff ff61 	bl	80052f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005436:	f000 f817 	bl	8005468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800543a:	f7ff fd39 	bl	8004eb0 <main>
  bx  lr    
 800543e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005440:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005444:	08006194 	.word	0x08006194
  ldr  r0, =_sdata
 8005448:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800544c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8005450:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8005454:	20000300 	.word	0x20000300

08005458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005458:	e7fe      	b.n	8005458 <ADC_IRQHandler>
	...

0800545c <__errno>:
 800545c:	4b01      	ldr	r3, [pc, #4]	; (8005464 <__errno+0x8>)
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	2000000c 	.word	0x2000000c

08005468 <__libc_init_array>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	4e0d      	ldr	r6, [pc, #52]	; (80054a0 <__libc_init_array+0x38>)
 800546c:	4c0d      	ldr	r4, [pc, #52]	; (80054a4 <__libc_init_array+0x3c>)
 800546e:	1ba4      	subs	r4, r4, r6
 8005470:	10a4      	asrs	r4, r4, #2
 8005472:	2500      	movs	r5, #0
 8005474:	42a5      	cmp	r5, r4
 8005476:	d109      	bne.n	800548c <__libc_init_array+0x24>
 8005478:	4e0b      	ldr	r6, [pc, #44]	; (80054a8 <__libc_init_array+0x40>)
 800547a:	4c0c      	ldr	r4, [pc, #48]	; (80054ac <__libc_init_array+0x44>)
 800547c:	f000 fc28 	bl	8005cd0 <_init>
 8005480:	1ba4      	subs	r4, r4, r6
 8005482:	10a4      	asrs	r4, r4, #2
 8005484:	2500      	movs	r5, #0
 8005486:	42a5      	cmp	r5, r4
 8005488:	d105      	bne.n	8005496 <__libc_init_array+0x2e>
 800548a:	bd70      	pop	{r4, r5, r6, pc}
 800548c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005490:	4798      	blx	r3
 8005492:	3501      	adds	r5, #1
 8005494:	e7ee      	b.n	8005474 <__libc_init_array+0xc>
 8005496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800549a:	4798      	blx	r3
 800549c:	3501      	adds	r5, #1
 800549e:	e7f2      	b.n	8005486 <__libc_init_array+0x1e>
 80054a0:	0800618c 	.word	0x0800618c
 80054a4:	0800618c 	.word	0x0800618c
 80054a8:	0800618c 	.word	0x0800618c
 80054ac:	08006190 	.word	0x08006190

080054b0 <memcpy>:
 80054b0:	b510      	push	{r4, lr}
 80054b2:	1e43      	subs	r3, r0, #1
 80054b4:	440a      	add	r2, r1
 80054b6:	4291      	cmp	r1, r2
 80054b8:	d100      	bne.n	80054bc <memcpy+0xc>
 80054ba:	bd10      	pop	{r4, pc}
 80054bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c4:	e7f7      	b.n	80054b6 <memcpy+0x6>

080054c6 <memset>:
 80054c6:	4402      	add	r2, r0
 80054c8:	4603      	mov	r3, r0
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d100      	bne.n	80054d0 <memset+0xa>
 80054ce:	4770      	bx	lr
 80054d0:	f803 1b01 	strb.w	r1, [r3], #1
 80054d4:	e7f9      	b.n	80054ca <memset+0x4>
	...

080054d8 <siprintf>:
 80054d8:	b40e      	push	{r1, r2, r3}
 80054da:	b500      	push	{lr}
 80054dc:	b09c      	sub	sp, #112	; 0x70
 80054de:	ab1d      	add	r3, sp, #116	; 0x74
 80054e0:	9002      	str	r0, [sp, #8]
 80054e2:	9006      	str	r0, [sp, #24]
 80054e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054e8:	4809      	ldr	r0, [pc, #36]	; (8005510 <siprintf+0x38>)
 80054ea:	9107      	str	r1, [sp, #28]
 80054ec:	9104      	str	r1, [sp, #16]
 80054ee:	4909      	ldr	r1, [pc, #36]	; (8005514 <siprintf+0x3c>)
 80054f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f4:	9105      	str	r1, [sp, #20]
 80054f6:	6800      	ldr	r0, [r0, #0]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	a902      	add	r1, sp, #8
 80054fc:	f000 f866 	bl	80055cc <_svfiprintf_r>
 8005500:	9b02      	ldr	r3, [sp, #8]
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	b01c      	add	sp, #112	; 0x70
 8005508:	f85d eb04 	ldr.w	lr, [sp], #4
 800550c:	b003      	add	sp, #12
 800550e:	4770      	bx	lr
 8005510:	2000000c 	.word	0x2000000c
 8005514:	ffff0208 	.word	0xffff0208

08005518 <__ssputs_r>:
 8005518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	688e      	ldr	r6, [r1, #8]
 800551e:	429e      	cmp	r6, r3
 8005520:	4682      	mov	sl, r0
 8005522:	460c      	mov	r4, r1
 8005524:	4690      	mov	r8, r2
 8005526:	4699      	mov	r9, r3
 8005528:	d837      	bhi.n	800559a <__ssputs_r+0x82>
 800552a:	898a      	ldrh	r2, [r1, #12]
 800552c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005530:	d031      	beq.n	8005596 <__ssputs_r+0x7e>
 8005532:	6825      	ldr	r5, [r4, #0]
 8005534:	6909      	ldr	r1, [r1, #16]
 8005536:	1a6f      	subs	r7, r5, r1
 8005538:	6965      	ldr	r5, [r4, #20]
 800553a:	2302      	movs	r3, #2
 800553c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005540:	fb95 f5f3 	sdiv	r5, r5, r3
 8005544:	f109 0301 	add.w	r3, r9, #1
 8005548:	443b      	add	r3, r7
 800554a:	429d      	cmp	r5, r3
 800554c:	bf38      	it	cc
 800554e:	461d      	movcc	r5, r3
 8005550:	0553      	lsls	r3, r2, #21
 8005552:	d530      	bpl.n	80055b6 <__ssputs_r+0x9e>
 8005554:	4629      	mov	r1, r5
 8005556:	f000 fb21 	bl	8005b9c <_malloc_r>
 800555a:	4606      	mov	r6, r0
 800555c:	b950      	cbnz	r0, 8005574 <__ssputs_r+0x5c>
 800555e:	230c      	movs	r3, #12
 8005560:	f8ca 3000 	str.w	r3, [sl]
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800556a:	81a3      	strh	r3, [r4, #12]
 800556c:	f04f 30ff 	mov.w	r0, #4294967295
 8005570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005574:	463a      	mov	r2, r7
 8005576:	6921      	ldr	r1, [r4, #16]
 8005578:	f7ff ff9a 	bl	80054b0 <memcpy>
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005586:	81a3      	strh	r3, [r4, #12]
 8005588:	6126      	str	r6, [r4, #16]
 800558a:	6165      	str	r5, [r4, #20]
 800558c:	443e      	add	r6, r7
 800558e:	1bed      	subs	r5, r5, r7
 8005590:	6026      	str	r6, [r4, #0]
 8005592:	60a5      	str	r5, [r4, #8]
 8005594:	464e      	mov	r6, r9
 8005596:	454e      	cmp	r6, r9
 8005598:	d900      	bls.n	800559c <__ssputs_r+0x84>
 800559a:	464e      	mov	r6, r9
 800559c:	4632      	mov	r2, r6
 800559e:	4641      	mov	r1, r8
 80055a0:	6820      	ldr	r0, [r4, #0]
 80055a2:	f000 fa93 	bl	8005acc <memmove>
 80055a6:	68a3      	ldr	r3, [r4, #8]
 80055a8:	1b9b      	subs	r3, r3, r6
 80055aa:	60a3      	str	r3, [r4, #8]
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	441e      	add	r6, r3
 80055b0:	6026      	str	r6, [r4, #0]
 80055b2:	2000      	movs	r0, #0
 80055b4:	e7dc      	b.n	8005570 <__ssputs_r+0x58>
 80055b6:	462a      	mov	r2, r5
 80055b8:	f000 fb4a 	bl	8005c50 <_realloc_r>
 80055bc:	4606      	mov	r6, r0
 80055be:	2800      	cmp	r0, #0
 80055c0:	d1e2      	bne.n	8005588 <__ssputs_r+0x70>
 80055c2:	6921      	ldr	r1, [r4, #16]
 80055c4:	4650      	mov	r0, sl
 80055c6:	f000 fa9b 	bl	8005b00 <_free_r>
 80055ca:	e7c8      	b.n	800555e <__ssputs_r+0x46>

080055cc <_svfiprintf_r>:
 80055cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d0:	461d      	mov	r5, r3
 80055d2:	898b      	ldrh	r3, [r1, #12]
 80055d4:	061f      	lsls	r7, r3, #24
 80055d6:	b09d      	sub	sp, #116	; 0x74
 80055d8:	4680      	mov	r8, r0
 80055da:	460c      	mov	r4, r1
 80055dc:	4616      	mov	r6, r2
 80055de:	d50f      	bpl.n	8005600 <_svfiprintf_r+0x34>
 80055e0:	690b      	ldr	r3, [r1, #16]
 80055e2:	b96b      	cbnz	r3, 8005600 <_svfiprintf_r+0x34>
 80055e4:	2140      	movs	r1, #64	; 0x40
 80055e6:	f000 fad9 	bl	8005b9c <_malloc_r>
 80055ea:	6020      	str	r0, [r4, #0]
 80055ec:	6120      	str	r0, [r4, #16]
 80055ee:	b928      	cbnz	r0, 80055fc <_svfiprintf_r+0x30>
 80055f0:	230c      	movs	r3, #12
 80055f2:	f8c8 3000 	str.w	r3, [r8]
 80055f6:	f04f 30ff 	mov.w	r0, #4294967295
 80055fa:	e0c8      	b.n	800578e <_svfiprintf_r+0x1c2>
 80055fc:	2340      	movs	r3, #64	; 0x40
 80055fe:	6163      	str	r3, [r4, #20]
 8005600:	2300      	movs	r3, #0
 8005602:	9309      	str	r3, [sp, #36]	; 0x24
 8005604:	2320      	movs	r3, #32
 8005606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800560a:	2330      	movs	r3, #48	; 0x30
 800560c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005610:	9503      	str	r5, [sp, #12]
 8005612:	f04f 0b01 	mov.w	fp, #1
 8005616:	4637      	mov	r7, r6
 8005618:	463d      	mov	r5, r7
 800561a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800561e:	b10b      	cbz	r3, 8005624 <_svfiprintf_r+0x58>
 8005620:	2b25      	cmp	r3, #37	; 0x25
 8005622:	d13e      	bne.n	80056a2 <_svfiprintf_r+0xd6>
 8005624:	ebb7 0a06 	subs.w	sl, r7, r6
 8005628:	d00b      	beq.n	8005642 <_svfiprintf_r+0x76>
 800562a:	4653      	mov	r3, sl
 800562c:	4632      	mov	r2, r6
 800562e:	4621      	mov	r1, r4
 8005630:	4640      	mov	r0, r8
 8005632:	f7ff ff71 	bl	8005518 <__ssputs_r>
 8005636:	3001      	adds	r0, #1
 8005638:	f000 80a4 	beq.w	8005784 <_svfiprintf_r+0x1b8>
 800563c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563e:	4453      	add	r3, sl
 8005640:	9309      	str	r3, [sp, #36]	; 0x24
 8005642:	783b      	ldrb	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 809d 	beq.w	8005784 <_svfiprintf_r+0x1b8>
 800564a:	2300      	movs	r3, #0
 800564c:	f04f 32ff 	mov.w	r2, #4294967295
 8005650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005654:	9304      	str	r3, [sp, #16]
 8005656:	9307      	str	r3, [sp, #28]
 8005658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800565c:	931a      	str	r3, [sp, #104]	; 0x68
 800565e:	462f      	mov	r7, r5
 8005660:	2205      	movs	r2, #5
 8005662:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005666:	4850      	ldr	r0, [pc, #320]	; (80057a8 <_svfiprintf_r+0x1dc>)
 8005668:	f7fa fdda 	bl	8000220 <memchr>
 800566c:	9b04      	ldr	r3, [sp, #16]
 800566e:	b9d0      	cbnz	r0, 80056a6 <_svfiprintf_r+0xda>
 8005670:	06d9      	lsls	r1, r3, #27
 8005672:	bf44      	itt	mi
 8005674:	2220      	movmi	r2, #32
 8005676:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800567a:	071a      	lsls	r2, r3, #28
 800567c:	bf44      	itt	mi
 800567e:	222b      	movmi	r2, #43	; 0x2b
 8005680:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005684:	782a      	ldrb	r2, [r5, #0]
 8005686:	2a2a      	cmp	r2, #42	; 0x2a
 8005688:	d015      	beq.n	80056b6 <_svfiprintf_r+0xea>
 800568a:	9a07      	ldr	r2, [sp, #28]
 800568c:	462f      	mov	r7, r5
 800568e:	2000      	movs	r0, #0
 8005690:	250a      	movs	r5, #10
 8005692:	4639      	mov	r1, r7
 8005694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005698:	3b30      	subs	r3, #48	; 0x30
 800569a:	2b09      	cmp	r3, #9
 800569c:	d94d      	bls.n	800573a <_svfiprintf_r+0x16e>
 800569e:	b1b8      	cbz	r0, 80056d0 <_svfiprintf_r+0x104>
 80056a0:	e00f      	b.n	80056c2 <_svfiprintf_r+0xf6>
 80056a2:	462f      	mov	r7, r5
 80056a4:	e7b8      	b.n	8005618 <_svfiprintf_r+0x4c>
 80056a6:	4a40      	ldr	r2, [pc, #256]	; (80057a8 <_svfiprintf_r+0x1dc>)
 80056a8:	1a80      	subs	r0, r0, r2
 80056aa:	fa0b f000 	lsl.w	r0, fp, r0
 80056ae:	4318      	orrs	r0, r3
 80056b0:	9004      	str	r0, [sp, #16]
 80056b2:	463d      	mov	r5, r7
 80056b4:	e7d3      	b.n	800565e <_svfiprintf_r+0x92>
 80056b6:	9a03      	ldr	r2, [sp, #12]
 80056b8:	1d11      	adds	r1, r2, #4
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	9103      	str	r1, [sp, #12]
 80056be:	2a00      	cmp	r2, #0
 80056c0:	db01      	blt.n	80056c6 <_svfiprintf_r+0xfa>
 80056c2:	9207      	str	r2, [sp, #28]
 80056c4:	e004      	b.n	80056d0 <_svfiprintf_r+0x104>
 80056c6:	4252      	negs	r2, r2
 80056c8:	f043 0302 	orr.w	r3, r3, #2
 80056cc:	9207      	str	r2, [sp, #28]
 80056ce:	9304      	str	r3, [sp, #16]
 80056d0:	783b      	ldrb	r3, [r7, #0]
 80056d2:	2b2e      	cmp	r3, #46	; 0x2e
 80056d4:	d10c      	bne.n	80056f0 <_svfiprintf_r+0x124>
 80056d6:	787b      	ldrb	r3, [r7, #1]
 80056d8:	2b2a      	cmp	r3, #42	; 0x2a
 80056da:	d133      	bne.n	8005744 <_svfiprintf_r+0x178>
 80056dc:	9b03      	ldr	r3, [sp, #12]
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	9203      	str	r2, [sp, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bfb8      	it	lt
 80056e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80056ec:	3702      	adds	r7, #2
 80056ee:	9305      	str	r3, [sp, #20]
 80056f0:	4d2e      	ldr	r5, [pc, #184]	; (80057ac <_svfiprintf_r+0x1e0>)
 80056f2:	7839      	ldrb	r1, [r7, #0]
 80056f4:	2203      	movs	r2, #3
 80056f6:	4628      	mov	r0, r5
 80056f8:	f7fa fd92 	bl	8000220 <memchr>
 80056fc:	b138      	cbz	r0, 800570e <_svfiprintf_r+0x142>
 80056fe:	2340      	movs	r3, #64	; 0x40
 8005700:	1b40      	subs	r0, r0, r5
 8005702:	fa03 f000 	lsl.w	r0, r3, r0
 8005706:	9b04      	ldr	r3, [sp, #16]
 8005708:	4303      	orrs	r3, r0
 800570a:	3701      	adds	r7, #1
 800570c:	9304      	str	r3, [sp, #16]
 800570e:	7839      	ldrb	r1, [r7, #0]
 8005710:	4827      	ldr	r0, [pc, #156]	; (80057b0 <_svfiprintf_r+0x1e4>)
 8005712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005716:	2206      	movs	r2, #6
 8005718:	1c7e      	adds	r6, r7, #1
 800571a:	f7fa fd81 	bl	8000220 <memchr>
 800571e:	2800      	cmp	r0, #0
 8005720:	d038      	beq.n	8005794 <_svfiprintf_r+0x1c8>
 8005722:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <_svfiprintf_r+0x1e8>)
 8005724:	bb13      	cbnz	r3, 800576c <_svfiprintf_r+0x1a0>
 8005726:	9b03      	ldr	r3, [sp, #12]
 8005728:	3307      	adds	r3, #7
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	3308      	adds	r3, #8
 8005730:	9303      	str	r3, [sp, #12]
 8005732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005734:	444b      	add	r3, r9
 8005736:	9309      	str	r3, [sp, #36]	; 0x24
 8005738:	e76d      	b.n	8005616 <_svfiprintf_r+0x4a>
 800573a:	fb05 3202 	mla	r2, r5, r2, r3
 800573e:	2001      	movs	r0, #1
 8005740:	460f      	mov	r7, r1
 8005742:	e7a6      	b.n	8005692 <_svfiprintf_r+0xc6>
 8005744:	2300      	movs	r3, #0
 8005746:	3701      	adds	r7, #1
 8005748:	9305      	str	r3, [sp, #20]
 800574a:	4619      	mov	r1, r3
 800574c:	250a      	movs	r5, #10
 800574e:	4638      	mov	r0, r7
 8005750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005754:	3a30      	subs	r2, #48	; 0x30
 8005756:	2a09      	cmp	r2, #9
 8005758:	d903      	bls.n	8005762 <_svfiprintf_r+0x196>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0c8      	beq.n	80056f0 <_svfiprintf_r+0x124>
 800575e:	9105      	str	r1, [sp, #20]
 8005760:	e7c6      	b.n	80056f0 <_svfiprintf_r+0x124>
 8005762:	fb05 2101 	mla	r1, r5, r1, r2
 8005766:	2301      	movs	r3, #1
 8005768:	4607      	mov	r7, r0
 800576a:	e7f0      	b.n	800574e <_svfiprintf_r+0x182>
 800576c:	ab03      	add	r3, sp, #12
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	4622      	mov	r2, r4
 8005772:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <_svfiprintf_r+0x1ec>)
 8005774:	a904      	add	r1, sp, #16
 8005776:	4640      	mov	r0, r8
 8005778:	f3af 8000 	nop.w
 800577c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005780:	4681      	mov	r9, r0
 8005782:	d1d6      	bne.n	8005732 <_svfiprintf_r+0x166>
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	065b      	lsls	r3, r3, #25
 8005788:	f53f af35 	bmi.w	80055f6 <_svfiprintf_r+0x2a>
 800578c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800578e:	b01d      	add	sp, #116	; 0x74
 8005790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005794:	ab03      	add	r3, sp, #12
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	4622      	mov	r2, r4
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <_svfiprintf_r+0x1ec>)
 800579c:	a904      	add	r1, sp, #16
 800579e:	4640      	mov	r0, r8
 80057a0:	f000 f882 	bl	80058a8 <_printf_i>
 80057a4:	e7ea      	b.n	800577c <_svfiprintf_r+0x1b0>
 80057a6:	bf00      	nop
 80057a8:	08006150 	.word	0x08006150
 80057ac:	08006156 	.word	0x08006156
 80057b0:	0800615a 	.word	0x0800615a
 80057b4:	00000000 	.word	0x00000000
 80057b8:	08005519 	.word	0x08005519

080057bc <_printf_common>:
 80057bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c0:	4691      	mov	r9, r2
 80057c2:	461f      	mov	r7, r3
 80057c4:	688a      	ldr	r2, [r1, #8]
 80057c6:	690b      	ldr	r3, [r1, #16]
 80057c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057cc:	4293      	cmp	r3, r2
 80057ce:	bfb8      	it	lt
 80057d0:	4613      	movlt	r3, r2
 80057d2:	f8c9 3000 	str.w	r3, [r9]
 80057d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057da:	4606      	mov	r6, r0
 80057dc:	460c      	mov	r4, r1
 80057de:	b112      	cbz	r2, 80057e6 <_printf_common+0x2a>
 80057e0:	3301      	adds	r3, #1
 80057e2:	f8c9 3000 	str.w	r3, [r9]
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	0699      	lsls	r1, r3, #26
 80057ea:	bf42      	ittt	mi
 80057ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80057f0:	3302      	addmi	r3, #2
 80057f2:	f8c9 3000 	strmi.w	r3, [r9]
 80057f6:	6825      	ldr	r5, [r4, #0]
 80057f8:	f015 0506 	ands.w	r5, r5, #6
 80057fc:	d107      	bne.n	800580e <_printf_common+0x52>
 80057fe:	f104 0a19 	add.w	sl, r4, #25
 8005802:	68e3      	ldr	r3, [r4, #12]
 8005804:	f8d9 2000 	ldr.w	r2, [r9]
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	42ab      	cmp	r3, r5
 800580c:	dc28      	bgt.n	8005860 <_printf_common+0xa4>
 800580e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005812:	6822      	ldr	r2, [r4, #0]
 8005814:	3300      	adds	r3, #0
 8005816:	bf18      	it	ne
 8005818:	2301      	movne	r3, #1
 800581a:	0692      	lsls	r2, r2, #26
 800581c:	d42d      	bmi.n	800587a <_printf_common+0xbe>
 800581e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005822:	4639      	mov	r1, r7
 8005824:	4630      	mov	r0, r6
 8005826:	47c0      	blx	r8
 8005828:	3001      	adds	r0, #1
 800582a:	d020      	beq.n	800586e <_printf_common+0xb2>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	68e5      	ldr	r5, [r4, #12]
 8005830:	f8d9 2000 	ldr.w	r2, [r9]
 8005834:	f003 0306 	and.w	r3, r3, #6
 8005838:	2b04      	cmp	r3, #4
 800583a:	bf08      	it	eq
 800583c:	1aad      	subeq	r5, r5, r2
 800583e:	68a3      	ldr	r3, [r4, #8]
 8005840:	6922      	ldr	r2, [r4, #16]
 8005842:	bf0c      	ite	eq
 8005844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005848:	2500      	movne	r5, #0
 800584a:	4293      	cmp	r3, r2
 800584c:	bfc4      	itt	gt
 800584e:	1a9b      	subgt	r3, r3, r2
 8005850:	18ed      	addgt	r5, r5, r3
 8005852:	f04f 0900 	mov.w	r9, #0
 8005856:	341a      	adds	r4, #26
 8005858:	454d      	cmp	r5, r9
 800585a:	d11a      	bne.n	8005892 <_printf_common+0xd6>
 800585c:	2000      	movs	r0, #0
 800585e:	e008      	b.n	8005872 <_printf_common+0xb6>
 8005860:	2301      	movs	r3, #1
 8005862:	4652      	mov	r2, sl
 8005864:	4639      	mov	r1, r7
 8005866:	4630      	mov	r0, r6
 8005868:	47c0      	blx	r8
 800586a:	3001      	adds	r0, #1
 800586c:	d103      	bne.n	8005876 <_printf_common+0xba>
 800586e:	f04f 30ff 	mov.w	r0, #4294967295
 8005872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005876:	3501      	adds	r5, #1
 8005878:	e7c3      	b.n	8005802 <_printf_common+0x46>
 800587a:	18e1      	adds	r1, r4, r3
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	2030      	movs	r0, #48	; 0x30
 8005880:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005884:	4422      	add	r2, r4
 8005886:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800588a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800588e:	3302      	adds	r3, #2
 8005890:	e7c5      	b.n	800581e <_printf_common+0x62>
 8005892:	2301      	movs	r3, #1
 8005894:	4622      	mov	r2, r4
 8005896:	4639      	mov	r1, r7
 8005898:	4630      	mov	r0, r6
 800589a:	47c0      	blx	r8
 800589c:	3001      	adds	r0, #1
 800589e:	d0e6      	beq.n	800586e <_printf_common+0xb2>
 80058a0:	f109 0901 	add.w	r9, r9, #1
 80058a4:	e7d8      	b.n	8005858 <_printf_common+0x9c>
	...

080058a8 <_printf_i>:
 80058a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80058b0:	460c      	mov	r4, r1
 80058b2:	7e09      	ldrb	r1, [r1, #24]
 80058b4:	b085      	sub	sp, #20
 80058b6:	296e      	cmp	r1, #110	; 0x6e
 80058b8:	4617      	mov	r7, r2
 80058ba:	4606      	mov	r6, r0
 80058bc:	4698      	mov	r8, r3
 80058be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058c0:	f000 80b3 	beq.w	8005a2a <_printf_i+0x182>
 80058c4:	d822      	bhi.n	800590c <_printf_i+0x64>
 80058c6:	2963      	cmp	r1, #99	; 0x63
 80058c8:	d036      	beq.n	8005938 <_printf_i+0x90>
 80058ca:	d80a      	bhi.n	80058e2 <_printf_i+0x3a>
 80058cc:	2900      	cmp	r1, #0
 80058ce:	f000 80b9 	beq.w	8005a44 <_printf_i+0x19c>
 80058d2:	2958      	cmp	r1, #88	; 0x58
 80058d4:	f000 8083 	beq.w	80059de <_printf_i+0x136>
 80058d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80058e0:	e032      	b.n	8005948 <_printf_i+0xa0>
 80058e2:	2964      	cmp	r1, #100	; 0x64
 80058e4:	d001      	beq.n	80058ea <_printf_i+0x42>
 80058e6:	2969      	cmp	r1, #105	; 0x69
 80058e8:	d1f6      	bne.n	80058d8 <_printf_i+0x30>
 80058ea:	6820      	ldr	r0, [r4, #0]
 80058ec:	6813      	ldr	r3, [r2, #0]
 80058ee:	0605      	lsls	r5, r0, #24
 80058f0:	f103 0104 	add.w	r1, r3, #4
 80058f4:	d52a      	bpl.n	800594c <_printf_i+0xa4>
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6011      	str	r1, [r2, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	da03      	bge.n	8005906 <_printf_i+0x5e>
 80058fe:	222d      	movs	r2, #45	; 0x2d
 8005900:	425b      	negs	r3, r3
 8005902:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005906:	486f      	ldr	r0, [pc, #444]	; (8005ac4 <_printf_i+0x21c>)
 8005908:	220a      	movs	r2, #10
 800590a:	e039      	b.n	8005980 <_printf_i+0xd8>
 800590c:	2973      	cmp	r1, #115	; 0x73
 800590e:	f000 809d 	beq.w	8005a4c <_printf_i+0x1a4>
 8005912:	d808      	bhi.n	8005926 <_printf_i+0x7e>
 8005914:	296f      	cmp	r1, #111	; 0x6f
 8005916:	d020      	beq.n	800595a <_printf_i+0xb2>
 8005918:	2970      	cmp	r1, #112	; 0x70
 800591a:	d1dd      	bne.n	80058d8 <_printf_i+0x30>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	f043 0320 	orr.w	r3, r3, #32
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	e003      	b.n	800592e <_printf_i+0x86>
 8005926:	2975      	cmp	r1, #117	; 0x75
 8005928:	d017      	beq.n	800595a <_printf_i+0xb2>
 800592a:	2978      	cmp	r1, #120	; 0x78
 800592c:	d1d4      	bne.n	80058d8 <_printf_i+0x30>
 800592e:	2378      	movs	r3, #120	; 0x78
 8005930:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005934:	4864      	ldr	r0, [pc, #400]	; (8005ac8 <_printf_i+0x220>)
 8005936:	e055      	b.n	80059e4 <_printf_i+0x13c>
 8005938:	6813      	ldr	r3, [r2, #0]
 800593a:	1d19      	adds	r1, r3, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6011      	str	r1, [r2, #0]
 8005940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005948:	2301      	movs	r3, #1
 800594a:	e08c      	b.n	8005a66 <_printf_i+0x1be>
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6011      	str	r1, [r2, #0]
 8005950:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005954:	bf18      	it	ne
 8005956:	b21b      	sxthne	r3, r3
 8005958:	e7cf      	b.n	80058fa <_printf_i+0x52>
 800595a:	6813      	ldr	r3, [r2, #0]
 800595c:	6825      	ldr	r5, [r4, #0]
 800595e:	1d18      	adds	r0, r3, #4
 8005960:	6010      	str	r0, [r2, #0]
 8005962:	0628      	lsls	r0, r5, #24
 8005964:	d501      	bpl.n	800596a <_printf_i+0xc2>
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	e002      	b.n	8005970 <_printf_i+0xc8>
 800596a:	0668      	lsls	r0, r5, #25
 800596c:	d5fb      	bpl.n	8005966 <_printf_i+0xbe>
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	4854      	ldr	r0, [pc, #336]	; (8005ac4 <_printf_i+0x21c>)
 8005972:	296f      	cmp	r1, #111	; 0x6f
 8005974:	bf14      	ite	ne
 8005976:	220a      	movne	r2, #10
 8005978:	2208      	moveq	r2, #8
 800597a:	2100      	movs	r1, #0
 800597c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005980:	6865      	ldr	r5, [r4, #4]
 8005982:	60a5      	str	r5, [r4, #8]
 8005984:	2d00      	cmp	r5, #0
 8005986:	f2c0 8095 	blt.w	8005ab4 <_printf_i+0x20c>
 800598a:	6821      	ldr	r1, [r4, #0]
 800598c:	f021 0104 	bic.w	r1, r1, #4
 8005990:	6021      	str	r1, [r4, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d13d      	bne.n	8005a12 <_printf_i+0x16a>
 8005996:	2d00      	cmp	r5, #0
 8005998:	f040 808e 	bne.w	8005ab8 <_printf_i+0x210>
 800599c:	4665      	mov	r5, ip
 800599e:	2a08      	cmp	r2, #8
 80059a0:	d10b      	bne.n	80059ba <_printf_i+0x112>
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	07db      	lsls	r3, r3, #31
 80059a6:	d508      	bpl.n	80059ba <_printf_i+0x112>
 80059a8:	6923      	ldr	r3, [r4, #16]
 80059aa:	6862      	ldr	r2, [r4, #4]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	bfde      	ittt	le
 80059b0:	2330      	movle	r3, #48	; 0x30
 80059b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059ba:	ebac 0305 	sub.w	r3, ip, r5
 80059be:	6123      	str	r3, [r4, #16]
 80059c0:	f8cd 8000 	str.w	r8, [sp]
 80059c4:	463b      	mov	r3, r7
 80059c6:	aa03      	add	r2, sp, #12
 80059c8:	4621      	mov	r1, r4
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7ff fef6 	bl	80057bc <_printf_common>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d14d      	bne.n	8005a70 <_printf_i+0x1c8>
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
 80059d8:	b005      	add	sp, #20
 80059da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059de:	4839      	ldr	r0, [pc, #228]	; (8005ac4 <_printf_i+0x21c>)
 80059e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80059e4:	6813      	ldr	r3, [r2, #0]
 80059e6:	6821      	ldr	r1, [r4, #0]
 80059e8:	1d1d      	adds	r5, r3, #4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6015      	str	r5, [r2, #0]
 80059ee:	060a      	lsls	r2, r1, #24
 80059f0:	d50b      	bpl.n	8005a0a <_printf_i+0x162>
 80059f2:	07ca      	lsls	r2, r1, #31
 80059f4:	bf44      	itt	mi
 80059f6:	f041 0120 	orrmi.w	r1, r1, #32
 80059fa:	6021      	strmi	r1, [r4, #0]
 80059fc:	b91b      	cbnz	r3, 8005a06 <_printf_i+0x15e>
 80059fe:	6822      	ldr	r2, [r4, #0]
 8005a00:	f022 0220 	bic.w	r2, r2, #32
 8005a04:	6022      	str	r2, [r4, #0]
 8005a06:	2210      	movs	r2, #16
 8005a08:	e7b7      	b.n	800597a <_printf_i+0xd2>
 8005a0a:	064d      	lsls	r5, r1, #25
 8005a0c:	bf48      	it	mi
 8005a0e:	b29b      	uxthmi	r3, r3
 8005a10:	e7ef      	b.n	80059f2 <_printf_i+0x14a>
 8005a12:	4665      	mov	r5, ip
 8005a14:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a18:	fb02 3311 	mls	r3, r2, r1, r3
 8005a1c:	5cc3      	ldrb	r3, [r0, r3]
 8005a1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a22:	460b      	mov	r3, r1
 8005a24:	2900      	cmp	r1, #0
 8005a26:	d1f5      	bne.n	8005a14 <_printf_i+0x16c>
 8005a28:	e7b9      	b.n	800599e <_printf_i+0xf6>
 8005a2a:	6813      	ldr	r3, [r2, #0]
 8005a2c:	6825      	ldr	r5, [r4, #0]
 8005a2e:	6961      	ldr	r1, [r4, #20]
 8005a30:	1d18      	adds	r0, r3, #4
 8005a32:	6010      	str	r0, [r2, #0]
 8005a34:	0628      	lsls	r0, r5, #24
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	d501      	bpl.n	8005a3e <_printf_i+0x196>
 8005a3a:	6019      	str	r1, [r3, #0]
 8005a3c:	e002      	b.n	8005a44 <_printf_i+0x19c>
 8005a3e:	066a      	lsls	r2, r5, #25
 8005a40:	d5fb      	bpl.n	8005a3a <_printf_i+0x192>
 8005a42:	8019      	strh	r1, [r3, #0]
 8005a44:	2300      	movs	r3, #0
 8005a46:	6123      	str	r3, [r4, #16]
 8005a48:	4665      	mov	r5, ip
 8005a4a:	e7b9      	b.n	80059c0 <_printf_i+0x118>
 8005a4c:	6813      	ldr	r3, [r2, #0]
 8005a4e:	1d19      	adds	r1, r3, #4
 8005a50:	6011      	str	r1, [r2, #0]
 8005a52:	681d      	ldr	r5, [r3, #0]
 8005a54:	6862      	ldr	r2, [r4, #4]
 8005a56:	2100      	movs	r1, #0
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f7fa fbe1 	bl	8000220 <memchr>
 8005a5e:	b108      	cbz	r0, 8005a64 <_printf_i+0x1bc>
 8005a60:	1b40      	subs	r0, r0, r5
 8005a62:	6060      	str	r0, [r4, #4]
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	6123      	str	r3, [r4, #16]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a6e:	e7a7      	b.n	80059c0 <_printf_i+0x118>
 8005a70:	6923      	ldr	r3, [r4, #16]
 8005a72:	462a      	mov	r2, r5
 8005a74:	4639      	mov	r1, r7
 8005a76:	4630      	mov	r0, r6
 8005a78:	47c0      	blx	r8
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	d0aa      	beq.n	80059d4 <_printf_i+0x12c>
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	079b      	lsls	r3, r3, #30
 8005a82:	d413      	bmi.n	8005aac <_printf_i+0x204>
 8005a84:	68e0      	ldr	r0, [r4, #12]
 8005a86:	9b03      	ldr	r3, [sp, #12]
 8005a88:	4298      	cmp	r0, r3
 8005a8a:	bfb8      	it	lt
 8005a8c:	4618      	movlt	r0, r3
 8005a8e:	e7a3      	b.n	80059d8 <_printf_i+0x130>
 8005a90:	2301      	movs	r3, #1
 8005a92:	464a      	mov	r2, r9
 8005a94:	4639      	mov	r1, r7
 8005a96:	4630      	mov	r0, r6
 8005a98:	47c0      	blx	r8
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d09a      	beq.n	80059d4 <_printf_i+0x12c>
 8005a9e:	3501      	adds	r5, #1
 8005aa0:	68e3      	ldr	r3, [r4, #12]
 8005aa2:	9a03      	ldr	r2, [sp, #12]
 8005aa4:	1a9b      	subs	r3, r3, r2
 8005aa6:	42ab      	cmp	r3, r5
 8005aa8:	dcf2      	bgt.n	8005a90 <_printf_i+0x1e8>
 8005aaa:	e7eb      	b.n	8005a84 <_printf_i+0x1dc>
 8005aac:	2500      	movs	r5, #0
 8005aae:	f104 0919 	add.w	r9, r4, #25
 8005ab2:	e7f5      	b.n	8005aa0 <_printf_i+0x1f8>
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1ac      	bne.n	8005a12 <_printf_i+0x16a>
 8005ab8:	7803      	ldrb	r3, [r0, #0]
 8005aba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005abe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac2:	e76c      	b.n	800599e <_printf_i+0xf6>
 8005ac4:	08006161 	.word	0x08006161
 8005ac8:	08006172 	.word	0x08006172

08005acc <memmove>:
 8005acc:	4288      	cmp	r0, r1
 8005ace:	b510      	push	{r4, lr}
 8005ad0:	eb01 0302 	add.w	r3, r1, r2
 8005ad4:	d807      	bhi.n	8005ae6 <memmove+0x1a>
 8005ad6:	1e42      	subs	r2, r0, #1
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	d00a      	beq.n	8005af2 <memmove+0x26>
 8005adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ae0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005ae4:	e7f8      	b.n	8005ad8 <memmove+0xc>
 8005ae6:	4283      	cmp	r3, r0
 8005ae8:	d9f5      	bls.n	8005ad6 <memmove+0xa>
 8005aea:	1881      	adds	r1, r0, r2
 8005aec:	1ad2      	subs	r2, r2, r3
 8005aee:	42d3      	cmn	r3, r2
 8005af0:	d100      	bne.n	8005af4 <memmove+0x28>
 8005af2:	bd10      	pop	{r4, pc}
 8005af4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005af8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005afc:	e7f7      	b.n	8005aee <memmove+0x22>
	...

08005b00 <_free_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4605      	mov	r5, r0
 8005b04:	2900      	cmp	r1, #0
 8005b06:	d045      	beq.n	8005b94 <_free_r+0x94>
 8005b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b0c:	1f0c      	subs	r4, r1, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bfb8      	it	lt
 8005b12:	18e4      	addlt	r4, r4, r3
 8005b14:	f000 f8d2 	bl	8005cbc <__malloc_lock>
 8005b18:	4a1f      	ldr	r2, [pc, #124]	; (8005b98 <_free_r+0x98>)
 8005b1a:	6813      	ldr	r3, [r2, #0]
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	b933      	cbnz	r3, 8005b2e <_free_r+0x2e>
 8005b20:	6063      	str	r3, [r4, #4]
 8005b22:	6014      	str	r4, [r2, #0]
 8005b24:	4628      	mov	r0, r5
 8005b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b2a:	f000 b8c8 	b.w	8005cbe <__malloc_unlock>
 8005b2e:	42a3      	cmp	r3, r4
 8005b30:	d90c      	bls.n	8005b4c <_free_r+0x4c>
 8005b32:	6821      	ldr	r1, [r4, #0]
 8005b34:	1862      	adds	r2, r4, r1
 8005b36:	4293      	cmp	r3, r2
 8005b38:	bf04      	itt	eq
 8005b3a:	681a      	ldreq	r2, [r3, #0]
 8005b3c:	685b      	ldreq	r3, [r3, #4]
 8005b3e:	6063      	str	r3, [r4, #4]
 8005b40:	bf04      	itt	eq
 8005b42:	1852      	addeq	r2, r2, r1
 8005b44:	6022      	streq	r2, [r4, #0]
 8005b46:	6004      	str	r4, [r0, #0]
 8005b48:	e7ec      	b.n	8005b24 <_free_r+0x24>
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	b10a      	cbz	r2, 8005b54 <_free_r+0x54>
 8005b50:	42a2      	cmp	r2, r4
 8005b52:	d9fa      	bls.n	8005b4a <_free_r+0x4a>
 8005b54:	6819      	ldr	r1, [r3, #0]
 8005b56:	1858      	adds	r0, r3, r1
 8005b58:	42a0      	cmp	r0, r4
 8005b5a:	d10b      	bne.n	8005b74 <_free_r+0x74>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	4401      	add	r1, r0
 8005b60:	1858      	adds	r0, r3, r1
 8005b62:	4282      	cmp	r2, r0
 8005b64:	6019      	str	r1, [r3, #0]
 8005b66:	d1dd      	bne.n	8005b24 <_free_r+0x24>
 8005b68:	6810      	ldr	r0, [r2, #0]
 8005b6a:	6852      	ldr	r2, [r2, #4]
 8005b6c:	605a      	str	r2, [r3, #4]
 8005b6e:	4401      	add	r1, r0
 8005b70:	6019      	str	r1, [r3, #0]
 8005b72:	e7d7      	b.n	8005b24 <_free_r+0x24>
 8005b74:	d902      	bls.n	8005b7c <_free_r+0x7c>
 8005b76:	230c      	movs	r3, #12
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	e7d3      	b.n	8005b24 <_free_r+0x24>
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	1821      	adds	r1, r4, r0
 8005b80:	428a      	cmp	r2, r1
 8005b82:	bf04      	itt	eq
 8005b84:	6811      	ldreq	r1, [r2, #0]
 8005b86:	6852      	ldreq	r2, [r2, #4]
 8005b88:	6062      	str	r2, [r4, #4]
 8005b8a:	bf04      	itt	eq
 8005b8c:	1809      	addeq	r1, r1, r0
 8005b8e:	6021      	streq	r1, [r4, #0]
 8005b90:	605c      	str	r4, [r3, #4]
 8005b92:	e7c7      	b.n	8005b24 <_free_r+0x24>
 8005b94:	bd38      	pop	{r3, r4, r5, pc}
 8005b96:	bf00      	nop
 8005b98:	20000134 	.word	0x20000134

08005b9c <_malloc_r>:
 8005b9c:	b570      	push	{r4, r5, r6, lr}
 8005b9e:	1ccd      	adds	r5, r1, #3
 8005ba0:	f025 0503 	bic.w	r5, r5, #3
 8005ba4:	3508      	adds	r5, #8
 8005ba6:	2d0c      	cmp	r5, #12
 8005ba8:	bf38      	it	cc
 8005baa:	250c      	movcc	r5, #12
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	4606      	mov	r6, r0
 8005bb0:	db01      	blt.n	8005bb6 <_malloc_r+0x1a>
 8005bb2:	42a9      	cmp	r1, r5
 8005bb4:	d903      	bls.n	8005bbe <_malloc_r+0x22>
 8005bb6:	230c      	movs	r3, #12
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	2000      	movs	r0, #0
 8005bbc:	bd70      	pop	{r4, r5, r6, pc}
 8005bbe:	f000 f87d 	bl	8005cbc <__malloc_lock>
 8005bc2:	4a21      	ldr	r2, [pc, #132]	; (8005c48 <_malloc_r+0xac>)
 8005bc4:	6814      	ldr	r4, [r2, #0]
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	b991      	cbnz	r1, 8005bf0 <_malloc_r+0x54>
 8005bca:	4c20      	ldr	r4, [pc, #128]	; (8005c4c <_malloc_r+0xb0>)
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	b91b      	cbnz	r3, 8005bd8 <_malloc_r+0x3c>
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f000 f863 	bl	8005c9c <_sbrk_r>
 8005bd6:	6020      	str	r0, [r4, #0]
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f000 f85e 	bl	8005c9c <_sbrk_r>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d124      	bne.n	8005c2e <_malloc_r+0x92>
 8005be4:	230c      	movs	r3, #12
 8005be6:	6033      	str	r3, [r6, #0]
 8005be8:	4630      	mov	r0, r6
 8005bea:	f000 f868 	bl	8005cbe <__malloc_unlock>
 8005bee:	e7e4      	b.n	8005bba <_malloc_r+0x1e>
 8005bf0:	680b      	ldr	r3, [r1, #0]
 8005bf2:	1b5b      	subs	r3, r3, r5
 8005bf4:	d418      	bmi.n	8005c28 <_malloc_r+0x8c>
 8005bf6:	2b0b      	cmp	r3, #11
 8005bf8:	d90f      	bls.n	8005c1a <_malloc_r+0x7e>
 8005bfa:	600b      	str	r3, [r1, #0]
 8005bfc:	50cd      	str	r5, [r1, r3]
 8005bfe:	18cc      	adds	r4, r1, r3
 8005c00:	4630      	mov	r0, r6
 8005c02:	f000 f85c 	bl	8005cbe <__malloc_unlock>
 8005c06:	f104 000b 	add.w	r0, r4, #11
 8005c0a:	1d23      	adds	r3, r4, #4
 8005c0c:	f020 0007 	bic.w	r0, r0, #7
 8005c10:	1ac3      	subs	r3, r0, r3
 8005c12:	d0d3      	beq.n	8005bbc <_malloc_r+0x20>
 8005c14:	425a      	negs	r2, r3
 8005c16:	50e2      	str	r2, [r4, r3]
 8005c18:	e7d0      	b.n	8005bbc <_malloc_r+0x20>
 8005c1a:	428c      	cmp	r4, r1
 8005c1c:	684b      	ldr	r3, [r1, #4]
 8005c1e:	bf16      	itet	ne
 8005c20:	6063      	strne	r3, [r4, #4]
 8005c22:	6013      	streq	r3, [r2, #0]
 8005c24:	460c      	movne	r4, r1
 8005c26:	e7eb      	b.n	8005c00 <_malloc_r+0x64>
 8005c28:	460c      	mov	r4, r1
 8005c2a:	6849      	ldr	r1, [r1, #4]
 8005c2c:	e7cc      	b.n	8005bc8 <_malloc_r+0x2c>
 8005c2e:	1cc4      	adds	r4, r0, #3
 8005c30:	f024 0403 	bic.w	r4, r4, #3
 8005c34:	42a0      	cmp	r0, r4
 8005c36:	d005      	beq.n	8005c44 <_malloc_r+0xa8>
 8005c38:	1a21      	subs	r1, r4, r0
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f000 f82e 	bl	8005c9c <_sbrk_r>
 8005c40:	3001      	adds	r0, #1
 8005c42:	d0cf      	beq.n	8005be4 <_malloc_r+0x48>
 8005c44:	6025      	str	r5, [r4, #0]
 8005c46:	e7db      	b.n	8005c00 <_malloc_r+0x64>
 8005c48:	20000134 	.word	0x20000134
 8005c4c:	20000138 	.word	0x20000138

08005c50 <_realloc_r>:
 8005c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c52:	4607      	mov	r7, r0
 8005c54:	4614      	mov	r4, r2
 8005c56:	460e      	mov	r6, r1
 8005c58:	b921      	cbnz	r1, 8005c64 <_realloc_r+0x14>
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c60:	f7ff bf9c 	b.w	8005b9c <_malloc_r>
 8005c64:	b922      	cbnz	r2, 8005c70 <_realloc_r+0x20>
 8005c66:	f7ff ff4b 	bl	8005b00 <_free_r>
 8005c6a:	4625      	mov	r5, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c70:	f000 f826 	bl	8005cc0 <_malloc_usable_size_r>
 8005c74:	42a0      	cmp	r0, r4
 8005c76:	d20f      	bcs.n	8005c98 <_realloc_r+0x48>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	f7ff ff8e 	bl	8005b9c <_malloc_r>
 8005c80:	4605      	mov	r5, r0
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d0f2      	beq.n	8005c6c <_realloc_r+0x1c>
 8005c86:	4631      	mov	r1, r6
 8005c88:	4622      	mov	r2, r4
 8005c8a:	f7ff fc11 	bl	80054b0 <memcpy>
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4638      	mov	r0, r7
 8005c92:	f7ff ff35 	bl	8005b00 <_free_r>
 8005c96:	e7e9      	b.n	8005c6c <_realloc_r+0x1c>
 8005c98:	4635      	mov	r5, r6
 8005c9a:	e7e7      	b.n	8005c6c <_realloc_r+0x1c>

08005c9c <_sbrk_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4c06      	ldr	r4, [pc, #24]	; (8005cb8 <_sbrk_r+0x1c>)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	f7ff fafa 	bl	80052a0 <_sbrk>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_sbrk_r+0x1a>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_sbrk_r+0x1a>
 8005cb4:	602b      	str	r3, [r5, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	200002fc 	.word	0x200002fc

08005cbc <__malloc_lock>:
 8005cbc:	4770      	bx	lr

08005cbe <__malloc_unlock>:
 8005cbe:	4770      	bx	lr

08005cc0 <_malloc_usable_size_r>:
 8005cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cc4:	1f18      	subs	r0, r3, #4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bfbc      	itt	lt
 8005cca:	580b      	ldrlt	r3, [r1, r0]
 8005ccc:	18c0      	addlt	r0, r0, r3
 8005cce:	4770      	bx	lr

08005cd0 <_init>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr

08005cdc <_fini>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr
