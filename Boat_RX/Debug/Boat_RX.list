
Boat_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004694  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d08  08004d08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d10  08004d10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d10  08004d10  00014d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000070  08004d88  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08004d88  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b468  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d04  00000000  00000000  0002b508  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000970  00000000  00000000  0002d210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000868  00000000  00000000  0002db80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021fcd  00000000  00000000  0002e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009139  00000000  00000000  000503b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca34d  00000000  00000000  000594ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012383b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002824  00000000  00000000  001238b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800484c 	.word	0x0800484c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800484c 	.word	0x0800484c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_Init+0x40>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <HAL_Init+0x40>)
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x40>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <HAL_Init+0x40>)
 80005d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x40>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x40>)
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f92f 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f003 fbbc 	bl	8003d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023c00 	.word	0x40023c00

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f939 	bl	800089a <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 f90f 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000008 	.word	0x20000008
 800065c:	20000004 	.word	0x20000004
 8000660:	20000000 	.word	0x20000000

08000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x20>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x24>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_IncTick+0x24>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000004 	.word	0x20000004
 8000688:	20000148 	.word	0x20000148

0800068c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GetTick+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000148 	.word	0x20000148

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006ac:	f7ff ffee 	bl	800068c <HAL_GetTick>
 80006b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006bc:	d005      	beq.n	80006ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_Delay+0x40>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ca:	bf00      	nop
 80006cc:	f7ff ffde 	bl	800068c <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d8f7      	bhi.n	80006cc <HAL_Delay+0x28>
  {
  }
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000004 	.word	0x20000004

080006e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	60d3      	str	r3, [r2, #12]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <__NVIC_GetPriorityGrouping+0x18>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	f003 0307 	and.w	r3, r3, #7
}
 800073e:	4618      	mov	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff47 	bl	80006e8 <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff5c 	bl	8000730 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff8e 	bl	80007a0 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ffb0 	bl	8000808 <SysTick_Config>
 80008a8:	4603      	mov	r3, r0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
 80008ce:	e165      	b.n	8000b9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008d0:	2201      	movs	r2, #1
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	f040 8154 	bne.w	8000b96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d00b      	beq.n	800090e <HAL_GPIO_Init+0x5a>
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d007      	beq.n	800090e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000902:	2b11      	cmp	r3, #17
 8000904:	d003      	beq.n	800090e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b12      	cmp	r3, #18
 800090c:	d130      	bne.n	8000970 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	2203      	movs	r2, #3
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	4013      	ands	r3, r2
 8000924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4313      	orrs	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000944:	2201      	movs	r2, #1
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	091b      	lsrs	r3, r3, #4
 800095a:	f003 0201 	and.w	r2, r3, #1
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4313      	orrs	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2203      	movs	r2, #3
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	4013      	ands	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	4313      	orrs	r3, r2
 8000998:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d003      	beq.n	80009b0 <HAL_GPIO_Init+0xfc>
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b12      	cmp	r3, #18
 80009ae:	d123      	bne.n	80009f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	08da      	lsrs	r2, r3, #3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3208      	adds	r2, #8
 80009b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	f003 0307 	and.w	r3, r3, #7
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	220f      	movs	r2, #15
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	4013      	ands	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	691a      	ldr	r2, [r3, #16]
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	08da      	lsrs	r2, r3, #3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3208      	adds	r2, #8
 80009f2:	69b9      	ldr	r1, [r7, #24]
 80009f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2203      	movs	r2, #3
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 0203 	and.w	r2, r3, #3
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	f000 80ae 	beq.w	8000b96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b5c      	ldr	r3, [pc, #368]	; (8000bb0 <HAL_GPIO_Init+0x2fc>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a5b      	ldr	r2, [pc, #364]	; (8000bb0 <HAL_GPIO_Init+0x2fc>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b59      	ldr	r3, [pc, #356]	; (8000bb0 <HAL_GPIO_Init+0x2fc>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a56:	4a57      	ldr	r2, [pc, #348]	; (8000bb4 <HAL_GPIO_Init+0x300>)
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f003 0303 	and.w	r3, r3, #3
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	220f      	movs	r2, #15
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	4013      	ands	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4e      	ldr	r2, [pc, #312]	; (8000bb8 <HAL_GPIO_Init+0x304>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d025      	beq.n	8000ace <HAL_GPIO_Init+0x21a>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a4d      	ldr	r2, [pc, #308]	; (8000bbc <HAL_GPIO_Init+0x308>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d01f      	beq.n	8000aca <HAL_GPIO_Init+0x216>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	; (8000bc0 <HAL_GPIO_Init+0x30c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d019      	beq.n	8000ac6 <HAL_GPIO_Init+0x212>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4b      	ldr	r2, [pc, #300]	; (8000bc4 <HAL_GPIO_Init+0x310>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d013      	beq.n	8000ac2 <HAL_GPIO_Init+0x20e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4a      	ldr	r2, [pc, #296]	; (8000bc8 <HAL_GPIO_Init+0x314>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d00d      	beq.n	8000abe <HAL_GPIO_Init+0x20a>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a49      	ldr	r2, [pc, #292]	; (8000bcc <HAL_GPIO_Init+0x318>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d007      	beq.n	8000aba <HAL_GPIO_Init+0x206>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a48      	ldr	r2, [pc, #288]	; (8000bd0 <HAL_GPIO_Init+0x31c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d101      	bne.n	8000ab6 <HAL_GPIO_Init+0x202>
 8000ab2:	2306      	movs	r3, #6
 8000ab4:	e00c      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	e00a      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000aba:	2305      	movs	r3, #5
 8000abc:	e008      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000abe:	2304      	movs	r3, #4
 8000ac0:	e006      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	e004      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	e002      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000aca:	2301      	movs	r3, #1
 8000acc:	e000      	b.n	8000ad0 <HAL_GPIO_Init+0x21c>
 8000ace:	2300      	movs	r3, #0
 8000ad0:	69fa      	ldr	r2, [r7, #28]
 8000ad2:	f002 0203 	and.w	r2, r2, #3
 8000ad6:	0092      	lsls	r2, r2, #2
 8000ad8:	4093      	lsls	r3, r2
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ae0:	4934      	ldr	r1, [pc, #208]	; (8000bb4 <HAL_GPIO_Init+0x300>)
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aee:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	4013      	ands	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b12:	4a30      	ldr	r2, [pc, #192]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b18:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4013      	ands	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b3c:	4a25      	ldr	r2, [pc, #148]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b42:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b66:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b90:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	2b0f      	cmp	r3, #15
 8000ba0:	f67f ae96 	bls.w	80008d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3724      	adds	r7, #36	; 0x24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40013800 	.word	0x40013800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020c00 	.word	0x40020c00
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40021400 	.word	0x40021400
 8000bd0:	40021800 	.word	0x40021800
 8000bd4:	40013c00 	.word	0x40013c00

08000bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
 8000be4:	4613      	mov	r3, r2
 8000be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000be8:	787b      	ldrb	r3, [r7, #1]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bee:	887a      	ldrh	r2, [r7, #2]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bf4:	e003      	b.n	8000bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bf6:	887b      	ldrh	r3, [r7, #2]
 8000bf8:	041a      	lsls	r2, r3, #16
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	619a      	str	r2, [r3, #24]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e0cc      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c20:	4b68      	ldr	r3, [pc, #416]	; (8000dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f003 030f 	and.w	r3, r3, #15
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d90c      	bls.n	8000c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c2e:	4b65      	ldr	r3, [pc, #404]	; (8000dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c36:	4b63      	ldr	r3, [pc, #396]	; (8000dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d001      	beq.n	8000c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e0b8      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d020      	beq.n	8000c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d005      	beq.n	8000c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c60:	4b59      	ldr	r3, [pc, #356]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	4a58      	ldr	r2, [pc, #352]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0308 	and.w	r3, r3, #8
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d005      	beq.n	8000c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c78:	4b53      	ldr	r3, [pc, #332]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	4a52      	ldr	r2, [pc, #328]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c84:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	494d      	ldr	r1, [pc, #308]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000c92:	4313      	orrs	r3, r2
 8000c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d044      	beq.n	8000d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d107      	bne.n	8000cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000caa:	4b47      	ldr	r3, [pc, #284]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d119      	bne.n	8000cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e07f      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d003      	beq.n	8000cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d107      	bne.n	8000cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cca:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d109      	bne.n	8000cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e06f      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cda:	4b3b      	ldr	r3, [pc, #236]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e067      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f023 0203 	bic.w	r2, r3, #3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	4934      	ldr	r1, [pc, #208]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cfc:	f7ff fcc6 	bl	800068c <HAL_GetTick>
 8000d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d02:	e00a      	b.n	8000d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d04:	f7ff fcc2 	bl	800068c <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e04f      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 020c 	and.w	r2, r3, #12
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d1eb      	bne.n	8000d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 030f 	and.w	r3, r3, #15
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d20c      	bcs.n	8000d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d001      	beq.n	8000d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e032      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d008      	beq.n	8000d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	4916      	ldr	r1, [pc, #88]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d009      	beq.n	8000d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d92:	f000 f855 	bl	8000e40 <HAL_RCC_GetSysClockFreq>
 8000d96:	4601      	mov	r1, r0
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_RCC_ClockConfig+0x1c0>)
 8000da4:	5cd3      	ldrb	r3, [r2, r3]
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fc26 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	08004cbc 	.word	0x08004cbc
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000000 	.word	0x20000000

08000dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_RCC_GetHCLKFreq+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008

08000df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000df4:	f7ff fff0 	bl	8000dd8 <HAL_RCC_GetHCLKFreq>
 8000df8:	4601      	mov	r1, r0
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	0a9b      	lsrs	r3, r3, #10
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e06:	5cd3      	ldrb	r3, [r2, r3]
 8000e08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	08004ccc 	.word	0x08004ccc

08000e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e1c:	f7ff ffdc 	bl	8000dd8 <HAL_RCC_GetHCLKFreq>
 8000e20:	4601      	mov	r1, r0
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	0b5b      	lsrs	r3, r3, #13
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e2e:	5cd3      	ldrb	r3, [r2, r3]
 8000e30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	08004ccc 	.word	0x08004ccc

08000e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e5a:	4bc6      	ldr	r3, [pc, #792]	; (8001174 <HAL_RCC_GetSysClockFreq+0x334>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b0c      	cmp	r3, #12
 8000e64:	f200 817e 	bhi.w	8001164 <HAL_RCC_GetSysClockFreq+0x324>
 8000e68:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <HAL_RCC_GetSysClockFreq+0x30>)
 8000e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6e:	bf00      	nop
 8000e70:	08000ea5 	.word	0x08000ea5
 8000e74:	08001165 	.word	0x08001165
 8000e78:	08001165 	.word	0x08001165
 8000e7c:	08001165 	.word	0x08001165
 8000e80:	08000eab 	.word	0x08000eab
 8000e84:	08001165 	.word	0x08001165
 8000e88:	08001165 	.word	0x08001165
 8000e8c:	08001165 	.word	0x08001165
 8000e90:	08000eb1 	.word	0x08000eb1
 8000e94:	08001165 	.word	0x08001165
 8000e98:	08001165 	.word	0x08001165
 8000e9c:	08001165 	.word	0x08001165
 8000ea0:	0800100d 	.word	0x0800100d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ea4:	4bb4      	ldr	r3, [pc, #720]	; (8001178 <HAL_RCC_GetSysClockFreq+0x338>)
 8000ea6:	613b      	str	r3, [r7, #16]
       break;
 8000ea8:	e15f      	b.n	800116a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000eaa:	4bb4      	ldr	r3, [pc, #720]	; (800117c <HAL_RCC_GetSysClockFreq+0x33c>)
 8000eac:	613b      	str	r3, [r7, #16]
      break;
 8000eae:	e15c      	b.n	800116a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000eb0:	4bb0      	ldr	r3, [pc, #704]	; (8001174 <HAL_RCC_GetSysClockFreq+0x334>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000eb8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000eba:	4bae      	ldr	r3, [pc, #696]	; (8001174 <HAL_RCC_GetSysClockFreq+0x334>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d04a      	beq.n	8000f5c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ec6:	4bab      	ldr	r3, [pc, #684]	; (8001174 <HAL_RCC_GetSysClockFreq+0x334>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	099b      	lsrs	r3, r3, #6
 8000ecc:	f04f 0400 	mov.w	r4, #0
 8000ed0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	ea03 0501 	and.w	r5, r3, r1
 8000edc:	ea04 0602 	and.w	r6, r4, r2
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	4632      	mov	r2, r6
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	f04f 0400 	mov.w	r4, #0
 8000eec:	0154      	lsls	r4, r2, #5
 8000eee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ef2:	014b      	lsls	r3, r1, #5
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4622      	mov	r2, r4
 8000ef8:	1b49      	subs	r1, r1, r5
 8000efa:	eb62 0206 	sbc.w	r2, r2, r6
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	f04f 0400 	mov.w	r4, #0
 8000f06:	0194      	lsls	r4, r2, #6
 8000f08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f0c:	018b      	lsls	r3, r1, #6
 8000f0e:	1a5b      	subs	r3, r3, r1
 8000f10:	eb64 0402 	sbc.w	r4, r4, r2
 8000f14:	f04f 0100 	mov.w	r1, #0
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	00e2      	lsls	r2, r4, #3
 8000f1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f22:	00d9      	lsls	r1, r3, #3
 8000f24:	460b      	mov	r3, r1
 8000f26:	4614      	mov	r4, r2
 8000f28:	195b      	adds	r3, r3, r5
 8000f2a:	eb44 0406 	adc.w	r4, r4, r6
 8000f2e:	f04f 0100 	mov.w	r1, #0
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	0262      	lsls	r2, r4, #9
 8000f38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000f3c:	0259      	lsls	r1, r3, #9
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4614      	mov	r4, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	4621      	mov	r1, r4
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f04f 0400 	mov.w	r4, #0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4623      	mov	r3, r4
 8000f50:	f7ff f9b6 	bl	80002c0 <__aeabi_uldivmod>
 8000f54:	4603      	mov	r3, r0
 8000f56:	460c      	mov	r4, r1
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e049      	b.n	8000ff0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f5c:	4b85      	ldr	r3, [pc, #532]	; (8001174 <HAL_RCC_GetSysClockFreq+0x334>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	099b      	lsrs	r3, r3, #6
 8000f62:	f04f 0400 	mov.w	r4, #0
 8000f66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	ea03 0501 	and.w	r5, r3, r1
 8000f72:	ea04 0602 	and.w	r6, r4, r2
 8000f76:	4629      	mov	r1, r5
 8000f78:	4632      	mov	r2, r6
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	f04f 0400 	mov.w	r4, #0
 8000f82:	0154      	lsls	r4, r2, #5
 8000f84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f88:	014b      	lsls	r3, r1, #5
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4622      	mov	r2, r4
 8000f8e:	1b49      	subs	r1, r1, r5
 8000f90:	eb62 0206 	sbc.w	r2, r2, r6
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	f04f 0400 	mov.w	r4, #0
 8000f9c:	0194      	lsls	r4, r2, #6
 8000f9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000fa2:	018b      	lsls	r3, r1, #6
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	eb64 0402 	sbc.w	r4, r4, r2
 8000faa:	f04f 0100 	mov.w	r1, #0
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	00e2      	lsls	r2, r4, #3
 8000fb4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000fb8:	00d9      	lsls	r1, r3, #3
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4614      	mov	r4, r2
 8000fbe:	195b      	adds	r3, r3, r5
 8000fc0:	eb44 0406 	adc.w	r4, r4, r6
 8000fc4:	f04f 0100 	mov.w	r1, #0
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	02a2      	lsls	r2, r4, #10
 8000fce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000fd2:	0299      	lsls	r1, r3, #10
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4614      	mov	r4, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	4621      	mov	r1, r4
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f04f 0400 	mov.w	r4, #0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4623      	mov	r3, r4
 8000fe6:	f7ff f96b 	bl	80002c0 <__aeabi_uldivmod>
 8000fea:	4603      	mov	r3, r0
 8000fec:	460c      	mov	r4, r1
 8000fee:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000ff0:	4b60      	ldr	r3, [pc, #384]	; (8001174 <HAL_RCC_GetSysClockFreq+0x334>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	0c1b      	lsrs	r3, r3, #16
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	fbb2 f3f3 	udiv	r3, r2, r3
 8001008:	613b      	str	r3, [r7, #16]
      break;
 800100a:	e0ae      	b.n	800116a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800100c:	4b59      	ldr	r3, [pc, #356]	; (8001174 <HAL_RCC_GetSysClockFreq+0x334>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001014:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001016:	4b57      	ldr	r3, [pc, #348]	; (8001174 <HAL_RCC_GetSysClockFreq+0x334>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d04a      	beq.n	80010b8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001022:	4b54      	ldr	r3, [pc, #336]	; (8001174 <HAL_RCC_GetSysClockFreq+0x334>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	099b      	lsrs	r3, r3, #6
 8001028:	f04f 0400 	mov.w	r4, #0
 800102c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	ea03 0501 	and.w	r5, r3, r1
 8001038:	ea04 0602 	and.w	r6, r4, r2
 800103c:	4629      	mov	r1, r5
 800103e:	4632      	mov	r2, r6
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	f04f 0400 	mov.w	r4, #0
 8001048:	0154      	lsls	r4, r2, #5
 800104a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800104e:	014b      	lsls	r3, r1, #5
 8001050:	4619      	mov	r1, r3
 8001052:	4622      	mov	r2, r4
 8001054:	1b49      	subs	r1, r1, r5
 8001056:	eb62 0206 	sbc.w	r2, r2, r6
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	f04f 0400 	mov.w	r4, #0
 8001062:	0194      	lsls	r4, r2, #6
 8001064:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001068:	018b      	lsls	r3, r1, #6
 800106a:	1a5b      	subs	r3, r3, r1
 800106c:	eb64 0402 	sbc.w	r4, r4, r2
 8001070:	f04f 0100 	mov.w	r1, #0
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	00e2      	lsls	r2, r4, #3
 800107a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800107e:	00d9      	lsls	r1, r3, #3
 8001080:	460b      	mov	r3, r1
 8001082:	4614      	mov	r4, r2
 8001084:	195b      	adds	r3, r3, r5
 8001086:	eb44 0406 	adc.w	r4, r4, r6
 800108a:	f04f 0100 	mov.w	r1, #0
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	0262      	lsls	r2, r4, #9
 8001094:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001098:	0259      	lsls	r1, r3, #9
 800109a:	460b      	mov	r3, r1
 800109c:	4614      	mov	r4, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	4621      	mov	r1, r4
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f04f 0400 	mov.w	r4, #0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4623      	mov	r3, r4
 80010ac:	f7ff f908 	bl	80002c0 <__aeabi_uldivmod>
 80010b0:	4603      	mov	r3, r0
 80010b2:	460c      	mov	r4, r1
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e049      	b.n	800114c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010b8:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <HAL_RCC_GetSysClockFreq+0x334>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	099b      	lsrs	r3, r3, #6
 80010be:	f04f 0400 	mov.w	r4, #0
 80010c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	ea03 0501 	and.w	r5, r3, r1
 80010ce:	ea04 0602 	and.w	r6, r4, r2
 80010d2:	4629      	mov	r1, r5
 80010d4:	4632      	mov	r2, r6
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	f04f 0400 	mov.w	r4, #0
 80010de:	0154      	lsls	r4, r2, #5
 80010e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010e4:	014b      	lsls	r3, r1, #5
 80010e6:	4619      	mov	r1, r3
 80010e8:	4622      	mov	r2, r4
 80010ea:	1b49      	subs	r1, r1, r5
 80010ec:	eb62 0206 	sbc.w	r2, r2, r6
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	f04f 0400 	mov.w	r4, #0
 80010f8:	0194      	lsls	r4, r2, #6
 80010fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80010fe:	018b      	lsls	r3, r1, #6
 8001100:	1a5b      	subs	r3, r3, r1
 8001102:	eb64 0402 	sbc.w	r4, r4, r2
 8001106:	f04f 0100 	mov.w	r1, #0
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	00e2      	lsls	r2, r4, #3
 8001110:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001114:	00d9      	lsls	r1, r3, #3
 8001116:	460b      	mov	r3, r1
 8001118:	4614      	mov	r4, r2
 800111a:	195b      	adds	r3, r3, r5
 800111c:	eb44 0406 	adc.w	r4, r4, r6
 8001120:	f04f 0100 	mov.w	r1, #0
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	02a2      	lsls	r2, r4, #10
 800112a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800112e:	0299      	lsls	r1, r3, #10
 8001130:	460b      	mov	r3, r1
 8001132:	4614      	mov	r4, r2
 8001134:	4618      	mov	r0, r3
 8001136:	4621      	mov	r1, r4
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f04f 0400 	mov.w	r4, #0
 800113e:	461a      	mov	r2, r3
 8001140:	4623      	mov	r3, r4
 8001142:	f7ff f8bd 	bl	80002c0 <__aeabi_uldivmod>
 8001146:	4603      	mov	r3, r0
 8001148:	460c      	mov	r4, r1
 800114a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_RCC_GetSysClockFreq+0x334>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	0f1b      	lsrs	r3, r3, #28
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001160:	613b      	str	r3, [r7, #16]
      break;
 8001162:	e002      	b.n	800116a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <HAL_RCC_GetSysClockFreq+0x338>)
 8001166:	613b      	str	r3, [r7, #16]
      break;
 8001168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800116a:	693b      	ldr	r3, [r7, #16]
}
 800116c:	4618      	mov	r0, r3
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	00f42400 	.word	0x00f42400
 800117c:	007a1200 	.word	0x007a1200

08001180 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 8083 	beq.w	80012a0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800119a:	4b95      	ldr	r3, [pc, #596]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d019      	beq.n	80011da <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011a6:	4b92      	ldr	r3, [pc, #584]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d106      	bne.n	80011c0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011b2:	4b8f      	ldr	r3, [pc, #572]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011be:	d00c      	beq.n	80011da <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c0:	4b8b      	ldr	r3, [pc, #556]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011c8:	2b0c      	cmp	r3, #12
 80011ca:	d112      	bne.n	80011f2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011cc:	4b88      	ldr	r3, [pc, #544]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011d8:	d10b      	bne.n	80011f2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011da:	4b85      	ldr	r3, [pc, #532]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d05b      	beq.n	800129e <HAL_RCC_OscConfig+0x11e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d157      	bne.n	800129e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e216      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fa:	d106      	bne.n	800120a <HAL_RCC_OscConfig+0x8a>
 80011fc:	4b7c      	ldr	r3, [pc, #496]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a7b      	ldr	r2, [pc, #492]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e01d      	b.n	8001246 <HAL_RCC_OscConfig+0xc6>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001212:	d10c      	bne.n	800122e <HAL_RCC_OscConfig+0xae>
 8001214:	4b76      	ldr	r3, [pc, #472]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a75      	ldr	r2, [pc, #468]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800121a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a72      	ldr	r2, [pc, #456]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	e00b      	b.n	8001246 <HAL_RCC_OscConfig+0xc6>
 800122e:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a6f      	ldr	r2, [pc, #444]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b6d      	ldr	r3, [pc, #436]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a6c      	ldr	r2, [pc, #432]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001244:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d013      	beq.n	8001276 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124e:	f7ff fa1d 	bl	800068c <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001256:	f7ff fa19 	bl	800068c <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b64      	cmp	r3, #100	; 0x64
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e1db      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001268:	4b61      	ldr	r3, [pc, #388]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0xd6>
 8001274:	e014      	b.n	80012a0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fa09 	bl	800068c <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127e:	f7ff fa05 	bl	800068c <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b64      	cmp	r3, #100	; 0x64
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1c7      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001290:	4b57      	ldr	r3, [pc, #348]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0xfe>
 800129c:	e000      	b.n	80012a0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d06f      	beq.n	800138c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80012ac:	4b50      	ldr	r3, [pc, #320]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d017      	beq.n	80012e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012b8:	4b4d      	ldr	r3, [pc, #308]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d105      	bne.n	80012d0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012c4:	4b4a      	ldr	r3, [pc, #296]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00b      	beq.n	80012e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d0:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d11c      	bne.n	8001316 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012dc:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d116      	bne.n	8001316 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e8:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_OscConfig+0x180>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e18f      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001300:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4938      	ldr	r1, [pc, #224]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001310:	4313      	orrs	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001314:	e03a      	b.n	800138c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d020      	beq.n	8001360 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800131e:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <HAL_RCC_OscConfig+0x274>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff f9b2 	bl	800068c <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132c:	f7ff f9ae 	bl	800068c <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e170      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133e:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4925      	ldr	r1, [pc, #148]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800135a:	4313      	orrs	r3, r2
 800135c:	600b      	str	r3, [r1, #0]
 800135e:	e015      	b.n	800138c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_RCC_OscConfig+0x274>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff f991 	bl	800068c <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff f98d 	bl	800068c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e14f      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d037      	beq.n	8001408 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d016      	beq.n	80013ce <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_RCC_OscConfig+0x278>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a6:	f7ff f971 	bl	800068c <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff f96d 	bl	800068c <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e12f      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80013c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x22e>
 80013cc:	e01c      	b.n	8001408 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_RCC_OscConfig+0x278>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff f95a 	bl	800068c <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013da:	e00f      	b.n	80013fc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff f956 	bl	800068c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d908      	bls.n	80013fc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e118      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	42470000 	.word	0x42470000
 80013f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	4b8a      	ldr	r3, [pc, #552]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 80013fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e9      	bne.n	80013dc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 8097 	beq.w	8001544 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141a:	4b83      	ldr	r3, [pc, #524]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10f      	bne.n	8001446 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a7e      	ldr	r2, [pc, #504]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b7c      	ldr	r3, [pc, #496]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001442:	2301      	movs	r3, #1
 8001444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b79      	ldr	r3, [pc, #484]	; (800162c <HAL_RCC_OscConfig+0x4ac>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d118      	bne.n	8001484 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001452:	4b76      	ldr	r3, [pc, #472]	; (800162c <HAL_RCC_OscConfig+0x4ac>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a75      	ldr	r2, [pc, #468]	; (800162c <HAL_RCC_OscConfig+0x4ac>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7ff f915 	bl	800068c <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001466:	f7ff f911 	bl	800068c <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e0d3      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	4b6c      	ldr	r3, [pc, #432]	; (800162c <HAL_RCC_OscConfig+0x4ac>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x31a>
 800148c:	4b66      	ldr	r3, [pc, #408]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	4a65      	ldr	r2, [pc, #404]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6713      	str	r3, [r2, #112]	; 0x70
 8001498:	e01c      	b.n	80014d4 <HAL_RCC_OscConfig+0x354>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x33c>
 80014a2:	4b61      	ldr	r3, [pc, #388]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 80014a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a6:	4a60      	ldr	r2, [pc, #384]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6713      	str	r3, [r2, #112]	; 0x70
 80014ae:	4b5e      	ldr	r3, [pc, #376]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 80014b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0x354>
 80014bc:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	4a59      	ldr	r2, [pc, #356]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	6713      	str	r3, [r2, #112]	; 0x70
 80014c8:	4b57      	ldr	r3, [pc, #348]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	4a56      	ldr	r2, [pc, #344]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 80014ce:	f023 0304 	bic.w	r3, r3, #4
 80014d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d015      	beq.n	8001508 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014dc:	f7ff f8d6 	bl	800068c <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e4:	f7ff f8d2 	bl	800068c <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e092      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fa:	4b4b      	ldr	r3, [pc, #300]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0ee      	beq.n	80014e4 <HAL_RCC_OscConfig+0x364>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001508:	f7ff f8c0 	bl	800068c <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150e:	e00a      	b.n	8001526 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001510:	f7ff f8bc 	bl	800068c <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	; 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e07c      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001526:	4b40      	ldr	r3, [pc, #256]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ee      	bne.n	8001510 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001532:	7dfb      	ldrb	r3, [r7, #23]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d105      	bne.n	8001544 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001538:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	4a3a      	ldr	r2, [pc, #232]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 800153e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001542:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d068      	beq.n	800161e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800154c:	4b36      	ldr	r3, [pc, #216]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b08      	cmp	r3, #8
 8001556:	d060      	beq.n	800161a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d145      	bne.n	80015ec <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001560:	4b33      	ldr	r3, [pc, #204]	; (8001630 <HAL_RCC_OscConfig+0x4b0>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001566:	f7ff f891 	bl	800068c <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff f88d 	bl	800068c <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e04f      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001580:	4b29      	ldr	r3, [pc, #164]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f0      	bne.n	800156e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69da      	ldr	r2, [r3, #28]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	019b      	lsls	r3, r3, #6
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	085b      	lsrs	r3, r3, #1
 80015a4:	3b01      	subs	r3, #1
 80015a6:	041b      	lsls	r3, r3, #16
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	061b      	lsls	r3, r3, #24
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	071b      	lsls	r3, r3, #28
 80015b8:	491b      	ldr	r1, [pc, #108]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_RCC_OscConfig+0x4b0>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff f862 	bl	800068c <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015cc:	f7ff f85e 	bl	800068c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e020      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0x44c>
 80015ea:	e018      	b.n	800161e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_RCC_OscConfig+0x4b0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f2:	f7ff f84b 	bl	800068c <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fa:	f7ff f847 	bl	800068c <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e009      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_RCC_OscConfig+0x4a8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x47a>
 8001618:	e001      	b.n	800161e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000
 8001630:	42470060 	.word	0x42470060

08001634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e056      	b.n	80016f4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d106      	bne.n	8001666 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f002 fb0d 	bl	8003c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2202      	movs	r2, #2
 800166a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800167c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	ea42 0103 	orr.w	r1, r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	0c1b      	lsrs	r3, r3, #16
 80016c4:	f003 0104 	and.w	r1, r3, #4
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	69da      	ldr	r2, [r3, #28]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_SPI_Transmit+0x22>
 800171a:	2302      	movs	r3, #2
 800171c:	e11e      	b.n	800195c <HAL_SPI_Transmit+0x260>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001726:	f7fe ffb1 	bl	800068c <HAL_GetTick>
 800172a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b01      	cmp	r3, #1
 800173a:	d002      	beq.n	8001742 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800173c:	2302      	movs	r3, #2
 800173e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001740:	e103      	b.n	800194a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <HAL_SPI_Transmit+0x52>
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001752:	e0fa      	b.n	800194a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2203      	movs	r2, #3
 8001758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	88fa      	ldrh	r2, [r7, #6]
 800176c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	88fa      	ldrh	r2, [r7, #6]
 8001772:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800179a:	d107      	bne.n	80017ac <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b6:	2b40      	cmp	r3, #64	; 0x40
 80017b8:	d007      	beq.n	80017ca <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017d2:	d14b      	bne.n	800186c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <HAL_SPI_Transmit+0xe6>
 80017dc:	8afb      	ldrh	r3, [r7, #22]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d13e      	bne.n	8001860 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	1c9a      	adds	r2, r3, #2
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001806:	e02b      	b.n	8001860 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b02      	cmp	r3, #2
 8001814:	d112      	bne.n	800183c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	881a      	ldrh	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	1c9a      	adds	r2, r3, #2
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001830:	b29b      	uxth	r3, r3
 8001832:	3b01      	subs	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	86da      	strh	r2, [r3, #54]	; 0x36
 800183a:	e011      	b.n	8001860 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800183c:	f7fe ff26 	bl	800068c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d803      	bhi.n	8001854 <HAL_SPI_Transmit+0x158>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001852:	d102      	bne.n	800185a <HAL_SPI_Transmit+0x15e>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800185e:	e074      	b.n	800194a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001864:	b29b      	uxth	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ce      	bne.n	8001808 <HAL_SPI_Transmit+0x10c>
 800186a:	e04c      	b.n	8001906 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_SPI_Transmit+0x17e>
 8001874:	8afb      	ldrh	r3, [r7, #22]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d140      	bne.n	80018fc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	330c      	adds	r3, #12
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001896:	b29b      	uxth	r3, r3
 8001898:	3b01      	subs	r3, #1
 800189a:	b29a      	uxth	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80018a0:	e02c      	b.n	80018fc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d113      	bne.n	80018d8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	330c      	adds	r3, #12
 80018ba:	7812      	ldrb	r2, [r2, #0]
 80018bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80018d6:	e011      	b.n	80018fc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018d8:	f7fe fed8 	bl	800068c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d803      	bhi.n	80018f0 <HAL_SPI_Transmit+0x1f4>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ee:	d102      	bne.n	80018f6 <HAL_SPI_Transmit+0x1fa>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80018fa:	e026      	b.n	800194a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001900:	b29b      	uxth	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1cd      	bne.n	80018a2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	6839      	ldr	r1, [r7, #0]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 fba4 	bl	8002058 <SPI_EndRxTxTransaction>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2220      	movs	r2, #32
 800191a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10a      	bne.n	800193a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	77fb      	strb	r3, [r7, #31]
 8001946:	e000      	b.n	800194a <HAL_SPI_Transmit+0x24e>
  }

error:
 8001948:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800195a:	7ffb      	ldrb	r3, [r7, #31]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af02      	add	r7, sp, #8
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	4613      	mov	r3, r2
 8001972:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001980:	d112      	bne.n	80019a8 <HAL_SPI_Receive+0x44>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10e      	bne.n	80019a8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2204      	movs	r2, #4
 800198e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001992:	88fa      	ldrh	r2, [r7, #6]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4613      	mov	r3, r2
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f8e9 	bl	8001b76 <HAL_SPI_TransmitReceive>
 80019a4:	4603      	mov	r3, r0
 80019a6:	e0e2      	b.n	8001b6e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_SPI_Receive+0x52>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e0db      	b.n	8001b6e <HAL_SPI_Receive+0x20a>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019be:	f7fe fe65 	bl	800068c <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d002      	beq.n	80019d6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80019d0:	2302      	movs	r3, #2
 80019d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80019d4:	e0c2      	b.n	8001b5c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <HAL_SPI_Receive+0x7e>
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80019e6:	e0b9      	b.n	8001b5c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2204      	movs	r2, #4
 80019ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	88fa      	ldrh	r2, [r7, #6]
 8001a00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	88fa      	ldrh	r2, [r7, #6]
 8001a06:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a2e:	d107      	bne.n	8001a40 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a3e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4a:	2b40      	cmp	r3, #64	; 0x40
 8001a4c:	d007      	beq.n	8001a5e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d162      	bne.n	8001b2c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001a66:	e02e      	b.n	8001ac6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d115      	bne.n	8001aa2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f103 020c 	add.w	r2, r3, #12
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a82:	7812      	ldrb	r2, [r2, #0]
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001aa0:	e011      	b.n	8001ac6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001aa2:	f7fe fdf3 	bl	800068c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d803      	bhi.n	8001aba <HAL_SPI_Receive+0x156>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d102      	bne.n	8001ac0 <HAL_SPI_Receive+0x15c>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001ac4:	e04a      	b.n	8001b5c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1cb      	bne.n	8001a68 <HAL_SPI_Receive+0x104>
 8001ad0:	e031      	b.n	8001b36 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d113      	bne.n	8001b08 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aea:	b292      	uxth	r2, r2
 8001aec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af2:	1c9a      	adds	r2, r3, #2
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b06:	e011      	b.n	8001b2c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b08:	f7fe fdc0 	bl	800068c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d803      	bhi.n	8001b20 <HAL_SPI_Receive+0x1bc>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1e:	d102      	bne.n	8001b26 <HAL_SPI_Receive+0x1c2>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001b2a:	e017      	b.n	8001b5c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1cd      	bne.n	8001ad2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	6839      	ldr	r1, [r7, #0]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 fa27 	bl	8001f8e <SPI_EndRxTransaction>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	75fb      	strb	r3, [r7, #23]
 8001b58:	e000      	b.n	8001b5c <HAL_SPI_Receive+0x1f8>
  }

error :
 8001b5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b08c      	sub	sp, #48	; 0x30
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b84:	2301      	movs	r3, #1
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_SPI_TransmitReceive+0x26>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e18a      	b.n	8001eb2 <HAL_SPI_TransmitReceive+0x33c>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ba4:	f7fe fd72 	bl	800068c <HAL_GetTick>
 8001ba8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001bbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d00f      	beq.n	8001be6 <HAL_SPI_TransmitReceive+0x70>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bcc:	d107      	bne.n	8001bde <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d103      	bne.n	8001bde <HAL_SPI_TransmitReceive+0x68>
 8001bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d003      	beq.n	8001be6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001bde:	2302      	movs	r3, #2
 8001be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001be4:	e15b      	b.n	8001e9e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_SPI_TransmitReceive+0x82>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_SPI_TransmitReceive+0x82>
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d103      	bne.n	8001c00 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001bfe:	e14e      	b.n	8001e9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d003      	beq.n	8001c14 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2205      	movs	r2, #5
 8001c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	887a      	ldrh	r2, [r7, #2]
 8001c2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	887a      	ldrh	r2, [r7, #2]
 8001c36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c54:	2b40      	cmp	r3, #64	; 0x40
 8001c56:	d007      	beq.n	8001c68 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c70:	d178      	bne.n	8001d64 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_SPI_TransmitReceive+0x10a>
 8001c7a:	8b7b      	ldrh	r3, [r7, #26]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d166      	bne.n	8001d4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	881a      	ldrh	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	1c9a      	adds	r2, r3, #2
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ca4:	e053      	b.n	8001d4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d11b      	bne.n	8001cec <HAL_SPI_TransmitReceive+0x176>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d016      	beq.n	8001cec <HAL_SPI_TransmitReceive+0x176>
 8001cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d113      	bne.n	8001cec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	881a      	ldrh	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	1c9a      	adds	r2, r3, #2
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d119      	bne.n	8001d2e <HAL_SPI_TransmitReceive+0x1b8>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d014      	beq.n	8001d2e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d16:	1c9a      	adds	r2, r3, #2
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d2e:	f7fe fcad 	bl	800068c <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d807      	bhi.n	8001d4e <HAL_SPI_TransmitReceive+0x1d8>
 8001d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d44:	d003      	beq.n	8001d4e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d4c:	e0a7      	b.n	8001e9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1a6      	bne.n	8001ca6 <HAL_SPI_TransmitReceive+0x130>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1a1      	bne.n	8001ca6 <HAL_SPI_TransmitReceive+0x130>
 8001d62:	e07c      	b.n	8001e5e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_SPI_TransmitReceive+0x1fc>
 8001d6c:	8b7b      	ldrh	r3, [r7, #26]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d16b      	bne.n	8001e4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	330c      	adds	r3, #12
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d98:	e057      	b.n	8001e4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d11c      	bne.n	8001de2 <HAL_SPI_TransmitReceive+0x26c>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d017      	beq.n	8001de2 <HAL_SPI_TransmitReceive+0x26c>
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d114      	bne.n	8001de2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	330c      	adds	r3, #12
 8001dc2:	7812      	ldrb	r2, [r2, #0]
 8001dc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d119      	bne.n	8001e24 <HAL_SPI_TransmitReceive+0x2ae>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d014      	beq.n	8001e24 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e20:	2301      	movs	r3, #1
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001e24:	f7fe fc32 	bl	800068c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d803      	bhi.n	8001e3c <HAL_SPI_TransmitReceive+0x2c6>
 8001e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3a:	d102      	bne.n	8001e42 <HAL_SPI_TransmitReceive+0x2cc>
 8001e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e48:	e029      	b.n	8001e9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1a2      	bne.n	8001d9a <HAL_SPI_TransmitReceive+0x224>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d19d      	bne.n	8001d9a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f8f8 	bl	8002058 <SPI_EndRxTxTransaction>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e7a:	e010      	b.n	8001e9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10b      	bne.n	8001e9c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	e000      	b.n	8001e9e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001e9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001eae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3730      	adds	r7, #48	; 0x30
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001eca:	e04c      	b.n	8001f66 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed2:	d048      	beq.n	8001f66 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ed4:	f7fe fbda 	bl	800068c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d902      	bls.n	8001eea <SPI_WaitFlagStateUntilTimeout+0x30>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d13d      	bne.n	8001f66 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f02:	d111      	bne.n	8001f28 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0c:	d004      	beq.n	8001f18 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f16:	d107      	bne.n	8001f28 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f30:	d10f      	bne.n	8001f52 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e00f      	b.n	8001f86 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	bf0c      	ite	eq
 8001f76:	2301      	moveq	r3, #1
 8001f78:	2300      	movne	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d1a3      	bne.n	8001ecc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af02      	add	r7, sp, #8
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fa2:	d111      	bne.n	8001fc8 <SPI_EndRxTransaction+0x3a>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fac:	d004      	beq.n	8001fb8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb6:	d107      	bne.n	8001fc8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fc6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fd0:	d12a      	bne.n	8002028 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fda:	d012      	beq.n	8002002 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff ff67 	bl	8001eba <SPI_WaitFlagStateUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d02d      	beq.n	800204e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f043 0220 	orr.w	r2, r3, #32
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e026      	b.n	8002050 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2200      	movs	r2, #0
 800200a:	2101      	movs	r1, #1
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f7ff ff54 	bl	8001eba <SPI_WaitFlagStateUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01a      	beq.n	800204e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	f043 0220 	orr.w	r2, r3, #32
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e013      	b.n	8002050 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2200      	movs	r2, #0
 8002030:	2101      	movs	r1, #1
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff ff41 	bl	8001eba <SPI_WaitFlagStateUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f043 0220 	orr.w	r2, r3, #32
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e000      	b.n	8002050 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <SPI_EndRxTxTransaction+0x7c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <SPI_EndRxTxTransaction+0x80>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0d5b      	lsrs	r3, r3, #21
 8002070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002082:	d112      	bne.n	80020aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2200      	movs	r2, #0
 800208c:	2180      	movs	r1, #128	; 0x80
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f7ff ff13 	bl	8001eba <SPI_WaitFlagStateUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	f043 0220 	orr.w	r2, r3, #32
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e00f      	b.n	80020ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c0:	2b80      	cmp	r3, #128	; 0x80
 80020c2:	d0f2      	beq.n	80020aa <SPI_EndRxTxTransaction+0x52>
 80020c4:	e000      	b.n	80020c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80020c6:	bf00      	nop
  }

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000008 	.word	0x20000008
 80020d8:	165e9f81 	.word	0x165e9f81

080020dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e03f      	b.n	800216e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f001 fef6 	bl	8003ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2224      	movs	r2, #36	; 0x24
 800210c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800211e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f90b 	bl	800233c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b088      	sub	sp, #32
 800217a:	af02      	add	r7, sp, #8
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	4613      	mov	r3, r2
 8002184:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b20      	cmp	r3, #32
 8002194:	f040 8083 	bne.w	800229e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <HAL_UART_Transmit+0x2e>
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e07b      	b.n	80022a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_UART_Transmit+0x40>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e074      	b.n	80022a0 <HAL_UART_Transmit+0x12a>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2221      	movs	r2, #33	; 0x21
 80021c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80021cc:	f7fe fa5e 	bl	800068c <HAL_GetTick>
 80021d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	88fa      	ldrh	r2, [r7, #6]
 80021dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80021e6:	e042      	b.n	800226e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fe:	d122      	bne.n	8002246 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2200      	movs	r2, #0
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f84c 	bl	80022a8 <UART_WaitOnFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e042      	b.n	80022a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800222c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	3302      	adds	r3, #2
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	e017      	b.n	800226e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	3301      	adds	r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	e013      	b.n	800226e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2200      	movs	r2, #0
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f829 	bl	80022a8 <UART_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e01f      	b.n	80022a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	60ba      	str	r2, [r7, #8]
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1b7      	bne.n	80021e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2200      	movs	r2, #0
 8002280:	2140      	movs	r1, #64	; 0x40
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f810 	bl	80022a8 <UART_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e006      	b.n	80022a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	e000      	b.n	80022a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800229e:	2302      	movs	r3, #2
  }
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022b8:	e02c      	b.n	8002314 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d028      	beq.n	8002314 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80022c8:	f7fe f9e0 	bl	800068c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d21d      	bcs.n	8002314 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e00f      	b.n	8002334 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4013      	ands	r3, r2
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	429a      	cmp	r2, r3
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	429a      	cmp	r2, r3
 8002330:	d0c3      	beq.n	80022ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	4313      	orrs	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800237e:	f023 030c 	bic.w	r3, r3, #12
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	68f9      	ldr	r1, [r7, #12]
 8002388:	430b      	orrs	r3, r1
 800238a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023aa:	f040 818b 	bne.w	80026c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4ac1      	ldr	r2, [pc, #772]	; (80026b8 <UART_SetConfig+0x37c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d005      	beq.n	80023c4 <UART_SetConfig+0x88>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4abf      	ldr	r2, [pc, #764]	; (80026bc <UART_SetConfig+0x380>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	f040 80bd 	bne.w	800253e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023c4:	f7fe fd28 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 80023c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	461d      	mov	r5, r3
 80023ce:	f04f 0600 	mov.w	r6, #0
 80023d2:	46a8      	mov	r8, r5
 80023d4:	46b1      	mov	r9, r6
 80023d6:	eb18 0308 	adds.w	r3, r8, r8
 80023da:	eb49 0409 	adc.w	r4, r9, r9
 80023de:	4698      	mov	r8, r3
 80023e0:	46a1      	mov	r9, r4
 80023e2:	eb18 0805 	adds.w	r8, r8, r5
 80023e6:	eb49 0906 	adc.w	r9, r9, r6
 80023ea:	f04f 0100 	mov.w	r1, #0
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023fe:	4688      	mov	r8, r1
 8002400:	4691      	mov	r9, r2
 8002402:	eb18 0005 	adds.w	r0, r8, r5
 8002406:	eb49 0106 	adc.w	r1, r9, r6
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	461d      	mov	r5, r3
 8002410:	f04f 0600 	mov.w	r6, #0
 8002414:	196b      	adds	r3, r5, r5
 8002416:	eb46 0406 	adc.w	r4, r6, r6
 800241a:	461a      	mov	r2, r3
 800241c:	4623      	mov	r3, r4
 800241e:	f7fd ff4f 	bl	80002c0 <__aeabi_uldivmod>
 8002422:	4603      	mov	r3, r0
 8002424:	460c      	mov	r4, r1
 8002426:	461a      	mov	r2, r3
 8002428:	4ba5      	ldr	r3, [pc, #660]	; (80026c0 <UART_SetConfig+0x384>)
 800242a:	fba3 2302 	umull	r2, r3, r3, r2
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	461d      	mov	r5, r3
 8002438:	f04f 0600 	mov.w	r6, #0
 800243c:	46a9      	mov	r9, r5
 800243e:	46b2      	mov	sl, r6
 8002440:	eb19 0309 	adds.w	r3, r9, r9
 8002444:	eb4a 040a 	adc.w	r4, sl, sl
 8002448:	4699      	mov	r9, r3
 800244a:	46a2      	mov	sl, r4
 800244c:	eb19 0905 	adds.w	r9, r9, r5
 8002450:	eb4a 0a06 	adc.w	sl, sl, r6
 8002454:	f04f 0100 	mov.w	r1, #0
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002460:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002464:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002468:	4689      	mov	r9, r1
 800246a:	4692      	mov	sl, r2
 800246c:	eb19 0005 	adds.w	r0, r9, r5
 8002470:	eb4a 0106 	adc.w	r1, sl, r6
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	461d      	mov	r5, r3
 800247a:	f04f 0600 	mov.w	r6, #0
 800247e:	196b      	adds	r3, r5, r5
 8002480:	eb46 0406 	adc.w	r4, r6, r6
 8002484:	461a      	mov	r2, r3
 8002486:	4623      	mov	r3, r4
 8002488:	f7fd ff1a 	bl	80002c0 <__aeabi_uldivmod>
 800248c:	4603      	mov	r3, r0
 800248e:	460c      	mov	r4, r1
 8002490:	461a      	mov	r2, r3
 8002492:	4b8b      	ldr	r3, [pc, #556]	; (80026c0 <UART_SetConfig+0x384>)
 8002494:	fba3 1302 	umull	r1, r3, r3, r2
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	2164      	movs	r1, #100	; 0x64
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	3332      	adds	r3, #50	; 0x32
 80024a6:	4a86      	ldr	r2, [pc, #536]	; (80026c0 <UART_SetConfig+0x384>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024b4:	4498      	add	r8, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	461d      	mov	r5, r3
 80024ba:	f04f 0600 	mov.w	r6, #0
 80024be:	46a9      	mov	r9, r5
 80024c0:	46b2      	mov	sl, r6
 80024c2:	eb19 0309 	adds.w	r3, r9, r9
 80024c6:	eb4a 040a 	adc.w	r4, sl, sl
 80024ca:	4699      	mov	r9, r3
 80024cc:	46a2      	mov	sl, r4
 80024ce:	eb19 0905 	adds.w	r9, r9, r5
 80024d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024ea:	4689      	mov	r9, r1
 80024ec:	4692      	mov	sl, r2
 80024ee:	eb19 0005 	adds.w	r0, r9, r5
 80024f2:	eb4a 0106 	adc.w	r1, sl, r6
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	461d      	mov	r5, r3
 80024fc:	f04f 0600 	mov.w	r6, #0
 8002500:	196b      	adds	r3, r5, r5
 8002502:	eb46 0406 	adc.w	r4, r6, r6
 8002506:	461a      	mov	r2, r3
 8002508:	4623      	mov	r3, r4
 800250a:	f7fd fed9 	bl	80002c0 <__aeabi_uldivmod>
 800250e:	4603      	mov	r3, r0
 8002510:	460c      	mov	r4, r1
 8002512:	461a      	mov	r2, r3
 8002514:	4b6a      	ldr	r3, [pc, #424]	; (80026c0 <UART_SetConfig+0x384>)
 8002516:	fba3 1302 	umull	r1, r3, r3, r2
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	2164      	movs	r1, #100	; 0x64
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	3332      	adds	r3, #50	; 0x32
 8002528:	4a65      	ldr	r2, [pc, #404]	; (80026c0 <UART_SetConfig+0x384>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	f003 0207 	and.w	r2, r3, #7
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4442      	add	r2, r8
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	e26f      	b.n	8002a1e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800253e:	f7fe fc57 	bl	8000df0 <HAL_RCC_GetPCLK1Freq>
 8002542:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	461d      	mov	r5, r3
 8002548:	f04f 0600 	mov.w	r6, #0
 800254c:	46a8      	mov	r8, r5
 800254e:	46b1      	mov	r9, r6
 8002550:	eb18 0308 	adds.w	r3, r8, r8
 8002554:	eb49 0409 	adc.w	r4, r9, r9
 8002558:	4698      	mov	r8, r3
 800255a:	46a1      	mov	r9, r4
 800255c:	eb18 0805 	adds.w	r8, r8, r5
 8002560:	eb49 0906 	adc.w	r9, r9, r6
 8002564:	f04f 0100 	mov.w	r1, #0
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002570:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002574:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002578:	4688      	mov	r8, r1
 800257a:	4691      	mov	r9, r2
 800257c:	eb18 0005 	adds.w	r0, r8, r5
 8002580:	eb49 0106 	adc.w	r1, r9, r6
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	461d      	mov	r5, r3
 800258a:	f04f 0600 	mov.w	r6, #0
 800258e:	196b      	adds	r3, r5, r5
 8002590:	eb46 0406 	adc.w	r4, r6, r6
 8002594:	461a      	mov	r2, r3
 8002596:	4623      	mov	r3, r4
 8002598:	f7fd fe92 	bl	80002c0 <__aeabi_uldivmod>
 800259c:	4603      	mov	r3, r0
 800259e:	460c      	mov	r4, r1
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <UART_SetConfig+0x384>)
 80025a4:	fba3 2302 	umull	r2, r3, r3, r2
 80025a8:	095b      	lsrs	r3, r3, #5
 80025aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	461d      	mov	r5, r3
 80025b2:	f04f 0600 	mov.w	r6, #0
 80025b6:	46a9      	mov	r9, r5
 80025b8:	46b2      	mov	sl, r6
 80025ba:	eb19 0309 	adds.w	r3, r9, r9
 80025be:	eb4a 040a 	adc.w	r4, sl, sl
 80025c2:	4699      	mov	r9, r3
 80025c4:	46a2      	mov	sl, r4
 80025c6:	eb19 0905 	adds.w	r9, r9, r5
 80025ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80025ce:	f04f 0100 	mov.w	r1, #0
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025e2:	4689      	mov	r9, r1
 80025e4:	4692      	mov	sl, r2
 80025e6:	eb19 0005 	adds.w	r0, r9, r5
 80025ea:	eb4a 0106 	adc.w	r1, sl, r6
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	461d      	mov	r5, r3
 80025f4:	f04f 0600 	mov.w	r6, #0
 80025f8:	196b      	adds	r3, r5, r5
 80025fa:	eb46 0406 	adc.w	r4, r6, r6
 80025fe:	461a      	mov	r2, r3
 8002600:	4623      	mov	r3, r4
 8002602:	f7fd fe5d 	bl	80002c0 <__aeabi_uldivmod>
 8002606:	4603      	mov	r3, r0
 8002608:	460c      	mov	r4, r1
 800260a:	461a      	mov	r2, r3
 800260c:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <UART_SetConfig+0x384>)
 800260e:	fba3 1302 	umull	r1, r3, r3, r2
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	2164      	movs	r1, #100	; 0x64
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	3332      	adds	r3, #50	; 0x32
 8002620:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <UART_SetConfig+0x384>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800262e:	4498      	add	r8, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	461d      	mov	r5, r3
 8002634:	f04f 0600 	mov.w	r6, #0
 8002638:	46a9      	mov	r9, r5
 800263a:	46b2      	mov	sl, r6
 800263c:	eb19 0309 	adds.w	r3, r9, r9
 8002640:	eb4a 040a 	adc.w	r4, sl, sl
 8002644:	4699      	mov	r9, r3
 8002646:	46a2      	mov	sl, r4
 8002648:	eb19 0905 	adds.w	r9, r9, r5
 800264c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002650:	f04f 0100 	mov.w	r1, #0
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800265c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002660:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002664:	4689      	mov	r9, r1
 8002666:	4692      	mov	sl, r2
 8002668:	eb19 0005 	adds.w	r0, r9, r5
 800266c:	eb4a 0106 	adc.w	r1, sl, r6
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	461d      	mov	r5, r3
 8002676:	f04f 0600 	mov.w	r6, #0
 800267a:	196b      	adds	r3, r5, r5
 800267c:	eb46 0406 	adc.w	r4, r6, r6
 8002680:	461a      	mov	r2, r3
 8002682:	4623      	mov	r3, r4
 8002684:	f7fd fe1c 	bl	80002c0 <__aeabi_uldivmod>
 8002688:	4603      	mov	r3, r0
 800268a:	460c      	mov	r4, r1
 800268c:	461a      	mov	r2, r3
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <UART_SetConfig+0x384>)
 8002690:	fba3 1302 	umull	r1, r3, r3, r2
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	2164      	movs	r1, #100	; 0x64
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	3332      	adds	r3, #50	; 0x32
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <UART_SetConfig+0x384>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	f003 0207 	and.w	r2, r3, #7
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4442      	add	r2, r8
 80026b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80026b6:	e1b2      	b.n	8002a1e <UART_SetConfig+0x6e2>
 80026b8:	40011000 	.word	0x40011000
 80026bc:	40011400 	.word	0x40011400
 80026c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4ad7      	ldr	r2, [pc, #860]	; (8002a28 <UART_SetConfig+0x6ec>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d005      	beq.n	80026da <UART_SetConfig+0x39e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4ad6      	ldr	r2, [pc, #856]	; (8002a2c <UART_SetConfig+0x6f0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	f040 80d1 	bne.w	800287c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80026da:	f7fe fb9d 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 80026de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	469a      	mov	sl, r3
 80026e4:	f04f 0b00 	mov.w	fp, #0
 80026e8:	46d0      	mov	r8, sl
 80026ea:	46d9      	mov	r9, fp
 80026ec:	eb18 0308 	adds.w	r3, r8, r8
 80026f0:	eb49 0409 	adc.w	r4, r9, r9
 80026f4:	4698      	mov	r8, r3
 80026f6:	46a1      	mov	r9, r4
 80026f8:	eb18 080a 	adds.w	r8, r8, sl
 80026fc:	eb49 090b 	adc.w	r9, r9, fp
 8002700:	f04f 0100 	mov.w	r1, #0
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800270c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002710:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002714:	4688      	mov	r8, r1
 8002716:	4691      	mov	r9, r2
 8002718:	eb1a 0508 	adds.w	r5, sl, r8
 800271c:	eb4b 0609 	adc.w	r6, fp, r9
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4619      	mov	r1, r3
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	f04f 0400 	mov.w	r4, #0
 8002732:	0094      	lsls	r4, r2, #2
 8002734:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002738:	008b      	lsls	r3, r1, #2
 800273a:	461a      	mov	r2, r3
 800273c:	4623      	mov	r3, r4
 800273e:	4628      	mov	r0, r5
 8002740:	4631      	mov	r1, r6
 8002742:	f7fd fdbd 	bl	80002c0 <__aeabi_uldivmod>
 8002746:	4603      	mov	r3, r0
 8002748:	460c      	mov	r4, r1
 800274a:	461a      	mov	r2, r3
 800274c:	4bb8      	ldr	r3, [pc, #736]	; (8002a30 <UART_SetConfig+0x6f4>)
 800274e:	fba3 2302 	umull	r2, r3, r3, r2
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	469b      	mov	fp, r3
 800275c:	f04f 0c00 	mov.w	ip, #0
 8002760:	46d9      	mov	r9, fp
 8002762:	46e2      	mov	sl, ip
 8002764:	eb19 0309 	adds.w	r3, r9, r9
 8002768:	eb4a 040a 	adc.w	r4, sl, sl
 800276c:	4699      	mov	r9, r3
 800276e:	46a2      	mov	sl, r4
 8002770:	eb19 090b 	adds.w	r9, r9, fp
 8002774:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002778:	f04f 0100 	mov.w	r1, #0
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002784:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002788:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800278c:	4689      	mov	r9, r1
 800278e:	4692      	mov	sl, r2
 8002790:	eb1b 0509 	adds.w	r5, fp, r9
 8002794:	eb4c 060a 	adc.w	r6, ip, sl
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4619      	mov	r1, r3
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	f04f 0400 	mov.w	r4, #0
 80027aa:	0094      	lsls	r4, r2, #2
 80027ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027b0:	008b      	lsls	r3, r1, #2
 80027b2:	461a      	mov	r2, r3
 80027b4:	4623      	mov	r3, r4
 80027b6:	4628      	mov	r0, r5
 80027b8:	4631      	mov	r1, r6
 80027ba:	f7fd fd81 	bl	80002c0 <__aeabi_uldivmod>
 80027be:	4603      	mov	r3, r0
 80027c0:	460c      	mov	r4, r1
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b9a      	ldr	r3, [pc, #616]	; (8002a30 <UART_SetConfig+0x6f4>)
 80027c6:	fba3 1302 	umull	r1, r3, r3, r2
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2164      	movs	r1, #100	; 0x64
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	3332      	adds	r3, #50	; 0x32
 80027d8:	4a95      	ldr	r2, [pc, #596]	; (8002a30 <UART_SetConfig+0x6f4>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e4:	4498      	add	r8, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	469b      	mov	fp, r3
 80027ea:	f04f 0c00 	mov.w	ip, #0
 80027ee:	46d9      	mov	r9, fp
 80027f0:	46e2      	mov	sl, ip
 80027f2:	eb19 0309 	adds.w	r3, r9, r9
 80027f6:	eb4a 040a 	adc.w	r4, sl, sl
 80027fa:	4699      	mov	r9, r3
 80027fc:	46a2      	mov	sl, r4
 80027fe:	eb19 090b 	adds.w	r9, r9, fp
 8002802:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002806:	f04f 0100 	mov.w	r1, #0
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002812:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002816:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800281a:	4689      	mov	r9, r1
 800281c:	4692      	mov	sl, r2
 800281e:	eb1b 0509 	adds.w	r5, fp, r9
 8002822:	eb4c 060a 	adc.w	r6, ip, sl
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4619      	mov	r1, r3
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	f04f 0400 	mov.w	r4, #0
 8002838:	0094      	lsls	r4, r2, #2
 800283a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800283e:	008b      	lsls	r3, r1, #2
 8002840:	461a      	mov	r2, r3
 8002842:	4623      	mov	r3, r4
 8002844:	4628      	mov	r0, r5
 8002846:	4631      	mov	r1, r6
 8002848:	f7fd fd3a 	bl	80002c0 <__aeabi_uldivmod>
 800284c:	4603      	mov	r3, r0
 800284e:	460c      	mov	r4, r1
 8002850:	461a      	mov	r2, r3
 8002852:	4b77      	ldr	r3, [pc, #476]	; (8002a30 <UART_SetConfig+0x6f4>)
 8002854:	fba3 1302 	umull	r1, r3, r3, r2
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	2164      	movs	r1, #100	; 0x64
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	3332      	adds	r3, #50	; 0x32
 8002866:	4a72      	ldr	r2, [pc, #456]	; (8002a30 <UART_SetConfig+0x6f4>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	f003 020f 	and.w	r2, r3, #15
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4442      	add	r2, r8
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	e0d0      	b.n	8002a1e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800287c:	f7fe fab8 	bl	8000df0 <HAL_RCC_GetPCLK1Freq>
 8002880:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	469a      	mov	sl, r3
 8002886:	f04f 0b00 	mov.w	fp, #0
 800288a:	46d0      	mov	r8, sl
 800288c:	46d9      	mov	r9, fp
 800288e:	eb18 0308 	adds.w	r3, r8, r8
 8002892:	eb49 0409 	adc.w	r4, r9, r9
 8002896:	4698      	mov	r8, r3
 8002898:	46a1      	mov	r9, r4
 800289a:	eb18 080a 	adds.w	r8, r8, sl
 800289e:	eb49 090b 	adc.w	r9, r9, fp
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028b6:	4688      	mov	r8, r1
 80028b8:	4691      	mov	r9, r2
 80028ba:	eb1a 0508 	adds.w	r5, sl, r8
 80028be:	eb4b 0609 	adc.w	r6, fp, r9
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4619      	mov	r1, r3
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	f04f 0400 	mov.w	r4, #0
 80028d4:	0094      	lsls	r4, r2, #2
 80028d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028da:	008b      	lsls	r3, r1, #2
 80028dc:	461a      	mov	r2, r3
 80028de:	4623      	mov	r3, r4
 80028e0:	4628      	mov	r0, r5
 80028e2:	4631      	mov	r1, r6
 80028e4:	f7fd fcec 	bl	80002c0 <__aeabi_uldivmod>
 80028e8:	4603      	mov	r3, r0
 80028ea:	460c      	mov	r4, r1
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <UART_SetConfig+0x6f4>)
 80028f0:	fba3 2302 	umull	r2, r3, r3, r2
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	469b      	mov	fp, r3
 80028fe:	f04f 0c00 	mov.w	ip, #0
 8002902:	46d9      	mov	r9, fp
 8002904:	46e2      	mov	sl, ip
 8002906:	eb19 0309 	adds.w	r3, r9, r9
 800290a:	eb4a 040a 	adc.w	r4, sl, sl
 800290e:	4699      	mov	r9, r3
 8002910:	46a2      	mov	sl, r4
 8002912:	eb19 090b 	adds.w	r9, r9, fp
 8002916:	eb4a 0a0c 	adc.w	sl, sl, ip
 800291a:	f04f 0100 	mov.w	r1, #0
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002926:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800292a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800292e:	4689      	mov	r9, r1
 8002930:	4692      	mov	sl, r2
 8002932:	eb1b 0509 	adds.w	r5, fp, r9
 8002936:	eb4c 060a 	adc.w	r6, ip, sl
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4619      	mov	r1, r3
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	f04f 0400 	mov.w	r4, #0
 800294c:	0094      	lsls	r4, r2, #2
 800294e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002952:	008b      	lsls	r3, r1, #2
 8002954:	461a      	mov	r2, r3
 8002956:	4623      	mov	r3, r4
 8002958:	4628      	mov	r0, r5
 800295a:	4631      	mov	r1, r6
 800295c:	f7fd fcb0 	bl	80002c0 <__aeabi_uldivmod>
 8002960:	4603      	mov	r3, r0
 8002962:	460c      	mov	r4, r1
 8002964:	461a      	mov	r2, r3
 8002966:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <UART_SetConfig+0x6f4>)
 8002968:	fba3 1302 	umull	r1, r3, r3, r2
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	2164      	movs	r1, #100	; 0x64
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	3332      	adds	r3, #50	; 0x32
 800297a:	4a2d      	ldr	r2, [pc, #180]	; (8002a30 <UART_SetConfig+0x6f4>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002986:	4498      	add	r8, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	469b      	mov	fp, r3
 800298c:	f04f 0c00 	mov.w	ip, #0
 8002990:	46d9      	mov	r9, fp
 8002992:	46e2      	mov	sl, ip
 8002994:	eb19 0309 	adds.w	r3, r9, r9
 8002998:	eb4a 040a 	adc.w	r4, sl, sl
 800299c:	4699      	mov	r9, r3
 800299e:	46a2      	mov	sl, r4
 80029a0:	eb19 090b 	adds.w	r9, r9, fp
 80029a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029bc:	4689      	mov	r9, r1
 80029be:	4692      	mov	sl, r2
 80029c0:	eb1b 0509 	adds.w	r5, fp, r9
 80029c4:	eb4c 060a 	adc.w	r6, ip, sl
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4619      	mov	r1, r3
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	f04f 0400 	mov.w	r4, #0
 80029da:	0094      	lsls	r4, r2, #2
 80029dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029e0:	008b      	lsls	r3, r1, #2
 80029e2:	461a      	mov	r2, r3
 80029e4:	4623      	mov	r3, r4
 80029e6:	4628      	mov	r0, r5
 80029e8:	4631      	mov	r1, r6
 80029ea:	f7fd fc69 	bl	80002c0 <__aeabi_uldivmod>
 80029ee:	4603      	mov	r3, r0
 80029f0:	460c      	mov	r4, r1
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <UART_SetConfig+0x6f4>)
 80029f6:	fba3 1302 	umull	r1, r3, r3, r2
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2164      	movs	r1, #100	; 0x64
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	3332      	adds	r3, #50	; 0x32
 8002a08:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <UART_SetConfig+0x6f4>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	f003 020f 	and.w	r2, r3, #15
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4442      	add	r2, r8
 8002a1a:	609a      	str	r2, [r3, #8]
}
 8002a1c:	e7ff      	b.n	8002a1e <UART_SetConfig+0x6e2>
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a28:	40011000 	.word	0x40011000
 8002a2c:	40011400 	.word	0x40011400
 8002a30:	51eb851f 	.word	0x51eb851f

08002a34 <NRF24_CSN>:

/*########################### CSN / CE OPERATIONS ###########################################*/

// CSN
void NRF24_CSN(uint8_t state)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
	if (state)
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <NRF24_CSN+0x22>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <NRF24_CSN+0x3c>)
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <NRF24_CSN+0x40>)
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f7fe f8c2 	bl	8000bd8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8002a54:	e007      	b.n	8002a66 <NRF24_CSN+0x32>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <NRF24_CSN+0x3c>)
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <NRF24_CSN+0x40>)
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	4619      	mov	r1, r3
 8002a62:	f7fe f8b9 	bl	8000bd8 <HAL_GPIO_WritePin>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000009c 	.word	0x2000009c
 8002a74:	200000a0 	.word	0x200000a0

08002a78 <NRF24_CE>:

// CE
void NRF24_CE(uint8_t state)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
	if (state)
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <NRF24_CE+0x22>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <NRF24_CE+0x3c>)
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <NRF24_CE+0x40>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	2201      	movs	r2, #1
 8002a92:	4619      	mov	r1, r3
 8002a94:	f7fe f8a0 	bl	8000bd8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8002a98:	e007      	b.n	8002aaa <NRF24_CE+0x32>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <NRF24_CE+0x3c>)
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <NRF24_CE+0x40>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f7fe f897 	bl	8000bd8 <HAL_GPIO_WritePin>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2000009c 	.word	0x2000009c
 8002ab8:	200000a2 	.word	0x200000a2

08002abc <NRF24_read_register>:

/*##################### BASIC READ / WRITE REGISTER OPERATIONS ##############################*/

// Read Single Byte From Register
uint8_t NRF24_read_register(uint8_t reg)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7ff ffb4 	bl	8002a34 <NRF24_CSN>

	//Transmit register address
	SPI_Buf[0] = reg & CMD_REGISTER_MASK;
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, SPI_Buf, 1, 100);
 8002ad6:	f107 010c 	add.w	r1, r7, #12
 8002ada:	2364      	movs	r3, #100	; 0x64
 8002adc:	2201      	movs	r2, #1
 8002ade:	4809      	ldr	r0, [pc, #36]	; (8002b04 <NRF24_read_register+0x48>)
 8002ae0:	f7fe fe0c 	bl	80016fc <HAL_SPI_Transmit>

	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &SPI_Buf[1], 1, 100);
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	1c59      	adds	r1, r3, #1
 8002aea:	2364      	movs	r3, #100	; 0x64
 8002aec:	2201      	movs	r2, #1
 8002aee:	4805      	ldr	r0, [pc, #20]	; (8002b04 <NRF24_read_register+0x48>)
 8002af0:	f7fe ff38 	bl	8001964 <HAL_SPI_Receive>

	NRF24_CSN(HIGH);
 8002af4:	2001      	movs	r0, #1
 8002af6:	f7ff ff9d 	bl	8002a34 <NRF24_CSN>

	return SPI_Buf[1];
 8002afa:	7b7b      	ldrb	r3, [r7, #13]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200000a4 	.word	0x200000a4

08002b08 <NRF24_read_registerN>:

// Read Multiple Bytes From Register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
 8002b14:	4613      	mov	r3, r2
 8002b16:	71bb      	strb	r3, [r7, #6]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7ff ff8b 	bl	8002a34 <NRF24_CSN>

	//Transmit register address
	SPI_Buf[0] = reg & CMD_REGISTER_MASK;
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, SPI_Buf, 1, 100);
 8002b28:	f107 010c 	add.w	r1, r7, #12
 8002b2c:	2364      	movs	r3, #100	; 0x64
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4808      	ldr	r0, [pc, #32]	; (8002b54 <NRF24_read_registerN+0x4c>)
 8002b32:	f7fe fde3 	bl	80016fc <HAL_SPI_Transmit>

	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8002b36:	79bb      	ldrb	r3, [r7, #6]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	2364      	movs	r3, #100	; 0x64
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	4805      	ldr	r0, [pc, #20]	; (8002b54 <NRF24_read_registerN+0x4c>)
 8002b40:	f7fe ff10 	bl	8001964 <HAL_SPI_Receive>

	NRF24_CSN(HIGH);
 8002b44:	2001      	movs	r0, #1
 8002b46:	f7ff ff75 	bl	8002a34 <NRF24_CSN>
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200000a4 	.word	0x200000a4

08002b58 <NRF24_write_register>:

// Write Single Byte To Register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	460a      	mov	r2, r1
 8002b62:	71fb      	strb	r3, [r7, #7]
 8002b64:	4613      	mov	r3, r2
 8002b66:	71bb      	strb	r3, [r7, #6]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7ff ff63 	bl	8002a34 <NRF24_CSN>

	//Transmit register address and data
	SPI_Buf[0] = reg | CMD_W_REGISTER;
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	f043 0320 	orr.w	r3, r3, #32
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	733b      	strb	r3, [r7, #12]
	SPI_Buf[1] = value;
 8002b78:	79bb      	ldrb	r3, [r7, #6]
 8002b7a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, SPI_Buf, 2, 100);
 8002b7c:	f107 010c 	add.w	r1, r7, #12
 8002b80:	2364      	movs	r3, #100	; 0x64
 8002b82:	2202      	movs	r2, #2
 8002b84:	4804      	ldr	r0, [pc, #16]	; (8002b98 <NRF24_write_register+0x40>)
 8002b86:	f7fe fdb9 	bl	80016fc <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f7ff ff52 	bl	8002a34 <NRF24_CSN>
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	200000a4 	.word	0x200000a4

08002b9c <NRF24_write_registerN>:

// Write Multiple Bytes To Register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	71fb      	strb	r3, [r7, #7]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	71bb      	strb	r3, [r7, #6]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7ff ff41 	bl	8002a34 <NRF24_CSN>

	//Transmit register address and data
	SPI_Buf[0] = reg | CMD_W_REGISTER;
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	f043 0320 	orr.w	r3, r3, #32
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, SPI_Buf, 1, 100);
 8002bbc:	f107 010c 	add.w	r1, r7, #12
 8002bc0:	2364      	movs	r3, #100	; 0x64
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4808      	ldr	r0, [pc, #32]	; (8002be8 <NRF24_write_registerN+0x4c>)
 8002bc6:	f7fe fd99 	bl	80016fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8002bca:	79bb      	ldrb	r3, [r7, #6]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	2364      	movs	r3, #100	; 0x64
 8002bd0:	6839      	ldr	r1, [r7, #0]
 8002bd2:	4805      	ldr	r0, [pc, #20]	; (8002be8 <NRF24_write_registerN+0x4c>)
 8002bd4:	f7fe fd92 	bl	80016fc <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f7ff ff2b 	bl	8002a34 <NRF24_CSN>
}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200000a4 	.word	0x200000a4

08002bec <NRF24_ACTIVATE_cmd>:

/*########################### CUSTOM SETTINGS AND COMMANDS ##################################*/

// Activate CMD
void NRF24_ACTIVATE_cmd(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];

	NRF24_CSN(LOW);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7ff ff1e 	bl	8002a34 <NRF24_CSN>

	//Read data from Rx payload buffer
	cmdRxBuf[0] = CMD_ACTIVATE;
 8002bf8:	2350      	movs	r3, #80	; 0x50
 8002bfa:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8002bfc:	2373      	movs	r3, #115	; 0x73
 8002bfe:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8002c00:	1d39      	adds	r1, r7, #4
 8002c02:	2364      	movs	r3, #100	; 0x64
 8002c04:	2202      	movs	r2, #2
 8002c06:	4805      	ldr	r0, [pc, #20]	; (8002c1c <NRF24_ACTIVATE_cmd+0x30>)
 8002c08:	f7fe fd78 	bl	80016fc <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f7ff ff11 	bl	8002a34 <NRF24_CSN>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200000a4 	.word	0x200000a4

08002c20 <NRF24_setPayloadSize>:

// Set Payload Size
void NRF24_setPayloadSize(uint8_t size)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	73fb      	strb	r3, [r7, #15]
	payload_size = MIN(size, max_payload_size);
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	4293      	cmp	r3, r2
 8002c34:	bf28      	it	cs
 8002c36:	4613      	movcs	r3, r2
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <NRF24_setPayloadSize+0x2c>)
 8002c3c:	701a      	strb	r2, [r3, #0]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000098 	.word	0x20000098

08002c50 <NRF24_getPayloadSize>:

// Get Payload Size
uint8_t NRF24_getPayloadSize(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
	return payload_size;
 8002c54:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <NRF24_getPayloadSize+0x14>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000098 	.word	0x20000098

08002c68 <NRF24_resetStatus>:

// Reset Status
void NRF24_resetStatus(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS, NRF24_read_register(REG_CONFIG) & MASK_REG_CONFIG_RESET_STATUS);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7ff ff25 	bl	8002abc <NRF24_read_register>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	2007      	movs	r0, #7
 8002c7e:	f7ff ff6b 	bl	8002b58 <NRF24_write_register>
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <NRF24_powerDown>:

// Power Down
void NRF24_powerDown(void)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) & ~MASK_REG_CONFIG_POWER);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7ff ff16 	bl	8002abc <NRF24_read_register>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f023 0302 	bic.w	r3, r3, #2
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	4619      	mov	r1, r3
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7ff ff5c 	bl	8002b58 <NRF24_write_register>
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <NRF24_available>:

/*############################### PIPE OPERATIONS ###########################################*/

// Check For Available Data To Read
uint8_t NRF24_available(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
	uint8_t status = NRF24_read_register(REG_STATUS);
 8002caa:	2007      	movs	r0, #7
 8002cac:	f7ff ff06 	bl	8002abc <NRF24_read_register>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	71fb      	strb	r3, [r7, #7]

	uint8_t result = (status & MASK_REG_CONFIG_RX_DX);
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	71bb      	strb	r3, [r7, #6]

	if (result)
 8002cbc:	79bb      	ldrb	r3, [r7, #6]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00c      	beq.n	8002cdc <NRF24_available+0x38>
	{
		// Clear the status bit
		NRF24_write_register(REG_STATUS, MASK_REG_CONFIG_RX_DX );
 8002cc2:	2140      	movs	r1, #64	; 0x40
 8002cc4:	2007      	movs	r0, #7
 8002cc6:	f7ff ff47 	bl	8002b58 <NRF24_write_register>

		// Handle ack payload receipt
		if (status & MASK_REG_CONFIG_TX_DS)
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <NRF24_available+0x38>
		{
			NRF24_write_register(REG_STATUS, MASK_REG_CONFIG_TX_DS);
 8002cd4:	2120      	movs	r1, #32
 8002cd6:	2007      	movs	r0, #7
 8002cd8:	f7ff ff3e 	bl	8002b58 <NRF24_write_register>
		}
	}
	return result;
 8002cdc:	79bb      	ldrb	r3, [r7, #6]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <NRF24_read>:
	return retStatus;
}

// Read Data
uint8_t NRF24_read( void* buf, uint8_t len )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8002cf4:	f7ff ffac 	bl	8002c50 <NRF24_getPayloadSize>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d303      	bcc.n	8002d0a <NRF24_read+0x22>
 8002d02:	f7ff ffa5 	bl	8002c50 <NRF24_getPayloadSize>
 8002d06:	4603      	mov	r3, r0
 8002d08:	e000      	b.n	8002d0c <NRF24_read+0x24>
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	73fb      	strb	r3, [r7, #15]

	NRF24_CSN(LOW);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f7ff fe90 	bl	8002a34 <NRF24_CSN>

	//Read data from Rx payload buffer
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8002d14:	2361      	movs	r3, #97	; 0x61
 8002d16:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8002d18:	f107 010d 	add.w	r1, r7, #13
 8002d1c:	2364      	movs	r3, #100	; 0x64
 8002d1e:	2201      	movs	r2, #1
 8002d20:	480d      	ldr	r0, [pc, #52]	; (8002d58 <NRF24_read+0x70>)
 8002d22:	f7fe fceb 	bl	80016fc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	2364      	movs	r3, #100	; 0x64
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	480a      	ldr	r0, [pc, #40]	; (8002d58 <NRF24_read+0x70>)
 8002d30:	f7fe fe18 	bl	8001964 <HAL_SPI_Receive>

	NRF24_CSN(HIGH);
 8002d34:	2001      	movs	r0, #1
 8002d36:	f7ff fe7d 	bl	8002a34 <NRF24_CSN>

	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & MASK_REG_FIFO_STATUS_RX_FIFO_EMPTY_FLAG;
 8002d3a:	2017      	movs	r0, #23
 8002d3c:	f7ff febe 	bl	8002abc <NRF24_read_register>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	73bb      	strb	r3, [r7, #14]

	NRF24_flush_RX();
 8002d48:	f000 f96e 	bl	8003028 <NRF24_flush_RX>
	return rxStatus;
 8002d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200000a4 	.word	0x200000a4

08002d5c <NRF24_openReadingPipe>:
	NRF24_write_register(REG_RX_PW_P0, payload_size);
}

// Open RX Pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4601      	mov	r1, r0
 8002d64:	e9c7 2300 	strd	r2, r3, [r7]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d104      	bne.n	8002d7c <NRF24_openReadingPipe+0x20>
		pipe0_reading_address = address;
 8002d72:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <NRF24_openReadingPipe+0x8c>)
 8002d78:	e9c2 3400 	strd	r3, r4, [r2]

	if(number <= 6)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d82d      	bhi.n	8002dde <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d808      	bhi.n	8002d9a <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	4a18      	ldr	r2, [pc, #96]	; (8002dec <NRF24_openReadingPipe+0x90>)
 8002d8c:	5cd3      	ldrb	r3, [r2, r3]
 8002d8e:	4639      	mov	r1, r7
 8002d90:	2205      	movs	r2, #5
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff02 	bl	8002b9c <NRF24_write_registerN>
 8002d98:	e007      	b.n	8002daa <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	4a13      	ldr	r2, [pc, #76]	; (8002dec <NRF24_openReadingPipe+0x90>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	4639      	mov	r1, r7
 8002da2:	2201      	movs	r2, #1
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fef9 	bl	8002b9c <NRF24_write_registerN>
		}

		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number], payload_size);
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <NRF24_openReadingPipe+0x94>)
 8002dae:	5cd2      	ldrb	r2, [r2, r3]
 8002db0:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <NRF24_openReadingPipe+0x98>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4619      	mov	r1, r3
 8002db6:	4610      	mov	r0, r2
 8002db8:	f7ff fece 	bl	8002b58 <NRF24_write_register>

		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | (1 << number));
 8002dbc:	2002      	movs	r0, #2
 8002dbe:	f7ff fe7d 	bl	8002abc <NRF24_read_register>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	b25a      	sxtb	r2, r3
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	b25b      	sxtb	r3, r3
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	2002      	movs	r0, #2
 8002dda:	f7ff febd 	bl	8002b58 <NRF24_write_register>
	}
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd90      	pop	{r4, r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000090 	.word	0x20000090
 8002dec:	08004cac 	.word	0x08004cac
 8002df0:	08004cb4 	.word	0x08004cb4
 8002df4:	20000098 	.word	0x20000098

08002df8 <NRF24_startListening>:

// Start Listening On Pipes
void NRF24_startListening(void)
{
 8002df8:	b598      	push	{r3, r4, r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | MASK_REG_CONFIG_POWER_UP_RX);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7ff fe5d 	bl	8002abc <NRF24_read_register>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f043 0303 	orr.w	r3, r3, #3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7ff fea3 	bl	8002b58 <NRF24_write_register>

	// Restore Pipe 0 Address If Exists
	if(pipe0_reading_address)
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <NRF24_startListening+0x48>)
 8002e14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e18:	4323      	orrs	r3, r4
 8002e1a:	d004      	beq.n	8002e26 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8002e1c:	2205      	movs	r2, #5
 8002e1e:	4908      	ldr	r1, [pc, #32]	; (8002e40 <NRF24_startListening+0x48>)
 8002e20:	200a      	movs	r0, #10
 8002e22:	f7ff febb 	bl	8002b9c <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_TX();
 8002e26:	f000 f8f7 	bl	8003018 <NRF24_flush_TX>
	NRF24_flush_RX();
 8002e2a:	f000 f8fd 	bl	8003028 <NRF24_flush_RX>

	NRF24_CE(HIGH);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f7ff fe22 	bl	8002a78 <NRF24_CE>
	// Wait 1 ms For The Radio To Come On
	HAL_Delay(1);
 8002e34:	2001      	movs	r0, #1
 8002e36:	f7fd fc35 	bl	80006a4 <HAL_Delay>
}
 8002e3a:	bf00      	nop
 8002e3c:	bd98      	pop	{r3, r4, r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000090 	.word	0x20000090

08002e44 <NRF24_begin>:

/*########################## DEFAULT INITIALIZATION #########################################*/

// NRF24 INIT
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8002e44:	b082      	sub	sp, #8
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	460b      	mov	r3, r1
 8002e52:	807b      	strh	r3, [r7, #2]
 8002e54:	4613      	mov	r3, r2
 8002e56:	803b      	strh	r3, [r7, #0]
	// Copy SPI handle, Pins And Port Variables
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8002e58:	4b5d      	ldr	r3, [pc, #372]	; (8002fd0 <NRF24_begin+0x18c>)
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f107 031c 	add.w	r3, r7, #28
 8002e60:	2258      	movs	r2, #88	; 0x58
 8002e62:	4619      	mov	r1, r3
 8002e64:	f001 f8e2 	bl	800402c <memcpy>

	nrf24_PORT 		= 	nrf24PORT;
 8002e68:	4a5a      	ldr	r2, [pc, #360]	; (8002fd4 <NRF24_begin+0x190>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN 	= 	nrfCSN_Pin;
 8002e6e:	4a5a      	ldr	r2, [pc, #360]	; (8002fd8 <NRF24_begin+0x194>)
 8002e70:	887b      	ldrh	r3, [r7, #2]
 8002e72:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN 	= 	nrfCE_Pin;
 8002e74:	4a59      	ldr	r2, [pc, #356]	; (8002fdc <NRF24_begin+0x198>)
 8002e76:	883b      	ldrh	r3, [r7, #0]
 8002e78:	8013      	strh	r3, [r2, #0]

	// Put Pins To Idle State
	NRF24_CSN(HIGH);
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f7ff fdda 	bl	8002a34 <NRF24_CSN>
	NRF24_CE(LOW);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7ff fdf9 	bl	8002a78 <NRF24_CE>

	// Initial Delay
	HAL_Delay(5);
 8002e86:	2005      	movs	r0, #5
 8002e88:	f7fd fc0c 	bl	80006a4 <HAL_Delay>

	// Soft Reset Registers
	NRF24_write_register(REG_CONFIG, 		MASK_REG_CONFIG_2BYTES_CRC);
 8002e8c:	210c      	movs	r1, #12
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7ff fe62 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 		MASK_REG_EN_AA_AUTO_ACK_NO_PIPES);
 8002e94:	2100      	movs	r1, #0
 8002e96:	2001      	movs	r0, #1
 8002e98:	f7ff fe5e 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 	MASK_REG_EN_RXADDR_PIPES_1_2_ENABLE);
 8002e9c:	2103      	movs	r1, #3
 8002e9e:	2002      	movs	r0, #2
 8002ea0:	f7ff fe5a 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 		MASK_REG_SETUP_AW_5BYTES_ADDR_FIELD);
 8002ea4:	2103      	movs	r1, #3
 8002ea6:	2003      	movs	r0, #3
 8002ea8:	f7ff fe56 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 	MASK_REG_SETUP_RETR_SET_15RETR_1250DELAY);
 8002eac:	214f      	movs	r1, #79	; 0x4f
 8002eae:	2004      	movs	r0, #4
 8002eb0:	f7ff fe52 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 		MASK_REG_RF_CH_SET_CHANNEL_52);
 8002eb4:	2134      	movs	r1, #52	; 0x34
 8002eb6:	2005      	movs	r0, #5
 8002eb8:	f7ff fe4e 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 		MASK_REG_RF_SETUP_POWER_0DBM_2MBPS);
 8002ebc:	210f      	movs	r1, #15
 8002ebe:	2006      	movs	r0, #6
 8002ec0:	f7ff fe4a 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 		MASK_REG_STATUS_CLEAR);
 8002ec4:	210e      	movs	r1, #14
 8002ec6:	2007      	movs	r0, #7
 8002ec8:	f7ff fe46 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 	MASK_REG_OBSERVE_TX_CLEAR);
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2008      	movs	r0, #8
 8002ed0:	f7ff fe42 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_CD, 			MASK_REG_CD_CLEAR);
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	2009      	movs	r0, #9
 8002ed8:	f7ff fe3e 	bl	8002b58 <NRF24_write_register>

	uint8_t pipeAddrVar[6];
	pipeAddrVar[4] = 0xE7;
 8002edc:	23e7      	movs	r3, #231	; 0xe7
 8002ede:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xE7;
 8002ee0:	23e7      	movs	r3, #231	; 0xe7
 8002ee2:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xE7;
 8002ee4:	23e7      	movs	r3, #231	; 0xe7
 8002ee6:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xE7;
 8002ee8:	23e7      	movs	r3, #231	; 0xe7
 8002eea:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xE7;
 8002eec:	23e7      	movs	r3, #231	; 0xe7
 8002eee:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 8002ef0:	f107 0308 	add.w	r3, r7, #8
 8002ef4:	2205      	movs	r2, #5
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	200a      	movs	r0, #10
 8002efa:	f7ff fe4f 	bl	8002b9c <NRF24_write_registerN>

	pipeAddrVar[4] = 0xC2;
 8002efe:	23c2      	movs	r3, #194	; 0xc2
 8002f00:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xC2;
 8002f02:	23c2      	movs	r3, #194	; 0xc2
 8002f04:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xC2;
 8002f06:	23c2      	movs	r3, #194	; 0xc2
 8002f08:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xC2;
 8002f0a:	23c2      	movs	r3, #194	; 0xc2
 8002f0c:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xC2;
 8002f0e:	23c2      	movs	r3, #194	; 0xc2
 8002f10:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	2205      	movs	r2, #5
 8002f18:	4619      	mov	r1, r3
 8002f1a:	200b      	movs	r0, #11
 8002f1c:	f7ff fe3e 	bl	8002b9c <NRF24_write_registerN>

	NRF24_write_register(REG_RX_ADDR_P2, 	0xC3);
 8002f20:	21c3      	movs	r1, #195	; 0xc3
 8002f22:	200c      	movs	r0, #12
 8002f24:	f7ff fe18 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 	0xC4);
 8002f28:	21c4      	movs	r1, #196	; 0xc4
 8002f2a:	200d      	movs	r0, #13
 8002f2c:	f7ff fe14 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 	0xC5);
 8002f30:	21c5      	movs	r1, #197	; 0xc5
 8002f32:	200e      	movs	r0, #14
 8002f34:	f7ff fe10 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 	0xC6);
 8002f38:	21c6      	movs	r1, #198	; 0xc6
 8002f3a:	200f      	movs	r0, #15
 8002f3c:	f7ff fe0c 	bl	8002b58 <NRF24_write_register>

	pipeAddrVar[4] = 0xE7;
 8002f40:	23e7      	movs	r3, #231	; 0xe7
 8002f42:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xE7;
 8002f44:	23e7      	movs	r3, #231	; 0xe7
 8002f46:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xE7;
 8002f48:	23e7      	movs	r3, #231	; 0xe7
 8002f4a:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xE7;
 8002f4c:	23e7      	movs	r3, #231	; 0xe7
 8002f4e:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xE7;
 8002f50:	23e7      	movs	r3, #231	; 0xe7
 8002f52:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 8002f54:	f107 0308 	add.w	r3, r7, #8
 8002f58:	2205      	movs	r2, #5
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	2010      	movs	r0, #16
 8002f5e:	f7ff fe1d 	bl	8002b9c <NRF24_write_registerN>

	NRF24_write_register(REG_RX_PW_P0, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 8002f62:	2100      	movs	r1, #0
 8002f64:	2011      	movs	r0, #17
 8002f66:	f7ff fdf7 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	2012      	movs	r0, #18
 8002f6e:	f7ff fdf3 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 8002f72:	2100      	movs	r1, #0
 8002f74:	2013      	movs	r0, #19
 8002f76:	f7ff fdef 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	2014      	movs	r0, #20
 8002f7e:	f7ff fdeb 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 8002f82:	2100      	movs	r1, #0
 8002f84:	2015      	movs	r0, #21
 8002f86:	f7ff fde7 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 		MASK_REG_RX_PW_P_PIPE_NOT_USED);
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	2016      	movs	r0, #22
 8002f8e:	f7ff fde3 	bl	8002b58 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8002f92:	f7ff fe2b 	bl	8002bec <NRF24_ACTIVATE_cmd>

	NRF24_write_register(REG_DYNPD, 		MASK_REG_DYNPD_DISABLE_DYNAMIC_PAYLOAD);
 8002f96:	2100      	movs	r1, #0
 8002f98:	201c      	movs	r0, #28
 8002f9a:	f7ff fddd 	bl	8002b58 <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 		MASK_REG_FEATURE_DISABLE_DYNAMIC_PAYLOAD);
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	201d      	movs	r0, #29
 8002fa2:	f7ff fdd9 	bl	8002b58 <NRF24_write_register>

	printRadioSettings();
 8002fa6:	f000 f847 	bl	8003038 <printRadioSettings>

	//Set payload size
	NRF24_setPayloadSize(PAYLOAD_SIZE);
 8002faa:	2002      	movs	r0, #2
 8002fac:	f7ff fe38 	bl	8002c20 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8002fb0:	f7ff fe5a 	bl	8002c68 <NRF24_resetStatus>

	//Flush buffers
	NRF24_flush_TX();
 8002fb4:	f000 f830 	bl	8003018 <NRF24_flush_TX>
	NRF24_flush_RX();
 8002fb8:	f000 f836 	bl	8003028 <NRF24_flush_RX>

	NRF24_powerDown();
 8002fbc:	f7ff fe63 	bl	8002c86 <NRF24_powerDown>
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fca:	b002      	add	sp, #8
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	200000a4 	.word	0x200000a4
 8002fd4:	2000009c 	.word	0x2000009c
 8002fd8:	200000a0 	.word	0x200000a0
 8002fdc:	200000a2 	.word	0x200000a2

08002fe0 <nrf24_DebugUART_Init>:

// Init UART Debug for NRF24
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	b4b0      	push	{r4, r5, r7}
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	f107 040c 	add.w	r4, r7, #12
 8002fea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8002fee:	4b09      	ldr	r3, [pc, #36]	; (8003014 <nrf24_DebugUART_Init+0x34>)
 8002ff0:	461c      	mov	r4, r3
 8002ff2:	f107 050c 	add.w	r5, r7, #12
 8002ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003002:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800300a:	bf00      	nop
 800300c:	46bd      	mov	sp, r7
 800300e:	bcb0      	pop	{r4, r5, r7}
 8003010:	b004      	add	sp, #16
 8003012:	4770      	bx	lr
 8003014:	200000fc 	.word	0x200000fc

08003018 <NRF24_flush_TX>:

/*############################ Flush RX / TX Functions ######################################*/

// Flush TX Buffer
void NRF24_flush_TX(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, CMD_FLUSH);
 800301c:	21ff      	movs	r1, #255	; 0xff
 800301e:	20e1      	movs	r0, #225	; 0xe1
 8003020:	f7ff fd9a 	bl	8002b58 <NRF24_write_register>
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}

08003028 <NRF24_flush_RX>:

// Flush RX Buffer
void NRF24_flush_RX(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, CMD_FLUSH);
 800302c:	21ff      	movs	r1, #255	; 0xff
 800302e:	20e2      	movs	r0, #226	; 0xe2
 8003030:	f7ff fd92 	bl	8002b58 <NRF24_write_register>
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}

08003038 <printRadioSettings>:

/*############################ PRINT SETTINGS FUNCTIONS #####################################*/

// Print Radio Settings
void printRadioSettings(void)
{
 8003038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303a:	b0a1      	sub	sp, #132	; 0x84
 800303c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];

	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800303e:	f107 0308 	add.w	r3, r7, #8
 8003042:	4ab6      	ldr	r2, [pc, #728]	; (800331c <printRadioSettings+0x2e4>)
 8003044:	461c      	mov	r4, r3
 8003046:	4615      	mov	r5, r2
 8003048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800304a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800304c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800304e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003054:	682b      	ldr	r3, [r5, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	8022      	strh	r2, [r4, #0]
 800305a:	3402      	adds	r4, #2
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003060:	f107 0308 	add.w	r3, r7, #8
 8003064:	4618      	mov	r0, r3
 8003066:	f7fd f8d3 	bl	8000210 <strlen>
 800306a:	4603      	mov	r3, r0
 800306c:	b29a      	uxth	r2, r3
 800306e:	f107 0108 	add.w	r1, r7, #8
 8003072:	230a      	movs	r3, #10
 8003074:	48aa      	ldr	r0, [pc, #680]	; (8003320 <printRadioSettings+0x2e8>)
 8003076:	f7ff f87e 	bl	8002176 <HAL_UART_Transmit>

	// Print CRC Setting
	reg8Val = NRF24_read_register(REG_CONFIG);
 800307a:	2000      	movs	r0, #0
 800307c:	f7ff fd1e 	bl	8002abc <NRF24_read_register>
 8003080:	4603      	mov	r3, r0
 8003082:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8003086:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d020      	beq.n	80030d4 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2))
 8003092:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <printRadioSettings+0x7e>
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800309e:	f107 0308 	add.w	r3, r7, #8
 80030a2:	4aa0      	ldr	r2, [pc, #640]	; (8003324 <printRadioSettings+0x2ec>)
 80030a4:	461c      	mov	r4, r3
 80030a6:	4615      	mov	r5, r2
 80030a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030b4:	e017      	b.n	80030e6 <printRadioSettings+0xae>
		else
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 80030b6:	f107 0308 	add.w	r3, r7, #8
 80030ba:	4a9b      	ldr	r2, [pc, #620]	; (8003328 <printRadioSettings+0x2f0>)
 80030bc:	461c      	mov	r4, r3
 80030be:	4615      	mov	r5, r2
 80030c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030c8:	c403      	stmia	r4!, {r0, r1}
 80030ca:	8022      	strh	r2, [r4, #0]
 80030cc:	3402      	adds	r4, #2
 80030ce:	0c13      	lsrs	r3, r2, #16
 80030d0:	7023      	strb	r3, [r4, #0]
 80030d2:	e008      	b.n	80030e6 <printRadioSettings+0xae>
	}
	else
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80030d4:	f107 0308 	add.w	r3, r7, #8
 80030d8:	4a94      	ldr	r2, [pc, #592]	; (800332c <printRadioSettings+0x2f4>)
 80030da:	461c      	mov	r4, r3
 80030dc:	4615      	mov	r5, r2
 80030de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030e2:	682b      	ldr	r3, [r5, #0]
 80030e4:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80030e6:	f107 0308 	add.w	r3, r7, #8
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd f890 	bl	8000210 <strlen>
 80030f0:	4603      	mov	r3, r0
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	f107 0108 	add.w	r1, r7, #8
 80030f8:	230a      	movs	r3, #10
 80030fa:	4889      	ldr	r0, [pc, #548]	; (8003320 <printRadioSettings+0x2e8>)
 80030fc:	f7ff f83b 	bl	8002176 <HAL_UART_Transmit>

	// Print Auto ACK Setting
	reg8Val = NRF24_read_register(REG_EN_AA);
 8003100:	2001      	movs	r0, #1
 8003102:	f7ff fcdb 	bl	8002abc <NRF24_read_register>
 8003106:	4603      	mov	r3, r0
 8003108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 800310c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003110:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003114:	2b00      	cmp	r3, #0
 8003116:	bfcc      	ite	gt
 8003118:	2301      	movgt	r3, #1
 800311a:	2300      	movle	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461d      	mov	r5, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8003120:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003124:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003128:	2b00      	cmp	r3, #0
 800312a:	bfcc      	ite	gt
 800312c:	2301      	movgt	r3, #1
 800312e:	2300      	movle	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461e      	mov	r6, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8003134:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003138:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800313c:	2b00      	cmp	r3, #0
 800313e:	bfcc      	ite	gt
 8003140:	2301      	movgt	r3, #1
 8003142:	2300      	movle	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	461a      	mov	r2, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8003148:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800314c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003150:	2b00      	cmp	r3, #0
 8003152:	bfcc      	ite	gt
 8003154:	2301      	movgt	r3, #1
 8003156:	2300      	movle	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	4619      	mov	r1, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 800315c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003160:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003164:	2b00      	cmp	r3, #0
 8003166:	bfcc      	ite	gt
 8003168:	2301      	movgt	r3, #1
 800316a:	2300      	movle	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461c      	mov	r4, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8003170:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003174:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003178:	2b00      	cmp	r3, #0
 800317a:	bfcc      	ite	gt
 800317c:	2301      	movgt	r3, #1
 800317e:	2300      	movle	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f107 0008 	add.w	r0, r7, #8
 8003186:	9303      	str	r3, [sp, #12]
 8003188:	9402      	str	r4, [sp, #8]
 800318a:	9101      	str	r1, [sp, #4]
 800318c:	9200      	str	r2, [sp, #0]
 800318e:	4633      	mov	r3, r6
 8003190:	462a      	mov	r2, r5
 8003192:	4967      	ldr	r1, [pc, #412]	; (8003330 <printRadioSettings+0x2f8>)
 8003194:	f000 ff5e 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003198:	f107 0308 	add.w	r3, r7, #8
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd f837 	bl	8000210 <strlen>
 80031a2:	4603      	mov	r3, r0
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	f107 0108 	add.w	r1, r7, #8
 80031aa:	230a      	movs	r3, #10
 80031ac:	485c      	ldr	r0, [pc, #368]	; (8003320 <printRadioSettings+0x2e8>)
 80031ae:	f7fe ffe2 	bl	8002176 <HAL_UART_Transmit>

	// Print Enabled RX Addresses
	reg8Val = NRF24_read_register(REG_EN_RXADDR);
 80031b2:	2002      	movs	r0, #2
 80031b4:	f7ff fc82 	bl	8002abc <NRF24_read_register>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80031be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80031c2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bfcc      	ite	gt
 80031ca:	2301      	movgt	r3, #1
 80031cc:	2300      	movle	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	461d      	mov	r5, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80031d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80031d6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bfcc      	ite	gt
 80031de:	2301      	movgt	r3, #1
 80031e0:	2300      	movle	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	461e      	mov	r6, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80031e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80031ea:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bfcc      	ite	gt
 80031f2:	2301      	movgt	r3, #1
 80031f4:	2300      	movle	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80031fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80031fe:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003202:	2b00      	cmp	r3, #0
 8003204:	bfcc      	ite	gt
 8003206:	2301      	movgt	r3, #1
 8003208:	2300      	movle	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	4619      	mov	r1, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 800320e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003212:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003216:	2b00      	cmp	r3, #0
 8003218:	bfcc      	ite	gt
 800321a:	2301      	movgt	r3, #1
 800321c:	2300      	movle	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461c      	mov	r4, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8003222:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003226:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800322a:	2b00      	cmp	r3, #0
 800322c:	bfcc      	ite	gt
 800322e:	2301      	movgt	r3, #1
 8003230:	2300      	movle	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f107 0008 	add.w	r0, r7, #8
 8003238:	9303      	str	r3, [sp, #12]
 800323a:	9402      	str	r4, [sp, #8]
 800323c:	9101      	str	r1, [sp, #4]
 800323e:	9200      	str	r2, [sp, #0]
 8003240:	4633      	mov	r3, r6
 8003242:	462a      	mov	r2, r5
 8003244:	493b      	ldr	r1, [pc, #236]	; (8003334 <printRadioSettings+0x2fc>)
 8003246:	f000 ff05 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800324a:	f107 0308 	add.w	r3, r7, #8
 800324e:	4618      	mov	r0, r3
 8003250:	f7fc ffde 	bl	8000210 <strlen>
 8003254:	4603      	mov	r3, r0
 8003256:	b29a      	uxth	r2, r3
 8003258:	f107 0108 	add.w	r1, r7, #8
 800325c:	230a      	movs	r3, #10
 800325e:	4830      	ldr	r0, [pc, #192]	; (8003320 <printRadioSettings+0x2e8>)
 8003260:	f7fe ff89 	bl	8002176 <HAL_UART_Transmit>

	// Print Address Width
	reg8Val = NRF24_read_register(REG_SETUP_AW) & 0x03;
 8003264:	2003      	movs	r0, #3
 8003266:	f7ff fc29 	bl	8002abc <NRF24_read_register>
 800326a:	4603      	mov	r3, r0
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val += 2;
 8003274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003278:	3302      	adds	r3, #2
 800327a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800327e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003282:	f107 0308 	add.w	r3, r7, #8
 8003286:	492c      	ldr	r1, [pc, #176]	; (8003338 <printRadioSettings+0x300>)
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fee3 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800328e:	f107 0308 	add.w	r3, r7, #8
 8003292:	4618      	mov	r0, r3
 8003294:	f7fc ffbc 	bl	8000210 <strlen>
 8003298:	4603      	mov	r3, r0
 800329a:	b29a      	uxth	r2, r3
 800329c:	f107 0108 	add.w	r1, r7, #8
 80032a0:	230a      	movs	r3, #10
 80032a2:	481f      	ldr	r0, [pc, #124]	; (8003320 <printRadioSettings+0x2e8>)
 80032a4:	f7fe ff67 	bl	8002176 <HAL_UART_Transmit>

	// Print RF Channel
	reg8Val = NRF24_read_register(REG_RF_CH);
 80032a8:	2005      	movs	r0, #5
 80032aa:	f7ff fc07 	bl	8002abc <NRF24_read_register>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val & 0x7F);
 80032b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80032b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032bc:	f107 0308 	add.w	r3, r7, #8
 80032c0:	491e      	ldr	r1, [pc, #120]	; (800333c <printRadioSettings+0x304>)
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fec6 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80032c8:	f107 0308 	add.w	r3, r7, #8
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fc ff9f 	bl	8000210 <strlen>
 80032d2:	4603      	mov	r3, r0
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	f107 0108 	add.w	r1, r7, #8
 80032da:	230a      	movs	r3, #10
 80032dc:	4810      	ldr	r0, [pc, #64]	; (8003320 <printRadioSettings+0x2e8>)
 80032de:	f7fe ff4a 	bl	8002176 <HAL_UART_Transmit>

	// Print Data Rate And Power
	reg8Val = NRF24_read_register(REG_RF_SETUP);
 80032e2:	2006      	movs	r0, #6
 80032e4:	f7ff fbea 	bl	8002abc <NRF24_read_register>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80032ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d024      	beq.n	8003344 <printRadioSettings+0x30c>
		sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80032fa:	f107 0308 	add.w	r3, r7, #8
 80032fe:	4a10      	ldr	r2, [pc, #64]	; (8003340 <printRadioSettings+0x308>)
 8003300:	461c      	mov	r4, r3
 8003302:	4615      	mov	r5, r2
 8003304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003308:	e895 0003 	ldmia.w	r5, {r0, r1}
 800330c:	6020      	str	r0, [r4, #0]
 800330e:	3404      	adds	r4, #4
 8003310:	8021      	strh	r1, [r4, #0]
 8003312:	3402      	adds	r4, #2
 8003314:	0c0b      	lsrs	r3, r1, #16
 8003316:	7023      	strb	r3, [r4, #0]
 8003318:	e023      	b.n	8003362 <printRadioSettings+0x32a>
 800331a:	bf00      	nop
 800331c:	08004864 	.word	0x08004864
 8003320:	200000fc 	.word	0x200000fc
 8003324:	08004898 	.word	0x08004898
 8003328:	080048b4 	.word	0x080048b4
 800332c:	080048d0 	.word	0x080048d0
 8003330:	080048e4 	.word	0x080048e4
 8003334:	08004928 	.word	0x08004928
 8003338:	08004974 	.word	0x08004974
 800333c:	08004990 	.word	0x08004990
 8003340:	080049a4 	.word	0x080049a4
	else
		sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8003344:	f107 0308 	add.w	r3, r7, #8
 8003348:	4a29      	ldr	r2, [pc, #164]	; (80033f0 <printRadioSettings+0x3b8>)
 800334a:	461c      	mov	r4, r3
 800334c:	4615      	mov	r5, r2
 800334e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003352:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003356:	6020      	str	r0, [r4, #0]
 8003358:	3404      	adds	r4, #4
 800335a:	8021      	strh	r1, [r4, #0]
 800335c:	3402      	adds	r4, #2
 800335e:	0c0b      	lsrs	r3, r1, #16
 8003360:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003362:	f107 0308 	add.w	r3, r7, #8
 8003366:	4618      	mov	r0, r3
 8003368:	f7fc ff52 	bl	8000210 <strlen>
 800336c:	4603      	mov	r3, r0
 800336e:	b29a      	uxth	r2, r3
 8003370:	f107 0108 	add.w	r1, r7, #8
 8003374:	230a      	movs	r3, #10
 8003376:	481f      	ldr	r0, [pc, #124]	; (80033f4 <printRadioSettings+0x3bc>)
 8003378:	f7fe fefd 	bl	8002176 <HAL_UART_Transmit>

	reg8Val &= (3 << 1);
 800337c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003380:	f003 0306 	and.w	r3, r3, #6
 8003384:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val >> 1);
 8003388:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0)
 8003392:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <printRadioSettings+0x376>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800339a:	f107 0308 	add.w	r3, r7, #8
 800339e:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <printRadioSettings+0x3c0>)
 80033a0:	461c      	mov	r4, r3
 80033a2:	4615      	mov	r5, r2
 80033a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	6023      	str	r3, [r4, #0]
 80033ac:	e03b      	b.n	8003426 <printRadioSettings+0x3ee>
	else if(reg8Val == 1)
 80033ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d109      	bne.n	80033ca <printRadioSettings+0x392>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80033b6:	f107 0308 	add.w	r3, r7, #8
 80033ba:	4a10      	ldr	r2, [pc, #64]	; (80033fc <printRadioSettings+0x3c4>)
 80033bc:	461c      	mov	r4, r3
 80033be:	4615      	mov	r5, r2
 80033c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	6023      	str	r3, [r4, #0]
 80033c8:	e02d      	b.n	8003426 <printRadioSettings+0x3ee>
	else if(reg8Val == 2)
 80033ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d118      	bne.n	8003404 <printRadioSettings+0x3cc>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80033d2:	f107 0308 	add.w	r3, r7, #8
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <printRadioSettings+0x3c8>)
 80033d8:	461c      	mov	r4, r3
 80033da:	4615      	mov	r5, r2
 80033dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033e0:	682b      	ldr	r3, [r5, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	8022      	strh	r2, [r4, #0]
 80033e6:	3402      	adds	r4, #2
 80033e8:	0c1b      	lsrs	r3, r3, #16
 80033ea:	7023      	strb	r3, [r4, #0]
 80033ec:	e01b      	b.n	8003426 <printRadioSettings+0x3ee>
 80033ee:	bf00      	nop
 80033f0:	080049bc 	.word	0x080049bc
 80033f4:	200000fc 	.word	0x200000fc
 80033f8:	080049d4 	.word	0x080049d4
 80033fc:	080049e8 	.word	0x080049e8
 8003400:	080049fc 	.word	0x080049fc
	else if(reg8Val == 3)
 8003404:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003408:	2b03      	cmp	r3, #3
 800340a:	d10c      	bne.n	8003426 <printRadioSettings+0x3ee>
		sprintf(uartTxBuf, "RF_PWR:\r\n		 0dB \r\n");
 800340c:	f107 0308 	add.w	r3, r7, #8
 8003410:	4ad7      	ldr	r2, [pc, #860]	; (8003770 <printRadioSettings+0x738>)
 8003412:	461c      	mov	r4, r3
 8003414:	4615      	mov	r5, r2
 8003416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800341a:	682b      	ldr	r3, [r5, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	8022      	strh	r2, [r4, #0]
 8003420:	3402      	adds	r4, #2
 8003422:	0c1b      	lsrs	r3, r3, #16
 8003424:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003426:	f107 0308 	add.w	r3, r7, #8
 800342a:	4618      	mov	r0, r3
 800342c:	f7fc fef0 	bl	8000210 <strlen>
 8003430:	4603      	mov	r3, r0
 8003432:	b29a      	uxth	r2, r3
 8003434:	f107 0108 	add.w	r1, r7, #8
 8003438:	230a      	movs	r3, #10
 800343a:	48ce      	ldr	r0, [pc, #824]	; (8003774 <printRadioSettings+0x73c>)
 800343c:	f7fe fe9b 	bl	8002176 <HAL_UART_Transmit>

	// Print RX Pipes Addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(REG_RX_ADDR_P0, pipeAddrs, 5);
 8003440:	463b      	mov	r3, r7
 8003442:	2205      	movs	r2, #5
 8003444:	4619      	mov	r1, r3
 8003446:	200a      	movs	r0, #10
 8003448:	f7ff fb5e 	bl	8002b08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800344c:	793b      	ldrb	r3, [r7, #4]
 800344e:	461c      	mov	r4, r3
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	461d      	mov	r5, r3
 8003454:	78bb      	ldrb	r3, [r7, #2]
 8003456:	787a      	ldrb	r2, [r7, #1]
 8003458:	7839      	ldrb	r1, [r7, #0]
 800345a:	f107 0008 	add.w	r0, r7, #8
 800345e:	9102      	str	r1, [sp, #8]
 8003460:	9201      	str	r2, [sp, #4]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	462b      	mov	r3, r5
 8003466:	4622      	mov	r2, r4
 8003468:	49c3      	ldr	r1, [pc, #780]	; (8003778 <printRadioSettings+0x740>)
 800346a:	f000 fdf3 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800346e:	f107 0308 	add.w	r3, r7, #8
 8003472:	4618      	mov	r0, r3
 8003474:	f7fc fecc 	bl	8000210 <strlen>
 8003478:	4603      	mov	r3, r0
 800347a:	b29a      	uxth	r2, r3
 800347c:	f107 0108 	add.w	r1, r7, #8
 8003480:	230a      	movs	r3, #10
 8003482:	48bc      	ldr	r0, [pc, #752]	; (8003774 <printRadioSettings+0x73c>)
 8003484:	f7fe fe77 	bl	8002176 <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P1, pipeAddrs, 5);
 8003488:	463b      	mov	r3, r7
 800348a:	2205      	movs	r2, #5
 800348c:	4619      	mov	r1, r3
 800348e:	200b      	movs	r0, #11
 8003490:	f7ff fb3a 	bl	8002b08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8003494:	793b      	ldrb	r3, [r7, #4]
 8003496:	461c      	mov	r4, r3
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	461d      	mov	r5, r3
 800349c:	78bb      	ldrb	r3, [r7, #2]
 800349e:	787a      	ldrb	r2, [r7, #1]
 80034a0:	7839      	ldrb	r1, [r7, #0]
 80034a2:	f107 0008 	add.w	r0, r7, #8
 80034a6:	9102      	str	r1, [sp, #8]
 80034a8:	9201      	str	r2, [sp, #4]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	462b      	mov	r3, r5
 80034ae:	4622      	mov	r2, r4
 80034b0:	49b2      	ldr	r1, [pc, #712]	; (800377c <printRadioSettings+0x744>)
 80034b2:	f000 fdcf 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80034b6:	f107 0308 	add.w	r3, r7, #8
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fc fea8 	bl	8000210 <strlen>
 80034c0:	4603      	mov	r3, r0
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	f107 0108 	add.w	r1, r7, #8
 80034c8:	230a      	movs	r3, #10
 80034ca:	48aa      	ldr	r0, [pc, #680]	; (8003774 <printRadioSettings+0x73c>)
 80034cc:	f7fe fe53 	bl	8002176 <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P2, pipeAddrs, 1);
 80034d0:	463b      	mov	r3, r7
 80034d2:	2201      	movs	r2, #1
 80034d4:	4619      	mov	r1, r3
 80034d6:	200c      	movs	r0, #12
 80034d8:	f7ff fb16 	bl	8002b08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80034dc:	783b      	ldrb	r3, [r7, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	f107 0308 	add.w	r3, r7, #8
 80034e4:	49a6      	ldr	r1, [pc, #664]	; (8003780 <printRadioSettings+0x748>)
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fdb4 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80034ec:	f107 0308 	add.w	r3, r7, #8
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fc fe8d 	bl	8000210 <strlen>
 80034f6:	4603      	mov	r3, r0
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	f107 0108 	add.w	r1, r7, #8
 80034fe:	230a      	movs	r3, #10
 8003500:	489c      	ldr	r0, [pc, #624]	; (8003774 <printRadioSettings+0x73c>)
 8003502:	f7fe fe38 	bl	8002176 <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P3, pipeAddrs, 1);
 8003506:	463b      	mov	r3, r7
 8003508:	2201      	movs	r2, #1
 800350a:	4619      	mov	r1, r3
 800350c:	200d      	movs	r0, #13
 800350e:	f7ff fafb 	bl	8002b08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8003512:	783b      	ldrb	r3, [r7, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	f107 0308 	add.w	r3, r7, #8
 800351a:	499a      	ldr	r1, [pc, #616]	; (8003784 <printRadioSettings+0x74c>)
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fd99 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003522:	f107 0308 	add.w	r3, r7, #8
 8003526:	4618      	mov	r0, r3
 8003528:	f7fc fe72 	bl	8000210 <strlen>
 800352c:	4603      	mov	r3, r0
 800352e:	b29a      	uxth	r2, r3
 8003530:	f107 0108 	add.w	r1, r7, #8
 8003534:	230a      	movs	r3, #10
 8003536:	488f      	ldr	r0, [pc, #572]	; (8003774 <printRadioSettings+0x73c>)
 8003538:	f7fe fe1d 	bl	8002176 <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P4, pipeAddrs, 1);
 800353c:	463b      	mov	r3, r7
 800353e:	2201      	movs	r2, #1
 8003540:	4619      	mov	r1, r3
 8003542:	200e      	movs	r0, #14
 8003544:	f7ff fae0 	bl	8002b08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8003548:	783b      	ldrb	r3, [r7, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	f107 0308 	add.w	r3, r7, #8
 8003550:	498d      	ldr	r1, [pc, #564]	; (8003788 <printRadioSettings+0x750>)
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fd7e 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003558:	f107 0308 	add.w	r3, r7, #8
 800355c:	4618      	mov	r0, r3
 800355e:	f7fc fe57 	bl	8000210 <strlen>
 8003562:	4603      	mov	r3, r0
 8003564:	b29a      	uxth	r2, r3
 8003566:	f107 0108 	add.w	r1, r7, #8
 800356a:	230a      	movs	r3, #10
 800356c:	4881      	ldr	r0, [pc, #516]	; (8003774 <printRadioSettings+0x73c>)
 800356e:	f7fe fe02 	bl	8002176 <HAL_UART_Transmit>

	NRF24_read_registerN(REG_RX_ADDR_P5, pipeAddrs, 1);
 8003572:	463b      	mov	r3, r7
 8003574:	2201      	movs	r2, #1
 8003576:	4619      	mov	r1, r3
 8003578:	200f      	movs	r0, #15
 800357a:	f7ff fac5 	bl	8002b08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800357e:	783b      	ldrb	r3, [r7, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	f107 0308 	add.w	r3, r7, #8
 8003586:	4981      	ldr	r1, [pc, #516]	; (800378c <printRadioSettings+0x754>)
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fd63 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800358e:	f107 0308 	add.w	r3, r7, #8
 8003592:	4618      	mov	r0, r3
 8003594:	f7fc fe3c 	bl	8000210 <strlen>
 8003598:	4603      	mov	r3, r0
 800359a:	b29a      	uxth	r2, r3
 800359c:	f107 0108 	add.w	r1, r7, #8
 80035a0:	230a      	movs	r3, #10
 80035a2:	4874      	ldr	r0, [pc, #464]	; (8003774 <printRadioSettings+0x73c>)
 80035a4:	f7fe fde7 	bl	8002176 <HAL_UART_Transmit>

	NRF24_read_registerN(REG_TX_ADDR, pipeAddrs, 5);
 80035a8:	463b      	mov	r3, r7
 80035aa:	2205      	movs	r2, #5
 80035ac:	4619      	mov	r1, r3
 80035ae:	2010      	movs	r0, #16
 80035b0:	f7ff faaa 	bl	8002b08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80035b4:	793b      	ldrb	r3, [r7, #4]
 80035b6:	461c      	mov	r4, r3
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	461d      	mov	r5, r3
 80035bc:	78bb      	ldrb	r3, [r7, #2]
 80035be:	787a      	ldrb	r2, [r7, #1]
 80035c0:	7839      	ldrb	r1, [r7, #0]
 80035c2:	f107 0008 	add.w	r0, r7, #8
 80035c6:	9102      	str	r1, [sp, #8]
 80035c8:	9201      	str	r2, [sp, #4]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	462b      	mov	r3, r5
 80035ce:	4622      	mov	r2, r4
 80035d0:	496f      	ldr	r1, [pc, #444]	; (8003790 <printRadioSettings+0x758>)
 80035d2:	f000 fd3f 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fc fe18 	bl	8000210 <strlen>
 80035e0:	4603      	mov	r3, r0
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	f107 0108 	add.w	r1, r7, #8
 80035e8:	230a      	movs	r3, #10
 80035ea:	4862      	ldr	r0, [pc, #392]	; (8003774 <printRadioSettings+0x73c>)
 80035ec:	f7fe fdc3 	bl	8002176 <HAL_UART_Transmit>

	// Print RX Payload Width In Each Pipe
	reg8Val = NRF24_read_register(REG_RX_PW_P0);
 80035f0:	2011      	movs	r0, #17
 80035f2:	f7ff fa63 	bl	8002abc <NRF24_read_register>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80035fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003600:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003604:	f107 0308 	add.w	r3, r7, #8
 8003608:	4962      	ldr	r1, [pc, #392]	; (8003794 <printRadioSettings+0x75c>)
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fd22 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003610:	f107 0308 	add.w	r3, r7, #8
 8003614:	4618      	mov	r0, r3
 8003616:	f7fc fdfb 	bl	8000210 <strlen>
 800361a:	4603      	mov	r3, r0
 800361c:	b29a      	uxth	r2, r3
 800361e:	f107 0108 	add.w	r1, r7, #8
 8003622:	230a      	movs	r3, #10
 8003624:	4853      	ldr	r0, [pc, #332]	; (8003774 <printRadioSettings+0x73c>)
 8003626:	f7fe fda6 	bl	8002176 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P1);
 800362a:	2012      	movs	r0, #18
 800362c:	f7ff fa46 	bl	8002abc <NRF24_read_register>
 8003630:	4603      	mov	r3, r0
 8003632:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8003636:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800363a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800363e:	f107 0308 	add.w	r3, r7, #8
 8003642:	4955      	ldr	r1, [pc, #340]	; (8003798 <printRadioSettings+0x760>)
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fd05 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800364a:	f107 0308 	add.w	r3, r7, #8
 800364e:	4618      	mov	r0, r3
 8003650:	f7fc fdde 	bl	8000210 <strlen>
 8003654:	4603      	mov	r3, r0
 8003656:	b29a      	uxth	r2, r3
 8003658:	f107 0108 	add.w	r1, r7, #8
 800365c:	230a      	movs	r3, #10
 800365e:	4845      	ldr	r0, [pc, #276]	; (8003774 <printRadioSettings+0x73c>)
 8003660:	f7fe fd89 	bl	8002176 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P2);
 8003664:	2013      	movs	r0, #19
 8003666:	f7ff fa29 	bl	8002abc <NRF24_read_register>
 800366a:	4603      	mov	r3, r0
 800366c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8003670:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003674:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003678:	f107 0308 	add.w	r3, r7, #8
 800367c:	4947      	ldr	r1, [pc, #284]	; (800379c <printRadioSettings+0x764>)
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fce8 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003684:	f107 0308 	add.w	r3, r7, #8
 8003688:	4618      	mov	r0, r3
 800368a:	f7fc fdc1 	bl	8000210 <strlen>
 800368e:	4603      	mov	r3, r0
 8003690:	b29a      	uxth	r2, r3
 8003692:	f107 0108 	add.w	r1, r7, #8
 8003696:	230a      	movs	r3, #10
 8003698:	4836      	ldr	r0, [pc, #216]	; (8003774 <printRadioSettings+0x73c>)
 800369a:	f7fe fd6c 	bl	8002176 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P3);
 800369e:	2014      	movs	r0, #20
 80036a0:	f7ff fa0c 	bl	8002abc <NRF24_read_register>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80036aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80036ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036b2:	f107 0308 	add.w	r3, r7, #8
 80036b6:	493a      	ldr	r1, [pc, #232]	; (80037a0 <printRadioSettings+0x768>)
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fccb 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80036be:	f107 0308 	add.w	r3, r7, #8
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fc fda4 	bl	8000210 <strlen>
 80036c8:	4603      	mov	r3, r0
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	f107 0108 	add.w	r1, r7, #8
 80036d0:	230a      	movs	r3, #10
 80036d2:	4828      	ldr	r0, [pc, #160]	; (8003774 <printRadioSettings+0x73c>)
 80036d4:	f7fe fd4f 	bl	8002176 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P4);
 80036d8:	2015      	movs	r0, #21
 80036da:	f7ff f9ef 	bl	8002abc <NRF24_read_register>
 80036de:	4603      	mov	r3, r0
 80036e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80036e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80036e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ec:	f107 0308 	add.w	r3, r7, #8
 80036f0:	492c      	ldr	r1, [pc, #176]	; (80037a4 <printRadioSettings+0x76c>)
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fcae 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80036f8:	f107 0308 	add.w	r3, r7, #8
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fc fd87 	bl	8000210 <strlen>
 8003702:	4603      	mov	r3, r0
 8003704:	b29a      	uxth	r2, r3
 8003706:	f107 0108 	add.w	r1, r7, #8
 800370a:	230a      	movs	r3, #10
 800370c:	4819      	ldr	r0, [pc, #100]	; (8003774 <printRadioSettings+0x73c>)
 800370e:	f7fe fd32 	bl	8002176 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(REG_RX_PW_P5);
 8003712:	2016      	movs	r0, #22
 8003714:	f7ff f9d2 	bl	8002abc <NRF24_read_register>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 800371e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003722:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	491f      	ldr	r1, [pc, #124]	; (80037a8 <printRadioSettings+0x770>)
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fc91 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003732:	f107 0308 	add.w	r3, r7, #8
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc fd6a 	bl	8000210 <strlen>
 800373c:	4603      	mov	r3, r0
 800373e:	b29a      	uxth	r2, r3
 8003740:	f107 0108 	add.w	r1, r7, #8
 8003744:	230a      	movs	r3, #10
 8003746:	480b      	ldr	r0, [pc, #44]	; (8003774 <printRadioSettings+0x73c>)
 8003748:	f7fe fd15 	bl	8002176 <HAL_UART_Transmit>

	// Print Dynamic Payload Enable For Each Pipe
	reg8Val = NRF24_read_register(REG_DYNPD);
 800374c:	201c      	movs	r0, #28
 800374e:	f7ff f9b5 	bl	8002abc <NRF24_read_register>
 8003752:	4603      	mov	r3, r0
 8003754:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8003758:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800375c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003760:	2b00      	cmp	r3, #0
 8003762:	bfcc      	ite	gt
 8003764:	2301      	movgt	r3, #1
 8003766:	2300      	movle	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	461d      	mov	r5, r3
 800376c:	e01e      	b.n	80037ac <printRadioSettings+0x774>
 800376e:	bf00      	nop
 8003770:	08004a10 	.word	0x08004a10
 8003774:	200000fc 	.word	0x200000fc
 8003778:	08004a24 	.word	0x08004a24
 800377c:	08004a54 	.word	0x08004a54
 8003780:	08004a84 	.word	0x08004a84
 8003784:	08004aac 	.word	0x08004aac
 8003788:	08004ad4 	.word	0x08004ad4
 800378c:	08004afc 	.word	0x08004afc
 8003790:	08004b24 	.word	0x08004b24
 8003794:	08004b50 	.word	0x08004b50
 8003798:	08004b6c 	.word	0x08004b6c
 800379c:	08004b88 	.word	0x08004b88
 80037a0:	08004ba4 	.word	0x08004ba4
 80037a4:	08004bc0 	.word	0x08004bc0
 80037a8:	08004bdc 	.word	0x08004bdc
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80037ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80037b0:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bfcc      	ite	gt
 80037b8:	2301      	movgt	r3, #1
 80037ba:	2300      	movle	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461e      	mov	r6, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80037c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80037c4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bfcc      	ite	gt
 80037cc:	2301      	movgt	r3, #1
 80037ce:	2300      	movle	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80037d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80037d8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bfcc      	ite	gt
 80037e0:	2301      	movgt	r3, #1
 80037e2:	2300      	movle	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	4619      	mov	r1, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80037e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80037ec:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bfcc      	ite	gt
 80037f4:	2301      	movgt	r3, #1
 80037f6:	2300      	movle	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461c      	mov	r4, r3
	_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80037fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003800:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003804:	2b00      	cmp	r3, #0
 8003806:	bfcc      	ite	gt
 8003808:	2301      	movgt	r3, #1
 800380a:	2300      	movle	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f107 0008 	add.w	r0, r7, #8
 8003812:	9303      	str	r3, [sp, #12]
 8003814:	9402      	str	r4, [sp, #8]
 8003816:	9101      	str	r1, [sp, #4]
 8003818:	9200      	str	r2, [sp, #0]
 800381a:	4633      	mov	r3, r6
 800381c:	462a      	mov	r2, r5
 800381e:	494a      	ldr	r1, [pc, #296]	; (8003948 <printRadioSettings+0x910>)
 8003820:	f000 fc18 	bl	8004054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003824:	f107 0308 	add.w	r3, r7, #8
 8003828:	4618      	mov	r0, r3
 800382a:	f7fc fcf1 	bl	8000210 <strlen>
 800382e:	4603      	mov	r3, r0
 8003830:	b29a      	uxth	r2, r3
 8003832:	f107 0108 	add.w	r1, r7, #8
 8003836:	230a      	movs	r3, #10
 8003838:	4844      	ldr	r0, [pc, #272]	; (800394c <printRadioSettings+0x914>)
 800383a:	f7fe fc9c 	bl	8002176 <HAL_UART_Transmit>

	// Print If Dynamic Payload Feature Is Enabled
	reg8Val = NRF24_read_register(REG_FEATURE);
 800383e:	201d      	movs	r0, #29
 8003840:	f7ff f93c 	bl	8002abc <NRF24_read_register>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800384a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <printRadioSettings+0x838>
 8003856:	f107 0308 	add.w	r3, r7, #8
 800385a:	4a3d      	ldr	r2, [pc, #244]	; (8003950 <printRadioSettings+0x918>)
 800385c:	461c      	mov	r4, r3
 800385e:	4615      	mov	r5, r2
 8003860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003864:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003868:	6020      	str	r0, [r4, #0]
 800386a:	3404      	adds	r4, #4
 800386c:	8021      	strh	r1, [r4, #0]
 800386e:	e00e      	b.n	800388e <printRadioSettings+0x856>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8003870:	f107 0308 	add.w	r3, r7, #8
 8003874:	4a37      	ldr	r2, [pc, #220]	; (8003954 <printRadioSettings+0x91c>)
 8003876:	461c      	mov	r4, r3
 8003878:	4615      	mov	r5, r2
 800387a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800387c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800387e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003882:	6020      	str	r0, [r4, #0]
 8003884:	3404      	adds	r4, #4
 8003886:	8021      	strh	r1, [r4, #0]
 8003888:	3402      	adds	r4, #2
 800388a:	0c0b      	lsrs	r3, r1, #16
 800388c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800388e:	f107 0308 	add.w	r3, r7, #8
 8003892:	4618      	mov	r0, r3
 8003894:	f7fc fcbc 	bl	8000210 <strlen>
 8003898:	4603      	mov	r3, r0
 800389a:	b29a      	uxth	r2, r3
 800389c:	f107 0108 	add.w	r1, r7, #8
 80038a0:	230a      	movs	r3, #10
 80038a2:	482a      	ldr	r0, [pc, #168]	; (800394c <printRadioSettings+0x914>)
 80038a4:	f7fe fc67 	bl	8002176 <HAL_UART_Transmit>

	// Print If ACK Payload Feature Is Enabled
	if(reg8Val & (1 << 1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80038a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00b      	beq.n	80038cc <printRadioSettings+0x894>
 80038b4:	f107 0308 	add.w	r3, r7, #8
 80038b8:	4a27      	ldr	r2, [pc, #156]	; (8003958 <printRadioSettings+0x920>)
 80038ba:	461c      	mov	r4, r3
 80038bc:	4615      	mov	r5, r2
 80038be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038c6:	c403      	stmia	r4!, {r0, r1}
 80038c8:	8022      	strh	r2, [r4, #0]
 80038ca:	e00d      	b.n	80038e8 <printRadioSettings+0x8b0>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80038cc:	f107 0308 	add.w	r3, r7, #8
 80038d0:	4a22      	ldr	r2, [pc, #136]	; (800395c <printRadioSettings+0x924>)
 80038d2:	461c      	mov	r4, r3
 80038d4:	4615      	mov	r5, r2
 80038d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038de:	c403      	stmia	r4!, {r0, r1}
 80038e0:	8022      	strh	r2, [r4, #0]
 80038e2:	3402      	adds	r4, #2
 80038e4:	0c13      	lsrs	r3, r2, #16
 80038e6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80038e8:	f107 0308 	add.w	r3, r7, #8
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fc fc8f 	bl	8000210 <strlen>
 80038f2:	4603      	mov	r3, r0
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	f107 0108 	add.w	r1, r7, #8
 80038fa:	230a      	movs	r3, #10
 80038fc:	4813      	ldr	r0, [pc, #76]	; (800394c <printRadioSettings+0x914>)
 80038fe:	f7fe fc3a 	bl	8002176 <HAL_UART_Transmit>

	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8003902:	f107 0308 	add.w	r3, r7, #8
 8003906:	4a16      	ldr	r2, [pc, #88]	; (8003960 <printRadioSettings+0x928>)
 8003908:	461c      	mov	r4, r3
 800390a:	4615      	mov	r5, r2
 800390c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800390e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003918:	682b      	ldr	r3, [r5, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	8022      	strh	r2, [r4, #0]
 800391e:	3402      	adds	r4, #2
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003924:	f107 0308 	add.w	r3, r7, #8
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fc71 	bl	8000210 <strlen>
 800392e:	4603      	mov	r3, r0
 8003930:	b29a      	uxth	r2, r3
 8003932:	f107 0108 	add.w	r1, r7, #8
 8003936:	230a      	movs	r3, #10
 8003938:	4804      	ldr	r0, [pc, #16]	; (800394c <printRadioSettings+0x914>)
 800393a:	f7fe fc1c 	bl	8002176 <HAL_UART_Transmit>
}
 800393e:	bf00      	nop
 8003940:	3774      	adds	r7, #116	; 0x74
 8003942:	46bd      	mov	sp, r7
 8003944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003946:	bf00      	nop
 8003948:	08004bf8 	.word	0x08004bf8
 800394c:	200000fc 	.word	0x200000fc
 8003950:	08004c44 	.word	0x08004c44
 8003954:	08004c5c 	.word	0x08004c5c
 8003958:	08004c74 	.word	0x08004c74
 800395c:	08004c90 	.word	0x08004c90
 8003960:	08004864 	.word	0x08004864

08003964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	; 0x28
 8003968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396a:	f107 0314 	add.w	r3, r7, #20
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	60da      	str	r2, [r3, #12]
 8003978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	4b37      	ldr	r3, [pc, #220]	; (8003a5c <MX_GPIO_Init+0xf8>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	4a36      	ldr	r2, [pc, #216]	; (8003a5c <MX_GPIO_Init+0xf8>)
 8003984:	f043 0304 	orr.w	r3, r3, #4
 8003988:	6313      	str	r3, [r2, #48]	; 0x30
 800398a:	4b34      	ldr	r3, [pc, #208]	; (8003a5c <MX_GPIO_Init+0xf8>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <MX_GPIO_Init+0xf8>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	4a2f      	ldr	r2, [pc, #188]	; (8003a5c <MX_GPIO_Init+0xf8>)
 80039a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a4:	6313      	str	r3, [r2, #48]	; 0x30
 80039a6:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <MX_GPIO_Init+0xf8>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <MX_GPIO_Init+0xf8>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <MX_GPIO_Init+0xf8>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6313      	str	r3, [r2, #48]	; 0x30
 80039c2:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <MX_GPIO_Init+0xf8>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <MX_GPIO_Init+0xf8>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <MX_GPIO_Init+0xf8>)
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	6313      	str	r3, [r2, #48]	; 0x30
 80039de:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <MX_GPIO_Init+0xf8>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80039ea:	2200      	movs	r2, #0
 80039ec:	2120      	movs	r1, #32
 80039ee:	481c      	ldr	r0, [pc, #112]	; (8003a60 <MX_GPIO_Init+0xfc>)
 80039f0:	f7fd f8f2 	bl	8000bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 80039f4:	2200      	movs	r2, #0
 80039f6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80039fa:	481a      	ldr	r0, [pc, #104]	; (8003a64 <MX_GPIO_Init+0x100>)
 80039fc:	f7fd f8ec 	bl	8000bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a06:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <MX_GPIO_Init+0x104>)
 8003a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a0e:	f107 0314 	add.w	r3, r7, #20
 8003a12:	4619      	mov	r1, r3
 8003a14:	4813      	ldr	r0, [pc, #76]	; (8003a64 <MX_GPIO_Init+0x100>)
 8003a16:	f7fc ff4d 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a26:	2300      	movs	r3, #0
 8003a28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003a2a:	f107 0314 	add.w	r3, r7, #20
 8003a2e:	4619      	mov	r1, r3
 8003a30:	480b      	ldr	r0, [pc, #44]	; (8003a60 <MX_GPIO_Init+0xfc>)
 8003a32:	f7fc ff3f 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8003a36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a44:	2300      	movs	r3, #0
 8003a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4805      	ldr	r0, [pc, #20]	; (8003a64 <MX_GPIO_Init+0x100>)
 8003a50:	f7fc ff30 	bl	80008b4 <HAL_GPIO_Init>

}
 8003a54:	bf00      	nop
 8003a56:	3728      	adds	r7, #40	; 0x28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40020000 	.word	0x40020000
 8003a64:	40020800 	.word	0x40020800
 8003a68:	10210000 	.word	0x10210000
 8003a6c:	00000000 	.word	0x00000000

08003a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a72:	b097      	sub	sp, #92	; 0x5c
 8003a74:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a76:	f7fc fda3 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a7a:	f000 f855 	bl	8003b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a7e:	f7ff ff71 	bl	8003964 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003a82:	f000 fa0d 	bl	8003ea0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8003a86:	f000 f8c5 	bl	8003c14 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(GPIOC, NRF24_CSN_Pin, NRF24_CE_Pin, hspi2);
 8003a8a:	4c23      	ldr	r4, [pc, #140]	; (8003b18 <main+0xa8>)
 8003a8c:	4668      	mov	r0, sp
 8003a8e:	1d23      	adds	r3, r4, #4
 8003a90:	2254      	movs	r2, #84	; 0x54
 8003a92:	4619      	mov	r1, r3
 8003a94:	f000 faca 	bl	800402c <memcpy>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003aa2:	481e      	ldr	r0, [pc, #120]	; (8003b1c <main+0xac>)
 8003aa4:	f7ff f9ce 	bl	8002e44 <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 8003aa8:	4e1d      	ldr	r6, [pc, #116]	; (8003b20 <main+0xb0>)
 8003aaa:	466d      	mov	r5, sp
 8003aac:	f106 0410 	add.w	r4, r6, #16
 8003ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003abc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003ac0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003ac4:	f7ff fa8c 	bl	8002fe0 <nrf24_DebugUART_Init>

  printRadioSettings();
 8003ac8:	f7ff fab6 	bl	8003038 <printRadioSettings>

  NRF24_openReadingPipe(1, rx_pipe_addr);
 8003acc:	a410      	add	r4, pc, #64	; (adr r4, 8003b10 <main+0xa0>)
 8003ace:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f7ff f940 	bl	8002d5c <NRF24_openReadingPipe>
  NRF24_startListening();
 8003adc:	f7ff f98c 	bl	8002df8 <NRF24_startListening>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(NRF24_available()){
 8003ae0:	f7ff f8e0 	bl	8002ca4 <NRF24_available>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0fa      	beq.n	8003ae0 <main+0x70>
		  NRF24_read(my_rx_data, PAYLOAD_SIZE);
 8003aea:	2102      	movs	r1, #2
 8003aec:	480d      	ldr	r0, [pc, #52]	; (8003b24 <main+0xb4>)
 8003aee:	f7ff f8fb 	bl	8002ce8 <NRF24_read>

		  my_rx_data[PAYLOAD_SIZE] = '\r';
 8003af2:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <main+0xb4>)
 8003af4:	220d      	movs	r2, #13
 8003af6:	709a      	strb	r2, [r3, #2]
		  my_rx_data[PAYLOAD_SIZE + 1] = '\n';
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <main+0xb4>)
 8003afa:	220a      	movs	r2, #10
 8003afc:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit(&huart2, my_rx_data, PAYLOAD_SIZE + 2, 100);
 8003afe:	2364      	movs	r3, #100	; 0x64
 8003b00:	2204      	movs	r2, #4
 8003b02:	4908      	ldr	r1, [pc, #32]	; (8003b24 <main+0xb4>)
 8003b04:	4806      	ldr	r0, [pc, #24]	; (8003b20 <main+0xb0>)
 8003b06:	f7fe fb36 	bl	8002176 <HAL_UART_Transmit>
	  if(NRF24_available()){
 8003b0a:	e7e9      	b.n	8003ae0 <main+0x70>
 8003b0c:	f3af 8000 	nop.w
 8003b10:	223344aa 	.word	0x223344aa
 8003b14:	00000011 	.word	0x00000011
 8003b18:	20000170 	.word	0x20000170
 8003b1c:	40020800 	.word	0x40020800
 8003b20:	200001c8 	.word	0x200001c8
 8003b24:	2000014c 	.word	0x2000014c

08003b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b094      	sub	sp, #80	; 0x50
 8003b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b2e:	f107 031c 	add.w	r3, r7, #28
 8003b32:	2234      	movs	r2, #52	; 0x34
 8003b34:	2100      	movs	r1, #0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fa83 	bl	8004042 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b3c:	f107 0308 	add.w	r3, r7, #8
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <SystemClock_Config+0xd4>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <SystemClock_Config+0xd4>)
 8003b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b5c:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <SystemClock_Config+0xd4>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b64:	607b      	str	r3, [r7, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <SystemClock_Config+0xd8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003b74:	4a22      	ldr	r2, [pc, #136]	; (8003c00 <SystemClock_Config+0xd8>)
 8003b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <SystemClock_Config+0xd8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b90:	2310      	movs	r3, #16
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b94:	2302      	movs	r3, #2
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003ba0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003ba4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003baa:	2302      	movs	r3, #2
 8003bac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bb2:	f107 031c 	add.w	r3, r7, #28
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd fae2 	bl	8001180 <HAL_RCC_OscConfig>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003bc2:	f000 f81f 	bl	8003c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bc6:	230f      	movs	r3, #15
 8003bc8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003bdc:	f107 0308 	add.w	r3, r7, #8
 8003be0:	2102      	movs	r1, #2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd f812 	bl	8000c0c <HAL_RCC_ClockConfig>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003bee:	f000 f809 	bl	8003c04 <Error_Handler>
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	3750      	adds	r7, #80	; 0x50
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40007000 	.word	0x40007000

08003c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003c18:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <MX_SPI2_Init+0x64>)
 8003c1a:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <MX_SPI2_Init+0x68>)
 8003c1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c1e:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <MX_SPI2_Init+0x64>)
 8003c20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <MX_SPI2_Init+0x64>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <MX_SPI2_Init+0x64>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c32:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <MX_SPI2_Init+0x64>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <MX_SPI2_Init+0x64>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <MX_SPI2_Init+0x64>)
 8003c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <MX_SPI2_Init+0x64>)
 8003c48:	2220      	movs	r2, #32
 8003c4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <MX_SPI2_Init+0x64>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c52:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <MX_SPI2_Init+0x64>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c58:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <MX_SPI2_Init+0x64>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <MX_SPI2_Init+0x64>)
 8003c60:	220a      	movs	r2, #10
 8003c62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c64:	4804      	ldr	r0, [pc, #16]	; (8003c78 <MX_SPI2_Init+0x64>)
 8003c66:	f7fd fce5 	bl	8001634 <HAL_SPI_Init>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003c70:	f7ff ffc8 	bl	8003c04 <Error_Handler>
  }

}
 8003c74:	bf00      	nop
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000170 	.word	0x20000170
 8003c7c:	40003800 	.word	0x40003800

08003c80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c88:	f107 0314 	add.w	r3, r7, #20
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	60da      	str	r2, [r3, #12]
 8003c96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a30      	ldr	r2, [pc, #192]	; (8003d60 <HAL_SPI_MspInit+0xe0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d15a      	bne.n	8003d58 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	4b2f      	ldr	r3, [pc, #188]	; (8003d64 <HAL_SPI_MspInit+0xe4>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a2e      	ldr	r2, [pc, #184]	; (8003d64 <HAL_SPI_MspInit+0xe4>)
 8003cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb2:	4b2c      	ldr	r3, [pc, #176]	; (8003d64 <HAL_SPI_MspInit+0xe4>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <HAL_SPI_MspInit+0xe4>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	4a27      	ldr	r2, [pc, #156]	; (8003d64 <HAL_SPI_MspInit+0xe4>)
 8003cc8:	f043 0304 	orr.w	r3, r3, #4
 8003ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cce:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <HAL_SPI_MspInit+0xe4>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <HAL_SPI_MspInit+0xe4>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <HAL_SPI_MspInit+0xe4>)
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cea:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <HAL_SPI_MspInit+0xe4>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d02:	2303      	movs	r3, #3
 8003d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8003d06:	2307      	movs	r3, #7
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d0a:	f107 0314 	add.w	r3, r7, #20
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4815      	ldr	r0, [pc, #84]	; (8003d68 <HAL_SPI_MspInit+0xe8>)
 8003d12:	f7fc fdcf 	bl	80008b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d16:	2304      	movs	r3, #4
 8003d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d22:	2303      	movs	r3, #3
 8003d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d26:	2305      	movs	r3, #5
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d2a:	f107 0314 	add.w	r3, r7, #20
 8003d2e:	4619      	mov	r1, r3
 8003d30:	480d      	ldr	r0, [pc, #52]	; (8003d68 <HAL_SPI_MspInit+0xe8>)
 8003d32:	f7fc fdbf 	bl	80008b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d44:	2303      	movs	r3, #3
 8003d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d48:	2305      	movs	r3, #5
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d4c:	f107 0314 	add.w	r3, r7, #20
 8003d50:	4619      	mov	r1, r3
 8003d52:	4806      	ldr	r0, [pc, #24]	; (8003d6c <HAL_SPI_MspInit+0xec>)
 8003d54:	f7fc fdae 	bl	80008b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40003800 	.word	0x40003800
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40020800 	.word	0x40020800
 8003d6c:	40020400 	.word	0x40020400

08003d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <HAL_MspInit+0x4c>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	4a0f      	ldr	r2, [pc, #60]	; (8003dbc <HAL_MspInit+0x4c>)
 8003d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d84:	6453      	str	r3, [r2, #68]	; 0x44
 8003d86:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <HAL_MspInit+0x4c>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_MspInit+0x4c>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <HAL_MspInit+0x4c>)
 8003d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da0:	6413      	str	r3, [r2, #64]	; 0x40
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_MspInit+0x4c>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003dae:	2007      	movs	r0, #7
 8003db0:	f7fc fd4c 	bl	800084c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40023800 	.word	0x40023800

08003dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dd2:	e7fe      	b.n	8003dd2 <HardFault_Handler+0x4>

08003dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dd8:	e7fe      	b.n	8003dd8 <MemManage_Handler+0x4>

08003dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dde:	e7fe      	b.n	8003dde <BusFault_Handler+0x4>

08003de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003de4:	e7fe      	b.n	8003de4 <UsageFault_Handler+0x4>

08003de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003de6:	b480      	push	{r7}
 8003de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dea:	bf00      	nop
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e02:	b480      	push	{r7}
 8003e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e14:	f7fc fc26 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e18:	bf00      	nop
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <_sbrk+0x50>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <_sbrk+0x16>
		heap_end = &end;
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <_sbrk+0x50>)
 8003e2e:	4a10      	ldr	r2, [pc, #64]	; (8003e70 <_sbrk+0x54>)
 8003e30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003e32:	4b0e      	ldr	r3, [pc, #56]	; (8003e6c <_sbrk+0x50>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003e38:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <_sbrk+0x50>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	466a      	mov	r2, sp
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d907      	bls.n	8003e56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003e46:	f000 f8c7 	bl	8003fd8 <__errno>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	230c      	movs	r3, #12
 8003e4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295
 8003e54:	e006      	b.n	8003e64 <_sbrk+0x48>
	}

	heap_end += incr;
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <_sbrk+0x50>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	4a03      	ldr	r2, [pc, #12]	; (8003e6c <_sbrk+0x50>)
 8003e60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003e62:	68fb      	ldr	r3, [r7, #12]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	2000013c 	.word	0x2000013c
 8003e70:	20000210 	.word	0x20000210

08003e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e78:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <SystemInit+0x28>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <SystemInit+0x28>)
 8003e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e88:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <SystemInit+0x28>)
 8003e8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e8e:	609a      	str	r2, [r3, #8]
#endif
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <MX_USART2_UART_Init+0x4c>)
 8003ea6:	4a12      	ldr	r2, [pc, #72]	; (8003ef0 <MX_USART2_UART_Init+0x50>)
 8003ea8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003eaa:	4b10      	ldr	r3, [pc, #64]	; (8003eec <MX_USART2_UART_Init+0x4c>)
 8003eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003eb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003eb2:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <MX_USART2_UART_Init+0x4c>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <MX_USART2_UART_Init+0x4c>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <MX_USART2_UART_Init+0x4c>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <MX_USART2_UART_Init+0x4c>)
 8003ec6:	220c      	movs	r2, #12
 8003ec8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eca:	4b08      	ldr	r3, [pc, #32]	; (8003eec <MX_USART2_UART_Init+0x4c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <MX_USART2_UART_Init+0x4c>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ed6:	4805      	ldr	r0, [pc, #20]	; (8003eec <MX_USART2_UART_Init+0x4c>)
 8003ed8:	f7fe f900 	bl	80020dc <HAL_UART_Init>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ee2:	f7ff fe8f 	bl	8003c04 <Error_Handler>
  }

}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200001c8 	.word	0x200001c8
 8003ef0:	40004400 	.word	0x40004400

08003ef4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	; 0x28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <HAL_UART_MspInit+0x84>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d12b      	bne.n	8003f6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <HAL_UART_MspInit+0x88>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <HAL_UART_MspInit+0x88>)
 8003f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f24:	6413      	str	r3, [r2, #64]	; 0x40
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <HAL_UART_MspInit+0x88>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <HAL_UART_MspInit+0x88>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	4a10      	ldr	r2, [pc, #64]	; (8003f7c <HAL_UART_MspInit+0x88>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6313      	str	r3, [r2, #48]	; 0x30
 8003f42:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <HAL_UART_MspInit+0x88>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003f4e:	230c      	movs	r3, #12
 8003f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f52:	2302      	movs	r3, #2
 8003f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f5e:	2307      	movs	r3, #7
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f62:	f107 0314 	add.w	r3, r7, #20
 8003f66:	4619      	mov	r1, r3
 8003f68:	4805      	ldr	r0, [pc, #20]	; (8003f80 <HAL_UART_MspInit+0x8c>)
 8003f6a:	f7fc fca3 	bl	80008b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003f6e:	bf00      	nop
 8003f70:	3728      	adds	r7, #40	; 0x28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40004400 	.word	0x40004400
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40020000 	.word	0x40020000

08003f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f8a:	e003      	b.n	8003f94 <LoopCopyDataInit>

08003f8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f92:	3104      	adds	r1, #4

08003f94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f94:	480b      	ldr	r0, [pc, #44]	; (8003fc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f9c:	d3f6      	bcc.n	8003f8c <CopyDataInit>
  ldr  r2, =_sbss
 8003f9e:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003fa0:	e002      	b.n	8003fa8 <LoopFillZerobss>

08003fa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003fa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003fa4:	f842 3b04 	str.w	r3, [r2], #4

08003fa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003faa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003fac:	d3f9      	bcc.n	8003fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003fae:	f7ff ff61 	bl	8003e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fb2:	f000 f817 	bl	8003fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fb6:	f7ff fd5b 	bl	8003a70 <main>
  bx  lr    
 8003fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003fc0:	08004d18 	.word	0x08004d18
  ldr  r0, =_sdata
 8003fc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003fc8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003fcc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003fd0:	2000020c 	.word	0x2000020c

08003fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fd4:	e7fe      	b.n	8003fd4 <ADC_IRQHandler>
	...

08003fd8 <__errno>:
 8003fd8:	4b01      	ldr	r3, [pc, #4]	; (8003fe0 <__errno+0x8>)
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	2000000c 	.word	0x2000000c

08003fe4 <__libc_init_array>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	4e0d      	ldr	r6, [pc, #52]	; (800401c <__libc_init_array+0x38>)
 8003fe8:	4c0d      	ldr	r4, [pc, #52]	; (8004020 <__libc_init_array+0x3c>)
 8003fea:	1ba4      	subs	r4, r4, r6
 8003fec:	10a4      	asrs	r4, r4, #2
 8003fee:	2500      	movs	r5, #0
 8003ff0:	42a5      	cmp	r5, r4
 8003ff2:	d109      	bne.n	8004008 <__libc_init_array+0x24>
 8003ff4:	4e0b      	ldr	r6, [pc, #44]	; (8004024 <__libc_init_array+0x40>)
 8003ff6:	4c0c      	ldr	r4, [pc, #48]	; (8004028 <__libc_init_array+0x44>)
 8003ff8:	f000 fc28 	bl	800484c <_init>
 8003ffc:	1ba4      	subs	r4, r4, r6
 8003ffe:	10a4      	asrs	r4, r4, #2
 8004000:	2500      	movs	r5, #0
 8004002:	42a5      	cmp	r5, r4
 8004004:	d105      	bne.n	8004012 <__libc_init_array+0x2e>
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800400c:	4798      	blx	r3
 800400e:	3501      	adds	r5, #1
 8004010:	e7ee      	b.n	8003ff0 <__libc_init_array+0xc>
 8004012:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004016:	4798      	blx	r3
 8004018:	3501      	adds	r5, #1
 800401a:	e7f2      	b.n	8004002 <__libc_init_array+0x1e>
 800401c:	08004d10 	.word	0x08004d10
 8004020:	08004d10 	.word	0x08004d10
 8004024:	08004d10 	.word	0x08004d10
 8004028:	08004d14 	.word	0x08004d14

0800402c <memcpy>:
 800402c:	b510      	push	{r4, lr}
 800402e:	1e43      	subs	r3, r0, #1
 8004030:	440a      	add	r2, r1
 8004032:	4291      	cmp	r1, r2
 8004034:	d100      	bne.n	8004038 <memcpy+0xc>
 8004036:	bd10      	pop	{r4, pc}
 8004038:	f811 4b01 	ldrb.w	r4, [r1], #1
 800403c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004040:	e7f7      	b.n	8004032 <memcpy+0x6>

08004042 <memset>:
 8004042:	4402      	add	r2, r0
 8004044:	4603      	mov	r3, r0
 8004046:	4293      	cmp	r3, r2
 8004048:	d100      	bne.n	800404c <memset+0xa>
 800404a:	4770      	bx	lr
 800404c:	f803 1b01 	strb.w	r1, [r3], #1
 8004050:	e7f9      	b.n	8004046 <memset+0x4>
	...

08004054 <siprintf>:
 8004054:	b40e      	push	{r1, r2, r3}
 8004056:	b500      	push	{lr}
 8004058:	b09c      	sub	sp, #112	; 0x70
 800405a:	ab1d      	add	r3, sp, #116	; 0x74
 800405c:	9002      	str	r0, [sp, #8]
 800405e:	9006      	str	r0, [sp, #24]
 8004060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004064:	4809      	ldr	r0, [pc, #36]	; (800408c <siprintf+0x38>)
 8004066:	9107      	str	r1, [sp, #28]
 8004068:	9104      	str	r1, [sp, #16]
 800406a:	4909      	ldr	r1, [pc, #36]	; (8004090 <siprintf+0x3c>)
 800406c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004070:	9105      	str	r1, [sp, #20]
 8004072:	6800      	ldr	r0, [r0, #0]
 8004074:	9301      	str	r3, [sp, #4]
 8004076:	a902      	add	r1, sp, #8
 8004078:	f000 f866 	bl	8004148 <_svfiprintf_r>
 800407c:	9b02      	ldr	r3, [sp, #8]
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	b01c      	add	sp, #112	; 0x70
 8004084:	f85d eb04 	ldr.w	lr, [sp], #4
 8004088:	b003      	add	sp, #12
 800408a:	4770      	bx	lr
 800408c:	2000000c 	.word	0x2000000c
 8004090:	ffff0208 	.word	0xffff0208

08004094 <__ssputs_r>:
 8004094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004098:	688e      	ldr	r6, [r1, #8]
 800409a:	429e      	cmp	r6, r3
 800409c:	4682      	mov	sl, r0
 800409e:	460c      	mov	r4, r1
 80040a0:	4690      	mov	r8, r2
 80040a2:	4699      	mov	r9, r3
 80040a4:	d837      	bhi.n	8004116 <__ssputs_r+0x82>
 80040a6:	898a      	ldrh	r2, [r1, #12]
 80040a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040ac:	d031      	beq.n	8004112 <__ssputs_r+0x7e>
 80040ae:	6825      	ldr	r5, [r4, #0]
 80040b0:	6909      	ldr	r1, [r1, #16]
 80040b2:	1a6f      	subs	r7, r5, r1
 80040b4:	6965      	ldr	r5, [r4, #20]
 80040b6:	2302      	movs	r3, #2
 80040b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80040c0:	f109 0301 	add.w	r3, r9, #1
 80040c4:	443b      	add	r3, r7
 80040c6:	429d      	cmp	r5, r3
 80040c8:	bf38      	it	cc
 80040ca:	461d      	movcc	r5, r3
 80040cc:	0553      	lsls	r3, r2, #21
 80040ce:	d530      	bpl.n	8004132 <__ssputs_r+0x9e>
 80040d0:	4629      	mov	r1, r5
 80040d2:	f000 fb21 	bl	8004718 <_malloc_r>
 80040d6:	4606      	mov	r6, r0
 80040d8:	b950      	cbnz	r0, 80040f0 <__ssputs_r+0x5c>
 80040da:	230c      	movs	r3, #12
 80040dc:	f8ca 3000 	str.w	r3, [sl]
 80040e0:	89a3      	ldrh	r3, [r4, #12]
 80040e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e6:	81a3      	strh	r3, [r4, #12]
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f0:	463a      	mov	r2, r7
 80040f2:	6921      	ldr	r1, [r4, #16]
 80040f4:	f7ff ff9a 	bl	800402c <memcpy>
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	6126      	str	r6, [r4, #16]
 8004106:	6165      	str	r5, [r4, #20]
 8004108:	443e      	add	r6, r7
 800410a:	1bed      	subs	r5, r5, r7
 800410c:	6026      	str	r6, [r4, #0]
 800410e:	60a5      	str	r5, [r4, #8]
 8004110:	464e      	mov	r6, r9
 8004112:	454e      	cmp	r6, r9
 8004114:	d900      	bls.n	8004118 <__ssputs_r+0x84>
 8004116:	464e      	mov	r6, r9
 8004118:	4632      	mov	r2, r6
 800411a:	4641      	mov	r1, r8
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	f000 fa93 	bl	8004648 <memmove>
 8004122:	68a3      	ldr	r3, [r4, #8]
 8004124:	1b9b      	subs	r3, r3, r6
 8004126:	60a3      	str	r3, [r4, #8]
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	441e      	add	r6, r3
 800412c:	6026      	str	r6, [r4, #0]
 800412e:	2000      	movs	r0, #0
 8004130:	e7dc      	b.n	80040ec <__ssputs_r+0x58>
 8004132:	462a      	mov	r2, r5
 8004134:	f000 fb4a 	bl	80047cc <_realloc_r>
 8004138:	4606      	mov	r6, r0
 800413a:	2800      	cmp	r0, #0
 800413c:	d1e2      	bne.n	8004104 <__ssputs_r+0x70>
 800413e:	6921      	ldr	r1, [r4, #16]
 8004140:	4650      	mov	r0, sl
 8004142:	f000 fa9b 	bl	800467c <_free_r>
 8004146:	e7c8      	b.n	80040da <__ssputs_r+0x46>

08004148 <_svfiprintf_r>:
 8004148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414c:	461d      	mov	r5, r3
 800414e:	898b      	ldrh	r3, [r1, #12]
 8004150:	061f      	lsls	r7, r3, #24
 8004152:	b09d      	sub	sp, #116	; 0x74
 8004154:	4680      	mov	r8, r0
 8004156:	460c      	mov	r4, r1
 8004158:	4616      	mov	r6, r2
 800415a:	d50f      	bpl.n	800417c <_svfiprintf_r+0x34>
 800415c:	690b      	ldr	r3, [r1, #16]
 800415e:	b96b      	cbnz	r3, 800417c <_svfiprintf_r+0x34>
 8004160:	2140      	movs	r1, #64	; 0x40
 8004162:	f000 fad9 	bl	8004718 <_malloc_r>
 8004166:	6020      	str	r0, [r4, #0]
 8004168:	6120      	str	r0, [r4, #16]
 800416a:	b928      	cbnz	r0, 8004178 <_svfiprintf_r+0x30>
 800416c:	230c      	movs	r3, #12
 800416e:	f8c8 3000 	str.w	r3, [r8]
 8004172:	f04f 30ff 	mov.w	r0, #4294967295
 8004176:	e0c8      	b.n	800430a <_svfiprintf_r+0x1c2>
 8004178:	2340      	movs	r3, #64	; 0x40
 800417a:	6163      	str	r3, [r4, #20]
 800417c:	2300      	movs	r3, #0
 800417e:	9309      	str	r3, [sp, #36]	; 0x24
 8004180:	2320      	movs	r3, #32
 8004182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004186:	2330      	movs	r3, #48	; 0x30
 8004188:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800418c:	9503      	str	r5, [sp, #12]
 800418e:	f04f 0b01 	mov.w	fp, #1
 8004192:	4637      	mov	r7, r6
 8004194:	463d      	mov	r5, r7
 8004196:	f815 3b01 	ldrb.w	r3, [r5], #1
 800419a:	b10b      	cbz	r3, 80041a0 <_svfiprintf_r+0x58>
 800419c:	2b25      	cmp	r3, #37	; 0x25
 800419e:	d13e      	bne.n	800421e <_svfiprintf_r+0xd6>
 80041a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80041a4:	d00b      	beq.n	80041be <_svfiprintf_r+0x76>
 80041a6:	4653      	mov	r3, sl
 80041a8:	4632      	mov	r2, r6
 80041aa:	4621      	mov	r1, r4
 80041ac:	4640      	mov	r0, r8
 80041ae:	f7ff ff71 	bl	8004094 <__ssputs_r>
 80041b2:	3001      	adds	r0, #1
 80041b4:	f000 80a4 	beq.w	8004300 <_svfiprintf_r+0x1b8>
 80041b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ba:	4453      	add	r3, sl
 80041bc:	9309      	str	r3, [sp, #36]	; 0x24
 80041be:	783b      	ldrb	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 809d 	beq.w	8004300 <_svfiprintf_r+0x1b8>
 80041c6:	2300      	movs	r3, #0
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295
 80041cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041d0:	9304      	str	r3, [sp, #16]
 80041d2:	9307      	str	r3, [sp, #28]
 80041d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041d8:	931a      	str	r3, [sp, #104]	; 0x68
 80041da:	462f      	mov	r7, r5
 80041dc:	2205      	movs	r2, #5
 80041de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80041e2:	4850      	ldr	r0, [pc, #320]	; (8004324 <_svfiprintf_r+0x1dc>)
 80041e4:	f7fc f81c 	bl	8000220 <memchr>
 80041e8:	9b04      	ldr	r3, [sp, #16]
 80041ea:	b9d0      	cbnz	r0, 8004222 <_svfiprintf_r+0xda>
 80041ec:	06d9      	lsls	r1, r3, #27
 80041ee:	bf44      	itt	mi
 80041f0:	2220      	movmi	r2, #32
 80041f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041f6:	071a      	lsls	r2, r3, #28
 80041f8:	bf44      	itt	mi
 80041fa:	222b      	movmi	r2, #43	; 0x2b
 80041fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004200:	782a      	ldrb	r2, [r5, #0]
 8004202:	2a2a      	cmp	r2, #42	; 0x2a
 8004204:	d015      	beq.n	8004232 <_svfiprintf_r+0xea>
 8004206:	9a07      	ldr	r2, [sp, #28]
 8004208:	462f      	mov	r7, r5
 800420a:	2000      	movs	r0, #0
 800420c:	250a      	movs	r5, #10
 800420e:	4639      	mov	r1, r7
 8004210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004214:	3b30      	subs	r3, #48	; 0x30
 8004216:	2b09      	cmp	r3, #9
 8004218:	d94d      	bls.n	80042b6 <_svfiprintf_r+0x16e>
 800421a:	b1b8      	cbz	r0, 800424c <_svfiprintf_r+0x104>
 800421c:	e00f      	b.n	800423e <_svfiprintf_r+0xf6>
 800421e:	462f      	mov	r7, r5
 8004220:	e7b8      	b.n	8004194 <_svfiprintf_r+0x4c>
 8004222:	4a40      	ldr	r2, [pc, #256]	; (8004324 <_svfiprintf_r+0x1dc>)
 8004224:	1a80      	subs	r0, r0, r2
 8004226:	fa0b f000 	lsl.w	r0, fp, r0
 800422a:	4318      	orrs	r0, r3
 800422c:	9004      	str	r0, [sp, #16]
 800422e:	463d      	mov	r5, r7
 8004230:	e7d3      	b.n	80041da <_svfiprintf_r+0x92>
 8004232:	9a03      	ldr	r2, [sp, #12]
 8004234:	1d11      	adds	r1, r2, #4
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	9103      	str	r1, [sp, #12]
 800423a:	2a00      	cmp	r2, #0
 800423c:	db01      	blt.n	8004242 <_svfiprintf_r+0xfa>
 800423e:	9207      	str	r2, [sp, #28]
 8004240:	e004      	b.n	800424c <_svfiprintf_r+0x104>
 8004242:	4252      	negs	r2, r2
 8004244:	f043 0302 	orr.w	r3, r3, #2
 8004248:	9207      	str	r2, [sp, #28]
 800424a:	9304      	str	r3, [sp, #16]
 800424c:	783b      	ldrb	r3, [r7, #0]
 800424e:	2b2e      	cmp	r3, #46	; 0x2e
 8004250:	d10c      	bne.n	800426c <_svfiprintf_r+0x124>
 8004252:	787b      	ldrb	r3, [r7, #1]
 8004254:	2b2a      	cmp	r3, #42	; 0x2a
 8004256:	d133      	bne.n	80042c0 <_svfiprintf_r+0x178>
 8004258:	9b03      	ldr	r3, [sp, #12]
 800425a:	1d1a      	adds	r2, r3, #4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	9203      	str	r2, [sp, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	bfb8      	it	lt
 8004264:	f04f 33ff 	movlt.w	r3, #4294967295
 8004268:	3702      	adds	r7, #2
 800426a:	9305      	str	r3, [sp, #20]
 800426c:	4d2e      	ldr	r5, [pc, #184]	; (8004328 <_svfiprintf_r+0x1e0>)
 800426e:	7839      	ldrb	r1, [r7, #0]
 8004270:	2203      	movs	r2, #3
 8004272:	4628      	mov	r0, r5
 8004274:	f7fb ffd4 	bl	8000220 <memchr>
 8004278:	b138      	cbz	r0, 800428a <_svfiprintf_r+0x142>
 800427a:	2340      	movs	r3, #64	; 0x40
 800427c:	1b40      	subs	r0, r0, r5
 800427e:	fa03 f000 	lsl.w	r0, r3, r0
 8004282:	9b04      	ldr	r3, [sp, #16]
 8004284:	4303      	orrs	r3, r0
 8004286:	3701      	adds	r7, #1
 8004288:	9304      	str	r3, [sp, #16]
 800428a:	7839      	ldrb	r1, [r7, #0]
 800428c:	4827      	ldr	r0, [pc, #156]	; (800432c <_svfiprintf_r+0x1e4>)
 800428e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004292:	2206      	movs	r2, #6
 8004294:	1c7e      	adds	r6, r7, #1
 8004296:	f7fb ffc3 	bl	8000220 <memchr>
 800429a:	2800      	cmp	r0, #0
 800429c:	d038      	beq.n	8004310 <_svfiprintf_r+0x1c8>
 800429e:	4b24      	ldr	r3, [pc, #144]	; (8004330 <_svfiprintf_r+0x1e8>)
 80042a0:	bb13      	cbnz	r3, 80042e8 <_svfiprintf_r+0x1a0>
 80042a2:	9b03      	ldr	r3, [sp, #12]
 80042a4:	3307      	adds	r3, #7
 80042a6:	f023 0307 	bic.w	r3, r3, #7
 80042aa:	3308      	adds	r3, #8
 80042ac:	9303      	str	r3, [sp, #12]
 80042ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b0:	444b      	add	r3, r9
 80042b2:	9309      	str	r3, [sp, #36]	; 0x24
 80042b4:	e76d      	b.n	8004192 <_svfiprintf_r+0x4a>
 80042b6:	fb05 3202 	mla	r2, r5, r2, r3
 80042ba:	2001      	movs	r0, #1
 80042bc:	460f      	mov	r7, r1
 80042be:	e7a6      	b.n	800420e <_svfiprintf_r+0xc6>
 80042c0:	2300      	movs	r3, #0
 80042c2:	3701      	adds	r7, #1
 80042c4:	9305      	str	r3, [sp, #20]
 80042c6:	4619      	mov	r1, r3
 80042c8:	250a      	movs	r5, #10
 80042ca:	4638      	mov	r0, r7
 80042cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042d0:	3a30      	subs	r2, #48	; 0x30
 80042d2:	2a09      	cmp	r2, #9
 80042d4:	d903      	bls.n	80042de <_svfiprintf_r+0x196>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0c8      	beq.n	800426c <_svfiprintf_r+0x124>
 80042da:	9105      	str	r1, [sp, #20]
 80042dc:	e7c6      	b.n	800426c <_svfiprintf_r+0x124>
 80042de:	fb05 2101 	mla	r1, r5, r1, r2
 80042e2:	2301      	movs	r3, #1
 80042e4:	4607      	mov	r7, r0
 80042e6:	e7f0      	b.n	80042ca <_svfiprintf_r+0x182>
 80042e8:	ab03      	add	r3, sp, #12
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	4622      	mov	r2, r4
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <_svfiprintf_r+0x1ec>)
 80042f0:	a904      	add	r1, sp, #16
 80042f2:	4640      	mov	r0, r8
 80042f4:	f3af 8000 	nop.w
 80042f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80042fc:	4681      	mov	r9, r0
 80042fe:	d1d6      	bne.n	80042ae <_svfiprintf_r+0x166>
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	065b      	lsls	r3, r3, #25
 8004304:	f53f af35 	bmi.w	8004172 <_svfiprintf_r+0x2a>
 8004308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800430a:	b01d      	add	sp, #116	; 0x74
 800430c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004310:	ab03      	add	r3, sp, #12
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	4622      	mov	r2, r4
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <_svfiprintf_r+0x1ec>)
 8004318:	a904      	add	r1, sp, #16
 800431a:	4640      	mov	r0, r8
 800431c:	f000 f882 	bl	8004424 <_printf_i>
 8004320:	e7ea      	b.n	80042f8 <_svfiprintf_r+0x1b0>
 8004322:	bf00      	nop
 8004324:	08004cd4 	.word	0x08004cd4
 8004328:	08004cda 	.word	0x08004cda
 800432c:	08004cde 	.word	0x08004cde
 8004330:	00000000 	.word	0x00000000
 8004334:	08004095 	.word	0x08004095

08004338 <_printf_common>:
 8004338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800433c:	4691      	mov	r9, r2
 800433e:	461f      	mov	r7, r3
 8004340:	688a      	ldr	r2, [r1, #8]
 8004342:	690b      	ldr	r3, [r1, #16]
 8004344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004348:	4293      	cmp	r3, r2
 800434a:	bfb8      	it	lt
 800434c:	4613      	movlt	r3, r2
 800434e:	f8c9 3000 	str.w	r3, [r9]
 8004352:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004356:	4606      	mov	r6, r0
 8004358:	460c      	mov	r4, r1
 800435a:	b112      	cbz	r2, 8004362 <_printf_common+0x2a>
 800435c:	3301      	adds	r3, #1
 800435e:	f8c9 3000 	str.w	r3, [r9]
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	0699      	lsls	r1, r3, #26
 8004366:	bf42      	ittt	mi
 8004368:	f8d9 3000 	ldrmi.w	r3, [r9]
 800436c:	3302      	addmi	r3, #2
 800436e:	f8c9 3000 	strmi.w	r3, [r9]
 8004372:	6825      	ldr	r5, [r4, #0]
 8004374:	f015 0506 	ands.w	r5, r5, #6
 8004378:	d107      	bne.n	800438a <_printf_common+0x52>
 800437a:	f104 0a19 	add.w	sl, r4, #25
 800437e:	68e3      	ldr	r3, [r4, #12]
 8004380:	f8d9 2000 	ldr.w	r2, [r9]
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	42ab      	cmp	r3, r5
 8004388:	dc28      	bgt.n	80043dc <_printf_common+0xa4>
 800438a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800438e:	6822      	ldr	r2, [r4, #0]
 8004390:	3300      	adds	r3, #0
 8004392:	bf18      	it	ne
 8004394:	2301      	movne	r3, #1
 8004396:	0692      	lsls	r2, r2, #26
 8004398:	d42d      	bmi.n	80043f6 <_printf_common+0xbe>
 800439a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800439e:	4639      	mov	r1, r7
 80043a0:	4630      	mov	r0, r6
 80043a2:	47c0      	blx	r8
 80043a4:	3001      	adds	r0, #1
 80043a6:	d020      	beq.n	80043ea <_printf_common+0xb2>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	68e5      	ldr	r5, [r4, #12]
 80043ac:	f8d9 2000 	ldr.w	r2, [r9]
 80043b0:	f003 0306 	and.w	r3, r3, #6
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	bf08      	it	eq
 80043b8:	1aad      	subeq	r5, r5, r2
 80043ba:	68a3      	ldr	r3, [r4, #8]
 80043bc:	6922      	ldr	r2, [r4, #16]
 80043be:	bf0c      	ite	eq
 80043c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043c4:	2500      	movne	r5, #0
 80043c6:	4293      	cmp	r3, r2
 80043c8:	bfc4      	itt	gt
 80043ca:	1a9b      	subgt	r3, r3, r2
 80043cc:	18ed      	addgt	r5, r5, r3
 80043ce:	f04f 0900 	mov.w	r9, #0
 80043d2:	341a      	adds	r4, #26
 80043d4:	454d      	cmp	r5, r9
 80043d6:	d11a      	bne.n	800440e <_printf_common+0xd6>
 80043d8:	2000      	movs	r0, #0
 80043da:	e008      	b.n	80043ee <_printf_common+0xb6>
 80043dc:	2301      	movs	r3, #1
 80043de:	4652      	mov	r2, sl
 80043e0:	4639      	mov	r1, r7
 80043e2:	4630      	mov	r0, r6
 80043e4:	47c0      	blx	r8
 80043e6:	3001      	adds	r0, #1
 80043e8:	d103      	bne.n	80043f2 <_printf_common+0xba>
 80043ea:	f04f 30ff 	mov.w	r0, #4294967295
 80043ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f2:	3501      	adds	r5, #1
 80043f4:	e7c3      	b.n	800437e <_printf_common+0x46>
 80043f6:	18e1      	adds	r1, r4, r3
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	2030      	movs	r0, #48	; 0x30
 80043fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004400:	4422      	add	r2, r4
 8004402:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004406:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800440a:	3302      	adds	r3, #2
 800440c:	e7c5      	b.n	800439a <_printf_common+0x62>
 800440e:	2301      	movs	r3, #1
 8004410:	4622      	mov	r2, r4
 8004412:	4639      	mov	r1, r7
 8004414:	4630      	mov	r0, r6
 8004416:	47c0      	blx	r8
 8004418:	3001      	adds	r0, #1
 800441a:	d0e6      	beq.n	80043ea <_printf_common+0xb2>
 800441c:	f109 0901 	add.w	r9, r9, #1
 8004420:	e7d8      	b.n	80043d4 <_printf_common+0x9c>
	...

08004424 <_printf_i>:
 8004424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004428:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800442c:	460c      	mov	r4, r1
 800442e:	7e09      	ldrb	r1, [r1, #24]
 8004430:	b085      	sub	sp, #20
 8004432:	296e      	cmp	r1, #110	; 0x6e
 8004434:	4617      	mov	r7, r2
 8004436:	4606      	mov	r6, r0
 8004438:	4698      	mov	r8, r3
 800443a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800443c:	f000 80b3 	beq.w	80045a6 <_printf_i+0x182>
 8004440:	d822      	bhi.n	8004488 <_printf_i+0x64>
 8004442:	2963      	cmp	r1, #99	; 0x63
 8004444:	d036      	beq.n	80044b4 <_printf_i+0x90>
 8004446:	d80a      	bhi.n	800445e <_printf_i+0x3a>
 8004448:	2900      	cmp	r1, #0
 800444a:	f000 80b9 	beq.w	80045c0 <_printf_i+0x19c>
 800444e:	2958      	cmp	r1, #88	; 0x58
 8004450:	f000 8083 	beq.w	800455a <_printf_i+0x136>
 8004454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004458:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800445c:	e032      	b.n	80044c4 <_printf_i+0xa0>
 800445e:	2964      	cmp	r1, #100	; 0x64
 8004460:	d001      	beq.n	8004466 <_printf_i+0x42>
 8004462:	2969      	cmp	r1, #105	; 0x69
 8004464:	d1f6      	bne.n	8004454 <_printf_i+0x30>
 8004466:	6820      	ldr	r0, [r4, #0]
 8004468:	6813      	ldr	r3, [r2, #0]
 800446a:	0605      	lsls	r5, r0, #24
 800446c:	f103 0104 	add.w	r1, r3, #4
 8004470:	d52a      	bpl.n	80044c8 <_printf_i+0xa4>
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6011      	str	r1, [r2, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	da03      	bge.n	8004482 <_printf_i+0x5e>
 800447a:	222d      	movs	r2, #45	; 0x2d
 800447c:	425b      	negs	r3, r3
 800447e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004482:	486f      	ldr	r0, [pc, #444]	; (8004640 <_printf_i+0x21c>)
 8004484:	220a      	movs	r2, #10
 8004486:	e039      	b.n	80044fc <_printf_i+0xd8>
 8004488:	2973      	cmp	r1, #115	; 0x73
 800448a:	f000 809d 	beq.w	80045c8 <_printf_i+0x1a4>
 800448e:	d808      	bhi.n	80044a2 <_printf_i+0x7e>
 8004490:	296f      	cmp	r1, #111	; 0x6f
 8004492:	d020      	beq.n	80044d6 <_printf_i+0xb2>
 8004494:	2970      	cmp	r1, #112	; 0x70
 8004496:	d1dd      	bne.n	8004454 <_printf_i+0x30>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	f043 0320 	orr.w	r3, r3, #32
 800449e:	6023      	str	r3, [r4, #0]
 80044a0:	e003      	b.n	80044aa <_printf_i+0x86>
 80044a2:	2975      	cmp	r1, #117	; 0x75
 80044a4:	d017      	beq.n	80044d6 <_printf_i+0xb2>
 80044a6:	2978      	cmp	r1, #120	; 0x78
 80044a8:	d1d4      	bne.n	8004454 <_printf_i+0x30>
 80044aa:	2378      	movs	r3, #120	; 0x78
 80044ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044b0:	4864      	ldr	r0, [pc, #400]	; (8004644 <_printf_i+0x220>)
 80044b2:	e055      	b.n	8004560 <_printf_i+0x13c>
 80044b4:	6813      	ldr	r3, [r2, #0]
 80044b6:	1d19      	adds	r1, r3, #4
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6011      	str	r1, [r2, #0]
 80044bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044c4:	2301      	movs	r3, #1
 80044c6:	e08c      	b.n	80045e2 <_printf_i+0x1be>
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6011      	str	r1, [r2, #0]
 80044cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044d0:	bf18      	it	ne
 80044d2:	b21b      	sxthne	r3, r3
 80044d4:	e7cf      	b.n	8004476 <_printf_i+0x52>
 80044d6:	6813      	ldr	r3, [r2, #0]
 80044d8:	6825      	ldr	r5, [r4, #0]
 80044da:	1d18      	adds	r0, r3, #4
 80044dc:	6010      	str	r0, [r2, #0]
 80044de:	0628      	lsls	r0, r5, #24
 80044e0:	d501      	bpl.n	80044e6 <_printf_i+0xc2>
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	e002      	b.n	80044ec <_printf_i+0xc8>
 80044e6:	0668      	lsls	r0, r5, #25
 80044e8:	d5fb      	bpl.n	80044e2 <_printf_i+0xbe>
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	4854      	ldr	r0, [pc, #336]	; (8004640 <_printf_i+0x21c>)
 80044ee:	296f      	cmp	r1, #111	; 0x6f
 80044f0:	bf14      	ite	ne
 80044f2:	220a      	movne	r2, #10
 80044f4:	2208      	moveq	r2, #8
 80044f6:	2100      	movs	r1, #0
 80044f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044fc:	6865      	ldr	r5, [r4, #4]
 80044fe:	60a5      	str	r5, [r4, #8]
 8004500:	2d00      	cmp	r5, #0
 8004502:	f2c0 8095 	blt.w	8004630 <_printf_i+0x20c>
 8004506:	6821      	ldr	r1, [r4, #0]
 8004508:	f021 0104 	bic.w	r1, r1, #4
 800450c:	6021      	str	r1, [r4, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d13d      	bne.n	800458e <_printf_i+0x16a>
 8004512:	2d00      	cmp	r5, #0
 8004514:	f040 808e 	bne.w	8004634 <_printf_i+0x210>
 8004518:	4665      	mov	r5, ip
 800451a:	2a08      	cmp	r2, #8
 800451c:	d10b      	bne.n	8004536 <_printf_i+0x112>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	07db      	lsls	r3, r3, #31
 8004522:	d508      	bpl.n	8004536 <_printf_i+0x112>
 8004524:	6923      	ldr	r3, [r4, #16]
 8004526:	6862      	ldr	r2, [r4, #4]
 8004528:	429a      	cmp	r2, r3
 800452a:	bfde      	ittt	le
 800452c:	2330      	movle	r3, #48	; 0x30
 800452e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004532:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004536:	ebac 0305 	sub.w	r3, ip, r5
 800453a:	6123      	str	r3, [r4, #16]
 800453c:	f8cd 8000 	str.w	r8, [sp]
 8004540:	463b      	mov	r3, r7
 8004542:	aa03      	add	r2, sp, #12
 8004544:	4621      	mov	r1, r4
 8004546:	4630      	mov	r0, r6
 8004548:	f7ff fef6 	bl	8004338 <_printf_common>
 800454c:	3001      	adds	r0, #1
 800454e:	d14d      	bne.n	80045ec <_printf_i+0x1c8>
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	b005      	add	sp, #20
 8004556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800455a:	4839      	ldr	r0, [pc, #228]	; (8004640 <_printf_i+0x21c>)
 800455c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004560:	6813      	ldr	r3, [r2, #0]
 8004562:	6821      	ldr	r1, [r4, #0]
 8004564:	1d1d      	adds	r5, r3, #4
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6015      	str	r5, [r2, #0]
 800456a:	060a      	lsls	r2, r1, #24
 800456c:	d50b      	bpl.n	8004586 <_printf_i+0x162>
 800456e:	07ca      	lsls	r2, r1, #31
 8004570:	bf44      	itt	mi
 8004572:	f041 0120 	orrmi.w	r1, r1, #32
 8004576:	6021      	strmi	r1, [r4, #0]
 8004578:	b91b      	cbnz	r3, 8004582 <_printf_i+0x15e>
 800457a:	6822      	ldr	r2, [r4, #0]
 800457c:	f022 0220 	bic.w	r2, r2, #32
 8004580:	6022      	str	r2, [r4, #0]
 8004582:	2210      	movs	r2, #16
 8004584:	e7b7      	b.n	80044f6 <_printf_i+0xd2>
 8004586:	064d      	lsls	r5, r1, #25
 8004588:	bf48      	it	mi
 800458a:	b29b      	uxthmi	r3, r3
 800458c:	e7ef      	b.n	800456e <_printf_i+0x14a>
 800458e:	4665      	mov	r5, ip
 8004590:	fbb3 f1f2 	udiv	r1, r3, r2
 8004594:	fb02 3311 	mls	r3, r2, r1, r3
 8004598:	5cc3      	ldrb	r3, [r0, r3]
 800459a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800459e:	460b      	mov	r3, r1
 80045a0:	2900      	cmp	r1, #0
 80045a2:	d1f5      	bne.n	8004590 <_printf_i+0x16c>
 80045a4:	e7b9      	b.n	800451a <_printf_i+0xf6>
 80045a6:	6813      	ldr	r3, [r2, #0]
 80045a8:	6825      	ldr	r5, [r4, #0]
 80045aa:	6961      	ldr	r1, [r4, #20]
 80045ac:	1d18      	adds	r0, r3, #4
 80045ae:	6010      	str	r0, [r2, #0]
 80045b0:	0628      	lsls	r0, r5, #24
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	d501      	bpl.n	80045ba <_printf_i+0x196>
 80045b6:	6019      	str	r1, [r3, #0]
 80045b8:	e002      	b.n	80045c0 <_printf_i+0x19c>
 80045ba:	066a      	lsls	r2, r5, #25
 80045bc:	d5fb      	bpl.n	80045b6 <_printf_i+0x192>
 80045be:	8019      	strh	r1, [r3, #0]
 80045c0:	2300      	movs	r3, #0
 80045c2:	6123      	str	r3, [r4, #16]
 80045c4:	4665      	mov	r5, ip
 80045c6:	e7b9      	b.n	800453c <_printf_i+0x118>
 80045c8:	6813      	ldr	r3, [r2, #0]
 80045ca:	1d19      	adds	r1, r3, #4
 80045cc:	6011      	str	r1, [r2, #0]
 80045ce:	681d      	ldr	r5, [r3, #0]
 80045d0:	6862      	ldr	r2, [r4, #4]
 80045d2:	2100      	movs	r1, #0
 80045d4:	4628      	mov	r0, r5
 80045d6:	f7fb fe23 	bl	8000220 <memchr>
 80045da:	b108      	cbz	r0, 80045e0 <_printf_i+0x1bc>
 80045dc:	1b40      	subs	r0, r0, r5
 80045de:	6060      	str	r0, [r4, #4]
 80045e0:	6863      	ldr	r3, [r4, #4]
 80045e2:	6123      	str	r3, [r4, #16]
 80045e4:	2300      	movs	r3, #0
 80045e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ea:	e7a7      	b.n	800453c <_printf_i+0x118>
 80045ec:	6923      	ldr	r3, [r4, #16]
 80045ee:	462a      	mov	r2, r5
 80045f0:	4639      	mov	r1, r7
 80045f2:	4630      	mov	r0, r6
 80045f4:	47c0      	blx	r8
 80045f6:	3001      	adds	r0, #1
 80045f8:	d0aa      	beq.n	8004550 <_printf_i+0x12c>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	079b      	lsls	r3, r3, #30
 80045fe:	d413      	bmi.n	8004628 <_printf_i+0x204>
 8004600:	68e0      	ldr	r0, [r4, #12]
 8004602:	9b03      	ldr	r3, [sp, #12]
 8004604:	4298      	cmp	r0, r3
 8004606:	bfb8      	it	lt
 8004608:	4618      	movlt	r0, r3
 800460a:	e7a3      	b.n	8004554 <_printf_i+0x130>
 800460c:	2301      	movs	r3, #1
 800460e:	464a      	mov	r2, r9
 8004610:	4639      	mov	r1, r7
 8004612:	4630      	mov	r0, r6
 8004614:	47c0      	blx	r8
 8004616:	3001      	adds	r0, #1
 8004618:	d09a      	beq.n	8004550 <_printf_i+0x12c>
 800461a:	3501      	adds	r5, #1
 800461c:	68e3      	ldr	r3, [r4, #12]
 800461e:	9a03      	ldr	r2, [sp, #12]
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	42ab      	cmp	r3, r5
 8004624:	dcf2      	bgt.n	800460c <_printf_i+0x1e8>
 8004626:	e7eb      	b.n	8004600 <_printf_i+0x1dc>
 8004628:	2500      	movs	r5, #0
 800462a:	f104 0919 	add.w	r9, r4, #25
 800462e:	e7f5      	b.n	800461c <_printf_i+0x1f8>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1ac      	bne.n	800458e <_printf_i+0x16a>
 8004634:	7803      	ldrb	r3, [r0, #0]
 8004636:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800463a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800463e:	e76c      	b.n	800451a <_printf_i+0xf6>
 8004640:	08004ce5 	.word	0x08004ce5
 8004644:	08004cf6 	.word	0x08004cf6

08004648 <memmove>:
 8004648:	4288      	cmp	r0, r1
 800464a:	b510      	push	{r4, lr}
 800464c:	eb01 0302 	add.w	r3, r1, r2
 8004650:	d807      	bhi.n	8004662 <memmove+0x1a>
 8004652:	1e42      	subs	r2, r0, #1
 8004654:	4299      	cmp	r1, r3
 8004656:	d00a      	beq.n	800466e <memmove+0x26>
 8004658:	f811 4b01 	ldrb.w	r4, [r1], #1
 800465c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004660:	e7f8      	b.n	8004654 <memmove+0xc>
 8004662:	4283      	cmp	r3, r0
 8004664:	d9f5      	bls.n	8004652 <memmove+0xa>
 8004666:	1881      	adds	r1, r0, r2
 8004668:	1ad2      	subs	r2, r2, r3
 800466a:	42d3      	cmn	r3, r2
 800466c:	d100      	bne.n	8004670 <memmove+0x28>
 800466e:	bd10      	pop	{r4, pc}
 8004670:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004674:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004678:	e7f7      	b.n	800466a <memmove+0x22>
	...

0800467c <_free_r>:
 800467c:	b538      	push	{r3, r4, r5, lr}
 800467e:	4605      	mov	r5, r0
 8004680:	2900      	cmp	r1, #0
 8004682:	d045      	beq.n	8004710 <_free_r+0x94>
 8004684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004688:	1f0c      	subs	r4, r1, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	bfb8      	it	lt
 800468e:	18e4      	addlt	r4, r4, r3
 8004690:	f000 f8d2 	bl	8004838 <__malloc_lock>
 8004694:	4a1f      	ldr	r2, [pc, #124]	; (8004714 <_free_r+0x98>)
 8004696:	6813      	ldr	r3, [r2, #0]
 8004698:	4610      	mov	r0, r2
 800469a:	b933      	cbnz	r3, 80046aa <_free_r+0x2e>
 800469c:	6063      	str	r3, [r4, #4]
 800469e:	6014      	str	r4, [r2, #0]
 80046a0:	4628      	mov	r0, r5
 80046a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046a6:	f000 b8c8 	b.w	800483a <__malloc_unlock>
 80046aa:	42a3      	cmp	r3, r4
 80046ac:	d90c      	bls.n	80046c8 <_free_r+0x4c>
 80046ae:	6821      	ldr	r1, [r4, #0]
 80046b0:	1862      	adds	r2, r4, r1
 80046b2:	4293      	cmp	r3, r2
 80046b4:	bf04      	itt	eq
 80046b6:	681a      	ldreq	r2, [r3, #0]
 80046b8:	685b      	ldreq	r3, [r3, #4]
 80046ba:	6063      	str	r3, [r4, #4]
 80046bc:	bf04      	itt	eq
 80046be:	1852      	addeq	r2, r2, r1
 80046c0:	6022      	streq	r2, [r4, #0]
 80046c2:	6004      	str	r4, [r0, #0]
 80046c4:	e7ec      	b.n	80046a0 <_free_r+0x24>
 80046c6:	4613      	mov	r3, r2
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	b10a      	cbz	r2, 80046d0 <_free_r+0x54>
 80046cc:	42a2      	cmp	r2, r4
 80046ce:	d9fa      	bls.n	80046c6 <_free_r+0x4a>
 80046d0:	6819      	ldr	r1, [r3, #0]
 80046d2:	1858      	adds	r0, r3, r1
 80046d4:	42a0      	cmp	r0, r4
 80046d6:	d10b      	bne.n	80046f0 <_free_r+0x74>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	4401      	add	r1, r0
 80046dc:	1858      	adds	r0, r3, r1
 80046de:	4282      	cmp	r2, r0
 80046e0:	6019      	str	r1, [r3, #0]
 80046e2:	d1dd      	bne.n	80046a0 <_free_r+0x24>
 80046e4:	6810      	ldr	r0, [r2, #0]
 80046e6:	6852      	ldr	r2, [r2, #4]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	4401      	add	r1, r0
 80046ec:	6019      	str	r1, [r3, #0]
 80046ee:	e7d7      	b.n	80046a0 <_free_r+0x24>
 80046f0:	d902      	bls.n	80046f8 <_free_r+0x7c>
 80046f2:	230c      	movs	r3, #12
 80046f4:	602b      	str	r3, [r5, #0]
 80046f6:	e7d3      	b.n	80046a0 <_free_r+0x24>
 80046f8:	6820      	ldr	r0, [r4, #0]
 80046fa:	1821      	adds	r1, r4, r0
 80046fc:	428a      	cmp	r2, r1
 80046fe:	bf04      	itt	eq
 8004700:	6811      	ldreq	r1, [r2, #0]
 8004702:	6852      	ldreq	r2, [r2, #4]
 8004704:	6062      	str	r2, [r4, #4]
 8004706:	bf04      	itt	eq
 8004708:	1809      	addeq	r1, r1, r0
 800470a:	6021      	streq	r1, [r4, #0]
 800470c:	605c      	str	r4, [r3, #4]
 800470e:	e7c7      	b.n	80046a0 <_free_r+0x24>
 8004710:	bd38      	pop	{r3, r4, r5, pc}
 8004712:	bf00      	nop
 8004714:	20000140 	.word	0x20000140

08004718 <_malloc_r>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	1ccd      	adds	r5, r1, #3
 800471c:	f025 0503 	bic.w	r5, r5, #3
 8004720:	3508      	adds	r5, #8
 8004722:	2d0c      	cmp	r5, #12
 8004724:	bf38      	it	cc
 8004726:	250c      	movcc	r5, #12
 8004728:	2d00      	cmp	r5, #0
 800472a:	4606      	mov	r6, r0
 800472c:	db01      	blt.n	8004732 <_malloc_r+0x1a>
 800472e:	42a9      	cmp	r1, r5
 8004730:	d903      	bls.n	800473a <_malloc_r+0x22>
 8004732:	230c      	movs	r3, #12
 8004734:	6033      	str	r3, [r6, #0]
 8004736:	2000      	movs	r0, #0
 8004738:	bd70      	pop	{r4, r5, r6, pc}
 800473a:	f000 f87d 	bl	8004838 <__malloc_lock>
 800473e:	4a21      	ldr	r2, [pc, #132]	; (80047c4 <_malloc_r+0xac>)
 8004740:	6814      	ldr	r4, [r2, #0]
 8004742:	4621      	mov	r1, r4
 8004744:	b991      	cbnz	r1, 800476c <_malloc_r+0x54>
 8004746:	4c20      	ldr	r4, [pc, #128]	; (80047c8 <_malloc_r+0xb0>)
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	b91b      	cbnz	r3, 8004754 <_malloc_r+0x3c>
 800474c:	4630      	mov	r0, r6
 800474e:	f000 f863 	bl	8004818 <_sbrk_r>
 8004752:	6020      	str	r0, [r4, #0]
 8004754:	4629      	mov	r1, r5
 8004756:	4630      	mov	r0, r6
 8004758:	f000 f85e 	bl	8004818 <_sbrk_r>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d124      	bne.n	80047aa <_malloc_r+0x92>
 8004760:	230c      	movs	r3, #12
 8004762:	6033      	str	r3, [r6, #0]
 8004764:	4630      	mov	r0, r6
 8004766:	f000 f868 	bl	800483a <__malloc_unlock>
 800476a:	e7e4      	b.n	8004736 <_malloc_r+0x1e>
 800476c:	680b      	ldr	r3, [r1, #0]
 800476e:	1b5b      	subs	r3, r3, r5
 8004770:	d418      	bmi.n	80047a4 <_malloc_r+0x8c>
 8004772:	2b0b      	cmp	r3, #11
 8004774:	d90f      	bls.n	8004796 <_malloc_r+0x7e>
 8004776:	600b      	str	r3, [r1, #0]
 8004778:	50cd      	str	r5, [r1, r3]
 800477a:	18cc      	adds	r4, r1, r3
 800477c:	4630      	mov	r0, r6
 800477e:	f000 f85c 	bl	800483a <__malloc_unlock>
 8004782:	f104 000b 	add.w	r0, r4, #11
 8004786:	1d23      	adds	r3, r4, #4
 8004788:	f020 0007 	bic.w	r0, r0, #7
 800478c:	1ac3      	subs	r3, r0, r3
 800478e:	d0d3      	beq.n	8004738 <_malloc_r+0x20>
 8004790:	425a      	negs	r2, r3
 8004792:	50e2      	str	r2, [r4, r3]
 8004794:	e7d0      	b.n	8004738 <_malloc_r+0x20>
 8004796:	428c      	cmp	r4, r1
 8004798:	684b      	ldr	r3, [r1, #4]
 800479a:	bf16      	itet	ne
 800479c:	6063      	strne	r3, [r4, #4]
 800479e:	6013      	streq	r3, [r2, #0]
 80047a0:	460c      	movne	r4, r1
 80047a2:	e7eb      	b.n	800477c <_malloc_r+0x64>
 80047a4:	460c      	mov	r4, r1
 80047a6:	6849      	ldr	r1, [r1, #4]
 80047a8:	e7cc      	b.n	8004744 <_malloc_r+0x2c>
 80047aa:	1cc4      	adds	r4, r0, #3
 80047ac:	f024 0403 	bic.w	r4, r4, #3
 80047b0:	42a0      	cmp	r0, r4
 80047b2:	d005      	beq.n	80047c0 <_malloc_r+0xa8>
 80047b4:	1a21      	subs	r1, r4, r0
 80047b6:	4630      	mov	r0, r6
 80047b8:	f000 f82e 	bl	8004818 <_sbrk_r>
 80047bc:	3001      	adds	r0, #1
 80047be:	d0cf      	beq.n	8004760 <_malloc_r+0x48>
 80047c0:	6025      	str	r5, [r4, #0]
 80047c2:	e7db      	b.n	800477c <_malloc_r+0x64>
 80047c4:	20000140 	.word	0x20000140
 80047c8:	20000144 	.word	0x20000144

080047cc <_realloc_r>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	4607      	mov	r7, r0
 80047d0:	4614      	mov	r4, r2
 80047d2:	460e      	mov	r6, r1
 80047d4:	b921      	cbnz	r1, 80047e0 <_realloc_r+0x14>
 80047d6:	4611      	mov	r1, r2
 80047d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047dc:	f7ff bf9c 	b.w	8004718 <_malloc_r>
 80047e0:	b922      	cbnz	r2, 80047ec <_realloc_r+0x20>
 80047e2:	f7ff ff4b 	bl	800467c <_free_r>
 80047e6:	4625      	mov	r5, r4
 80047e8:	4628      	mov	r0, r5
 80047ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ec:	f000 f826 	bl	800483c <_malloc_usable_size_r>
 80047f0:	42a0      	cmp	r0, r4
 80047f2:	d20f      	bcs.n	8004814 <_realloc_r+0x48>
 80047f4:	4621      	mov	r1, r4
 80047f6:	4638      	mov	r0, r7
 80047f8:	f7ff ff8e 	bl	8004718 <_malloc_r>
 80047fc:	4605      	mov	r5, r0
 80047fe:	2800      	cmp	r0, #0
 8004800:	d0f2      	beq.n	80047e8 <_realloc_r+0x1c>
 8004802:	4631      	mov	r1, r6
 8004804:	4622      	mov	r2, r4
 8004806:	f7ff fc11 	bl	800402c <memcpy>
 800480a:	4631      	mov	r1, r6
 800480c:	4638      	mov	r0, r7
 800480e:	f7ff ff35 	bl	800467c <_free_r>
 8004812:	e7e9      	b.n	80047e8 <_realloc_r+0x1c>
 8004814:	4635      	mov	r5, r6
 8004816:	e7e7      	b.n	80047e8 <_realloc_r+0x1c>

08004818 <_sbrk_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	4c06      	ldr	r4, [pc, #24]	; (8004834 <_sbrk_r+0x1c>)
 800481c:	2300      	movs	r3, #0
 800481e:	4605      	mov	r5, r0
 8004820:	4608      	mov	r0, r1
 8004822:	6023      	str	r3, [r4, #0]
 8004824:	f7ff fafa 	bl	8003e1c <_sbrk>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d102      	bne.n	8004832 <_sbrk_r+0x1a>
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	b103      	cbz	r3, 8004832 <_sbrk_r+0x1a>
 8004830:	602b      	str	r3, [r5, #0]
 8004832:	bd38      	pop	{r3, r4, r5, pc}
 8004834:	20000208 	.word	0x20000208

08004838 <__malloc_lock>:
 8004838:	4770      	bx	lr

0800483a <__malloc_unlock>:
 800483a:	4770      	bx	lr

0800483c <_malloc_usable_size_r>:
 800483c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004840:	1f18      	subs	r0, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfbc      	itt	lt
 8004846:	580b      	ldrlt	r3, [r1, r0]
 8004848:	18c0      	addlt	r0, r0, r3
 800484a:	4770      	bx	lr

0800484c <_init>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	bf00      	nop
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr

08004858 <_fini>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	bf00      	nop
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr
