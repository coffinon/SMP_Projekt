
Boat_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b54  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d58  08004d58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d60  08004d60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d60  08004d60  00014d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d64  08004d64  00014d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08004d74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08004d74  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb3d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000213d  00000000  00000000  0002eb79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  00030cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  00031b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022b6f  00000000  00000000  00032820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb14  00000000  00000000  0005538f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d15a5  00000000  00000000  00060ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c10  00000000  00000000  001324c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004d04 	.word	0x08004d04

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004d04 	.word	0x08004d04

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b972 	b.w	8000ce0 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9e08      	ldr	r6, [sp, #32]
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	4688      	mov	r8, r1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d14b      	bne.n	8000aba <__udivmoddi4+0xa6>
 8000a22:	428a      	cmp	r2, r1
 8000a24:	4615      	mov	r5, r2
 8000a26:	d967      	bls.n	8000af8 <__udivmoddi4+0xe4>
 8000a28:	fab2 f282 	clz	r2, r2
 8000a2c:	b14a      	cbz	r2, 8000a42 <__udivmoddi4+0x2e>
 8000a2e:	f1c2 0720 	rsb	r7, r2, #32
 8000a32:	fa01 f302 	lsl.w	r3, r1, r2
 8000a36:	fa20 f707 	lsr.w	r7, r0, r7
 8000a3a:	4095      	lsls	r5, r2
 8000a3c:	ea47 0803 	orr.w	r8, r7, r3
 8000a40:	4094      	lsls	r4, r2
 8000a42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a46:	0c23      	lsrs	r3, r4, #16
 8000a48:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a4c:	fa1f fc85 	uxth.w	ip, r5
 8000a50:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a54:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a58:	fb07 f10c 	mul.w	r1, r7, ip
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	d909      	bls.n	8000a74 <__udivmoddi4+0x60>
 8000a60:	18eb      	adds	r3, r5, r3
 8000a62:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a66:	f080 811b 	bcs.w	8000ca0 <__udivmoddi4+0x28c>
 8000a6a:	4299      	cmp	r1, r3
 8000a6c:	f240 8118 	bls.w	8000ca0 <__udivmoddi4+0x28c>
 8000a70:	3f02      	subs	r7, #2
 8000a72:	442b      	add	r3, r5
 8000a74:	1a5b      	subs	r3, r3, r1
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a84:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a88:	45a4      	cmp	ip, r4
 8000a8a:	d909      	bls.n	8000aa0 <__udivmoddi4+0x8c>
 8000a8c:	192c      	adds	r4, r5, r4
 8000a8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a92:	f080 8107 	bcs.w	8000ca4 <__udivmoddi4+0x290>
 8000a96:	45a4      	cmp	ip, r4
 8000a98:	f240 8104 	bls.w	8000ca4 <__udivmoddi4+0x290>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	442c      	add	r4, r5
 8000aa0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000aa4:	eba4 040c 	sub.w	r4, r4, ip
 8000aa8:	2700      	movs	r7, #0
 8000aaa:	b11e      	cbz	r6, 8000ab4 <__udivmoddi4+0xa0>
 8000aac:	40d4      	lsrs	r4, r2
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ab4:	4639      	mov	r1, r7
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d909      	bls.n	8000ad2 <__udivmoddi4+0xbe>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	f000 80eb 	beq.w	8000c9a <__udivmoddi4+0x286>
 8000ac4:	2700      	movs	r7, #0
 8000ac6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aca:	4638      	mov	r0, r7
 8000acc:	4639      	mov	r1, r7
 8000ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad2:	fab3 f783 	clz	r7, r3
 8000ad6:	2f00      	cmp	r7, #0
 8000ad8:	d147      	bne.n	8000b6a <__udivmoddi4+0x156>
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d302      	bcc.n	8000ae4 <__udivmoddi4+0xd0>
 8000ade:	4282      	cmp	r2, r0
 8000ae0:	f200 80fa 	bhi.w	8000cd8 <__udivmoddi4+0x2c4>
 8000ae4:	1a84      	subs	r4, r0, r2
 8000ae6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aea:	2001      	movs	r0, #1
 8000aec:	4698      	mov	r8, r3
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d0e0      	beq.n	8000ab4 <__udivmoddi4+0xa0>
 8000af2:	e9c6 4800 	strd	r4, r8, [r6]
 8000af6:	e7dd      	b.n	8000ab4 <__udivmoddi4+0xa0>
 8000af8:	b902      	cbnz	r2, 8000afc <__udivmoddi4+0xe8>
 8000afa:	deff      	udf	#255	; 0xff
 8000afc:	fab2 f282 	clz	r2, r2
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	f040 808f 	bne.w	8000c24 <__udivmoddi4+0x210>
 8000b06:	1b49      	subs	r1, r1, r5
 8000b08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0c:	fa1f f885 	uxth.w	r8, r5
 8000b10:	2701      	movs	r7, #1
 8000b12:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b16:	0c23      	lsrs	r3, r4, #16
 8000b18:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb08 f10c 	mul.w	r1, r8, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d907      	bls.n	8000b38 <__udivmoddi4+0x124>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x122>
 8000b30:	4299      	cmp	r1, r3
 8000b32:	f200 80cd 	bhi.w	8000cd0 <__udivmoddi4+0x2bc>
 8000b36:	4684      	mov	ip, r0
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	b2a3      	uxth	r3, r4
 8000b3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b40:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b44:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b48:	fb08 f800 	mul.w	r8, r8, r0
 8000b4c:	45a0      	cmp	r8, r4
 8000b4e:	d907      	bls.n	8000b60 <__udivmoddi4+0x14c>
 8000b50:	192c      	adds	r4, r5, r4
 8000b52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x14a>
 8000b58:	45a0      	cmp	r8, r4
 8000b5a:	f200 80b6 	bhi.w	8000cca <__udivmoddi4+0x2b6>
 8000b5e:	4618      	mov	r0, r3
 8000b60:	eba4 0408 	sub.w	r4, r4, r8
 8000b64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b68:	e79f      	b.n	8000aaa <__udivmoddi4+0x96>
 8000b6a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b6e:	40bb      	lsls	r3, r7
 8000b70:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b74:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b78:	fa01 f407 	lsl.w	r4, r1, r7
 8000b7c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b80:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b84:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b88:	4325      	orrs	r5, r4
 8000b8a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b8e:	0c2c      	lsrs	r4, r5, #16
 8000b90:	fb08 3319 	mls	r3, r8, r9, r3
 8000b94:	fa1f fa8e 	uxth.w	sl, lr
 8000b98:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b9c:	fb09 f40a 	mul.w	r4, r9, sl
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	fa02 f207 	lsl.w	r2, r2, r7
 8000ba6:	fa00 f107 	lsl.w	r1, r0, r7
 8000baa:	d90b      	bls.n	8000bc4 <__udivmoddi4+0x1b0>
 8000bac:	eb1e 0303 	adds.w	r3, lr, r3
 8000bb0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bb4:	f080 8087 	bcs.w	8000cc6 <__udivmoddi4+0x2b2>
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	f240 8084 	bls.w	8000cc6 <__udivmoddi4+0x2b2>
 8000bbe:	f1a9 0902 	sub.w	r9, r9, #2
 8000bc2:	4473      	add	r3, lr
 8000bc4:	1b1b      	subs	r3, r3, r4
 8000bc6:	b2ad      	uxth	r5, r5
 8000bc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000bd0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bd4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bd8:	45a2      	cmp	sl, r4
 8000bda:	d908      	bls.n	8000bee <__udivmoddi4+0x1da>
 8000bdc:	eb1e 0404 	adds.w	r4, lr, r4
 8000be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be4:	d26b      	bcs.n	8000cbe <__udivmoddi4+0x2aa>
 8000be6:	45a2      	cmp	sl, r4
 8000be8:	d969      	bls.n	8000cbe <__udivmoddi4+0x2aa>
 8000bea:	3802      	subs	r0, #2
 8000bec:	4474      	add	r4, lr
 8000bee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bf2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bf6:	eba4 040a 	sub.w	r4, r4, sl
 8000bfa:	454c      	cmp	r4, r9
 8000bfc:	46c2      	mov	sl, r8
 8000bfe:	464b      	mov	r3, r9
 8000c00:	d354      	bcc.n	8000cac <__udivmoddi4+0x298>
 8000c02:	d051      	beq.n	8000ca8 <__udivmoddi4+0x294>
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d069      	beq.n	8000cdc <__udivmoddi4+0x2c8>
 8000c08:	ebb1 050a 	subs.w	r5, r1, sl
 8000c0c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c10:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c14:	40fd      	lsrs	r5, r7
 8000c16:	40fc      	lsrs	r4, r7
 8000c18:	ea4c 0505 	orr.w	r5, ip, r5
 8000c1c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c20:	2700      	movs	r7, #0
 8000c22:	e747      	b.n	8000ab4 <__udivmoddi4+0xa0>
 8000c24:	f1c2 0320 	rsb	r3, r2, #32
 8000c28:	fa20 f703 	lsr.w	r7, r0, r3
 8000c2c:	4095      	lsls	r5, r2
 8000c2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c32:	fa21 f303 	lsr.w	r3, r1, r3
 8000c36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3a:	4338      	orrs	r0, r7
 8000c3c:	0c01      	lsrs	r1, r0, #16
 8000c3e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c42:	fa1f f885 	uxth.w	r8, r5
 8000c46:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4e:	fb07 f308 	mul.w	r3, r7, r8
 8000c52:	428b      	cmp	r3, r1
 8000c54:	fa04 f402 	lsl.w	r4, r4, r2
 8000c58:	d907      	bls.n	8000c6a <__udivmoddi4+0x256>
 8000c5a:	1869      	adds	r1, r5, r1
 8000c5c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c60:	d22f      	bcs.n	8000cc2 <__udivmoddi4+0x2ae>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d92d      	bls.n	8000cc2 <__udivmoddi4+0x2ae>
 8000c66:	3f02      	subs	r7, #2
 8000c68:	4429      	add	r1, r5
 8000c6a:	1acb      	subs	r3, r1, r3
 8000c6c:	b281      	uxth	r1, r0
 8000c6e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c72:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7a:	fb00 f308 	mul.w	r3, r0, r8
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d907      	bls.n	8000c92 <__udivmoddi4+0x27e>
 8000c82:	1869      	adds	r1, r5, r1
 8000c84:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c88:	d217      	bcs.n	8000cba <__udivmoddi4+0x2a6>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d915      	bls.n	8000cba <__udivmoddi4+0x2a6>
 8000c8e:	3802      	subs	r0, #2
 8000c90:	4429      	add	r1, r5
 8000c92:	1ac9      	subs	r1, r1, r3
 8000c94:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c98:	e73b      	b.n	8000b12 <__udivmoddi4+0xfe>
 8000c9a:	4637      	mov	r7, r6
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	e709      	b.n	8000ab4 <__udivmoddi4+0xa0>
 8000ca0:	4607      	mov	r7, r0
 8000ca2:	e6e7      	b.n	8000a74 <__udivmoddi4+0x60>
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	e6fb      	b.n	8000aa0 <__udivmoddi4+0x8c>
 8000ca8:	4541      	cmp	r1, r8
 8000caa:	d2ab      	bcs.n	8000c04 <__udivmoddi4+0x1f0>
 8000cac:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cb0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cb4:	3801      	subs	r0, #1
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	e7a4      	b.n	8000c04 <__udivmoddi4+0x1f0>
 8000cba:	4660      	mov	r0, ip
 8000cbc:	e7e9      	b.n	8000c92 <__udivmoddi4+0x27e>
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	e795      	b.n	8000bee <__udivmoddi4+0x1da>
 8000cc2:	4667      	mov	r7, ip
 8000cc4:	e7d1      	b.n	8000c6a <__udivmoddi4+0x256>
 8000cc6:	4681      	mov	r9, r0
 8000cc8:	e77c      	b.n	8000bc4 <__udivmoddi4+0x1b0>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	442c      	add	r4, r5
 8000cce:	e747      	b.n	8000b60 <__udivmoddi4+0x14c>
 8000cd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cd4:	442b      	add	r3, r5
 8000cd6:	e72f      	b.n	8000b38 <__udivmoddi4+0x124>
 8000cd8:	4638      	mov	r0, r7
 8000cda:	e708      	b.n	8000aee <__udivmoddi4+0xda>
 8000cdc:	4637      	mov	r7, r6
 8000cde:	e6e9      	b.n	8000ab4 <__udivmoddi4+0xa0>

08000ce0 <__aeabi_idiv0>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_Init+0x40>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_Init+0x40>)
 8000cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_Init+0x40>)
 8000d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f92f 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f003 fdb8 	bl	800488c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f939 	bl	8000fbe <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 f90f 	bl	8000f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000004 	.word	0x20000004
 8000d84:	20000000 	.word	0x20000000

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000004 	.word	0x20000004
 8000dac:	20000050 	.word	0x20000050

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000050 	.word	0x20000050

08000dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff ffee 	bl	8000db0 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d005      	beq.n	8000dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_Delay+0x40>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dee:	bf00      	nop
 8000df0:	f7ff ffde 	bl	8000db0 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8f7      	bhi.n	8000df0 <HAL_Delay+0x28>
  {
  }
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000004 	.word	0x20000004

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
         );
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f3c:	d301      	bcc.n	8000f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00f      	b.n	8000f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <SysTick_Config+0x40>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f7ff ff8e 	bl	8000e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SysTick_Config+0x40>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SysTick_Config+0x40>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff47 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff5c 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff8e 	bl	8000ec4 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5d 	bl	8000e70 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ffb0 	bl	8000f2c <SysTick_Config>
 8000fcc:	4603      	mov	r3, r0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	e165      	b.n	80012c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	429a      	cmp	r2, r3
 800100e:	f040 8154 	bne.w	80012ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d00b      	beq.n	8001032 <HAL_GPIO_Init+0x5a>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001026:	2b11      	cmp	r3, #17
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b12      	cmp	r3, #18
 8001030:	d130      	bne.n	8001094 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	f003 0201 	and.w	r2, r3, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0xfc>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b12      	cmp	r3, #18
 80010d2:	d123      	bne.n	800111c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	69b9      	ldr	r1, [r7, #24]
 8001118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0203 	and.w	r2, r3, #3
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80ae 	beq.w	80012ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b5c      	ldr	r3, [pc, #368]	; (80012d4 <HAL_GPIO_Init+0x2fc>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a5b      	ldr	r2, [pc, #364]	; (80012d4 <HAL_GPIO_Init+0x2fc>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <HAL_GPIO_Init+0x2fc>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117a:	4a57      	ldr	r2, [pc, #348]	; (80012d8 <HAL_GPIO_Init+0x300>)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4e      	ldr	r2, [pc, #312]	; (80012dc <HAL_GPIO_Init+0x304>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x21a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4d      	ldr	r2, [pc, #308]	; (80012e0 <HAL_GPIO_Init+0x308>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x216>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4c      	ldr	r2, [pc, #304]	; (80012e4 <HAL_GPIO_Init+0x30c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x212>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4b      	ldr	r2, [pc, #300]	; (80012e8 <HAL_GPIO_Init+0x310>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x20e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4a      	ldr	r2, [pc, #296]	; (80012ec <HAL_GPIO_Init+0x314>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x20a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a49      	ldr	r2, [pc, #292]	; (80012f0 <HAL_GPIO_Init+0x318>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x206>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a48      	ldr	r2, [pc, #288]	; (80012f4 <HAL_GPIO_Init+0x31c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x202>
 80011d6:	2306      	movs	r3, #6
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011da:	2307      	movs	r3, #7
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4934      	ldr	r1, [pc, #208]	; (80012d8 <HAL_GPIO_Init+0x300>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <HAL_GPIO_Init+0x320>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001236:	4a30      	ldr	r2, [pc, #192]	; (80012f8 <HAL_GPIO_Init+0x320>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <HAL_GPIO_Init+0x320>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001260:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <HAL_GPIO_Init+0x320>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_GPIO_Init+0x320>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <HAL_GPIO_Init+0x320>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_GPIO_Init+0x320>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <HAL_GPIO_Init+0x320>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ae96 	bls.w	8000ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	3724      	adds	r7, #36	; 0x24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40013c00 	.word	0x40013c00

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800130c:	787b      	ldrb	r3, [r7, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0cc      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001344:	4b68      	ldr	r3, [pc, #416]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d90c      	bls.n	800136c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001352:	4b65      	ldr	r3, [pc, #404]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	4b63      	ldr	r3, [pc, #396]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d001      	beq.n	800136c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0b8      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001384:	4b59      	ldr	r3, [pc, #356]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4a58      	ldr	r2, [pc, #352]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800138e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800139c:	4b53      	ldr	r3, [pc, #332]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	4a52      	ldr	r2, [pc, #328]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a8:	4b50      	ldr	r3, [pc, #320]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	494d      	ldr	r1, [pc, #308]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d044      	beq.n	8001450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d107      	bne.n	80013de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	4b47      	ldr	r3, [pc, #284]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d119      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e07f      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d003      	beq.n	80013ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d107      	bne.n	80013fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ee:	4b3f      	ldr	r3, [pc, #252]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d109      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e06f      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fe:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e067      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f023 0203 	bic.w	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4934      	ldr	r1, [pc, #208]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 800141c:	4313      	orrs	r3, r2
 800141e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001420:	f7ff fcc6 	bl	8000db0 <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001426:	e00a      	b.n	800143e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001428:	f7ff fcc2 	bl	8000db0 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	; 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e04f      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 020c 	and.w	r2, r3, #12
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	429a      	cmp	r2, r3
 800144e:	d1eb      	bne.n	8001428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d20c      	bcs.n	8001478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e032      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d008      	beq.n	8001496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4916      	ldr	r1, [pc, #88]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	4313      	orrs	r3, r2
 8001494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	490e      	ldr	r1, [pc, #56]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014b6:	f000 f855 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 80014ba:	4601      	mov	r1, r0
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	fa21 f303 	lsr.w	r3, r1, r3
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_RCC_ClockConfig+0x1c8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fc26 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023c00 	.word	0x40023c00
 80014ec:	40023800 	.word	0x40023800
 80014f0:	08004d40 	.word	0x08004d40
 80014f4:	20000008 	.word	0x20000008
 80014f8:	20000000 	.word	0x20000000

080014fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_RCC_GetHCLKFreq+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000008 	.word	0x20000008

08001514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001518:	f7ff fff0 	bl	80014fc <HAL_RCC_GetHCLKFreq>
 800151c:	4601      	mov	r1, r0
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	0a9b      	lsrs	r3, r3, #10
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	4a03      	ldr	r2, [pc, #12]	; (8001538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40023800 	.word	0x40023800
 8001538:	08004d50 	.word	0x08004d50

0800153c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001540:	f7ff ffdc 	bl	80014fc <HAL_RCC_GetHCLKFreq>
 8001544:	4601      	mov	r1, r0
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	0b5b      	lsrs	r3, r3, #13
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	4a03      	ldr	r2, [pc, #12]	; (8001560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40023800 	.word	0x40023800
 8001560:	08004d50 	.word	0x08004d50

08001564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800157e:	4bc6      	ldr	r3, [pc, #792]	; (8001898 <HAL_RCC_GetSysClockFreq+0x334>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b0c      	cmp	r3, #12
 8001588:	f200 817e 	bhi.w	8001888 <HAL_RCC_GetSysClockFreq+0x324>
 800158c:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <HAL_RCC_GetSysClockFreq+0x30>)
 800158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001592:	bf00      	nop
 8001594:	080015c9 	.word	0x080015c9
 8001598:	08001889 	.word	0x08001889
 800159c:	08001889 	.word	0x08001889
 80015a0:	08001889 	.word	0x08001889
 80015a4:	080015cf 	.word	0x080015cf
 80015a8:	08001889 	.word	0x08001889
 80015ac:	08001889 	.word	0x08001889
 80015b0:	08001889 	.word	0x08001889
 80015b4:	080015d5 	.word	0x080015d5
 80015b8:	08001889 	.word	0x08001889
 80015bc:	08001889 	.word	0x08001889
 80015c0:	08001889 	.word	0x08001889
 80015c4:	08001731 	.word	0x08001731
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015c8:	4bb4      	ldr	r3, [pc, #720]	; (800189c <HAL_RCC_GetSysClockFreq+0x338>)
 80015ca:	613b      	str	r3, [r7, #16]
       break;
 80015cc:	e15f      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ce:	4bb4      	ldr	r3, [pc, #720]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x33c>)
 80015d0:	613b      	str	r3, [r7, #16]
      break;
 80015d2:	e15c      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d4:	4bb0      	ldr	r3, [pc, #704]	; (8001898 <HAL_RCC_GetSysClockFreq+0x334>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015dc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015de:	4bae      	ldr	r3, [pc, #696]	; (8001898 <HAL_RCC_GetSysClockFreq+0x334>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d04a      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ea:	4bab      	ldr	r3, [pc, #684]	; (8001898 <HAL_RCC_GetSysClockFreq+0x334>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	099b      	lsrs	r3, r3, #6
 80015f0:	f04f 0400 	mov.w	r4, #0
 80015f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	ea03 0501 	and.w	r5, r3, r1
 8001600:	ea04 0602 	and.w	r6, r4, r2
 8001604:	4629      	mov	r1, r5
 8001606:	4632      	mov	r2, r6
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	f04f 0400 	mov.w	r4, #0
 8001610:	0154      	lsls	r4, r2, #5
 8001612:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001616:	014b      	lsls	r3, r1, #5
 8001618:	4619      	mov	r1, r3
 800161a:	4622      	mov	r2, r4
 800161c:	1b49      	subs	r1, r1, r5
 800161e:	eb62 0206 	sbc.w	r2, r2, r6
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	f04f 0400 	mov.w	r4, #0
 800162a:	0194      	lsls	r4, r2, #6
 800162c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001630:	018b      	lsls	r3, r1, #6
 8001632:	1a5b      	subs	r3, r3, r1
 8001634:	eb64 0402 	sbc.w	r4, r4, r2
 8001638:	f04f 0100 	mov.w	r1, #0
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	00e2      	lsls	r2, r4, #3
 8001642:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001646:	00d9      	lsls	r1, r3, #3
 8001648:	460b      	mov	r3, r1
 800164a:	4614      	mov	r4, r2
 800164c:	195b      	adds	r3, r3, r5
 800164e:	eb44 0406 	adc.w	r4, r4, r6
 8001652:	f04f 0100 	mov.w	r1, #0
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	0262      	lsls	r2, r4, #9
 800165c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001660:	0259      	lsls	r1, r3, #9
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	4618      	mov	r0, r3
 8001668:	4621      	mov	r1, r4
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f04f 0400 	mov.w	r4, #0
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	f7ff f9b6 	bl	80009e4 <__aeabi_uldivmod>
 8001678:	4603      	mov	r3, r0
 800167a:	460c      	mov	r4, r1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e049      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001680:	4b85      	ldr	r3, [pc, #532]	; (8001898 <HAL_RCC_GetSysClockFreq+0x334>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	099b      	lsrs	r3, r3, #6
 8001686:	f04f 0400 	mov.w	r4, #0
 800168a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	ea03 0501 	and.w	r5, r3, r1
 8001696:	ea04 0602 	and.w	r6, r4, r2
 800169a:	4629      	mov	r1, r5
 800169c:	4632      	mov	r2, r6
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	f04f 0400 	mov.w	r4, #0
 80016a6:	0154      	lsls	r4, r2, #5
 80016a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016ac:	014b      	lsls	r3, r1, #5
 80016ae:	4619      	mov	r1, r3
 80016b0:	4622      	mov	r2, r4
 80016b2:	1b49      	subs	r1, r1, r5
 80016b4:	eb62 0206 	sbc.w	r2, r2, r6
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	f04f 0400 	mov.w	r4, #0
 80016c0:	0194      	lsls	r4, r2, #6
 80016c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016c6:	018b      	lsls	r3, r1, #6
 80016c8:	1a5b      	subs	r3, r3, r1
 80016ca:	eb64 0402 	sbc.w	r4, r4, r2
 80016ce:	f04f 0100 	mov.w	r1, #0
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	00e2      	lsls	r2, r4, #3
 80016d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016dc:	00d9      	lsls	r1, r3, #3
 80016de:	460b      	mov	r3, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	195b      	adds	r3, r3, r5
 80016e4:	eb44 0406 	adc.w	r4, r4, r6
 80016e8:	f04f 0100 	mov.w	r1, #0
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	02a2      	lsls	r2, r4, #10
 80016f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016f6:	0299      	lsls	r1, r3, #10
 80016f8:	460b      	mov	r3, r1
 80016fa:	4614      	mov	r4, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	4621      	mov	r1, r4
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f04f 0400 	mov.w	r4, #0
 8001706:	461a      	mov	r2, r3
 8001708:	4623      	mov	r3, r4
 800170a:	f7ff f96b 	bl	80009e4 <__aeabi_uldivmod>
 800170e:	4603      	mov	r3, r0
 8001710:	460c      	mov	r4, r1
 8001712:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001714:	4b60      	ldr	r3, [pc, #384]	; (8001898 <HAL_RCC_GetSysClockFreq+0x334>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	0c1b      	lsrs	r3, r3, #16
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	3301      	adds	r3, #1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	613b      	str	r3, [r7, #16]
      break;
 800172e:	e0ae      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001730:	4b59      	ldr	r3, [pc, #356]	; (8001898 <HAL_RCC_GetSysClockFreq+0x334>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001738:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800173a:	4b57      	ldr	r3, [pc, #348]	; (8001898 <HAL_RCC_GetSysClockFreq+0x334>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d04a      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001746:	4b54      	ldr	r3, [pc, #336]	; (8001898 <HAL_RCC_GetSysClockFreq+0x334>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	099b      	lsrs	r3, r3, #6
 800174c:	f04f 0400 	mov.w	r4, #0
 8001750:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	ea03 0501 	and.w	r5, r3, r1
 800175c:	ea04 0602 	and.w	r6, r4, r2
 8001760:	4629      	mov	r1, r5
 8001762:	4632      	mov	r2, r6
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	f04f 0400 	mov.w	r4, #0
 800176c:	0154      	lsls	r4, r2, #5
 800176e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001772:	014b      	lsls	r3, r1, #5
 8001774:	4619      	mov	r1, r3
 8001776:	4622      	mov	r2, r4
 8001778:	1b49      	subs	r1, r1, r5
 800177a:	eb62 0206 	sbc.w	r2, r2, r6
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	f04f 0400 	mov.w	r4, #0
 8001786:	0194      	lsls	r4, r2, #6
 8001788:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800178c:	018b      	lsls	r3, r1, #6
 800178e:	1a5b      	subs	r3, r3, r1
 8001790:	eb64 0402 	sbc.w	r4, r4, r2
 8001794:	f04f 0100 	mov.w	r1, #0
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	00e2      	lsls	r2, r4, #3
 800179e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017a2:	00d9      	lsls	r1, r3, #3
 80017a4:	460b      	mov	r3, r1
 80017a6:	4614      	mov	r4, r2
 80017a8:	195b      	adds	r3, r3, r5
 80017aa:	eb44 0406 	adc.w	r4, r4, r6
 80017ae:	f04f 0100 	mov.w	r1, #0
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	0262      	lsls	r2, r4, #9
 80017b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80017bc:	0259      	lsls	r1, r3, #9
 80017be:	460b      	mov	r3, r1
 80017c0:	4614      	mov	r4, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	4621      	mov	r1, r4
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f04f 0400 	mov.w	r4, #0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4623      	mov	r3, r4
 80017d0:	f7ff f908 	bl	80009e4 <__aeabi_uldivmod>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e049      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017dc:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <HAL_RCC_GetSysClockFreq+0x334>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	f04f 0400 	mov.w	r4, #0
 80017e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	ea03 0501 	and.w	r5, r3, r1
 80017f2:	ea04 0602 	and.w	r6, r4, r2
 80017f6:	4629      	mov	r1, r5
 80017f8:	4632      	mov	r2, r6
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	f04f 0400 	mov.w	r4, #0
 8001802:	0154      	lsls	r4, r2, #5
 8001804:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001808:	014b      	lsls	r3, r1, #5
 800180a:	4619      	mov	r1, r3
 800180c:	4622      	mov	r2, r4
 800180e:	1b49      	subs	r1, r1, r5
 8001810:	eb62 0206 	sbc.w	r2, r2, r6
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	f04f 0400 	mov.w	r4, #0
 800181c:	0194      	lsls	r4, r2, #6
 800181e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001822:	018b      	lsls	r3, r1, #6
 8001824:	1a5b      	subs	r3, r3, r1
 8001826:	eb64 0402 	sbc.w	r4, r4, r2
 800182a:	f04f 0100 	mov.w	r1, #0
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	00e2      	lsls	r2, r4, #3
 8001834:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001838:	00d9      	lsls	r1, r3, #3
 800183a:	460b      	mov	r3, r1
 800183c:	4614      	mov	r4, r2
 800183e:	195b      	adds	r3, r3, r5
 8001840:	eb44 0406 	adc.w	r4, r4, r6
 8001844:	f04f 0100 	mov.w	r1, #0
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	02a2      	lsls	r2, r4, #10
 800184e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001852:	0299      	lsls	r1, r3, #10
 8001854:	460b      	mov	r3, r1
 8001856:	4614      	mov	r4, r2
 8001858:	4618      	mov	r0, r3
 800185a:	4621      	mov	r1, r4
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f04f 0400 	mov.w	r4, #0
 8001862:	461a      	mov	r2, r3
 8001864:	4623      	mov	r3, r4
 8001866:	f7ff f8bd 	bl	80009e4 <__aeabi_uldivmod>
 800186a:	4603      	mov	r3, r0
 800186c:	460c      	mov	r4, r1
 800186e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RCC_GetSysClockFreq+0x334>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	0f1b      	lsrs	r3, r3, #28
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	fbb2 f3f3 	udiv	r3, r2, r3
 8001884:	613b      	str	r3, [r7, #16]
      break;
 8001886:	e002      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <HAL_RCC_GetSysClockFreq+0x338>)
 800188a:	613b      	str	r3, [r7, #16]
      break;
 800188c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188e:	693b      	ldr	r3, [r7, #16]
}
 8001890:	4618      	mov	r0, r3
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	00f42400 	.word	0x00f42400
 80018a0:	007a1200 	.word	0x007a1200

080018a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 8083 	beq.w	80019c4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018be:	4b95      	ldr	r3, [pc, #596]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d019      	beq.n	80018fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ca:	4b92      	ldr	r3, [pc, #584]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d106      	bne.n	80018e4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018d6:	4b8f      	ldr	r3, [pc, #572]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018e2:	d00c      	beq.n	80018fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e4:	4b8b      	ldr	r3, [pc, #556]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d112      	bne.n	8001916 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f0:	4b88      	ldr	r3, [pc, #544]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fc:	d10b      	bne.n	8001916 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fe:	4b85      	ldr	r3, [pc, #532]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d05b      	beq.n	80019c2 <HAL_RCC_OscConfig+0x11e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d157      	bne.n	80019c2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e216      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x8a>
 8001920:	4b7c      	ldr	r3, [pc, #496]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a7b      	ldr	r2, [pc, #492]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e01d      	b.n	800196a <HAL_RCC_OscConfig+0xc6>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001936:	d10c      	bne.n	8001952 <HAL_RCC_OscConfig+0xae>
 8001938:	4b76      	ldr	r3, [pc, #472]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a75      	ldr	r2, [pc, #468]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 800193e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a72      	ldr	r2, [pc, #456]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e00b      	b.n	800196a <HAL_RCC_OscConfig+0xc6>
 8001952:	4b70      	ldr	r3, [pc, #448]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a6f      	ldr	r2, [pc, #444]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b6d      	ldr	r3, [pc, #436]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a6c      	ldr	r2, [pc, #432]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001968:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d013      	beq.n	800199a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001972:	f7ff fa1d 	bl	8000db0 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800197a:	f7ff fa19 	bl	8000db0 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b64      	cmp	r3, #100	; 0x64
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e1db      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198c:	4b61      	ldr	r3, [pc, #388]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0xd6>
 8001998:	e014      	b.n	80019c4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff fa09 	bl	8000db0 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a2:	f7ff fa05 	bl	8000db0 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b64      	cmp	r3, #100	; 0x64
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1c7      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b4:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0xfe>
 80019c0:	e000      	b.n	80019c4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d06f      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019d0:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d017      	beq.n	8001a0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019dc:	4b4d      	ldr	r3, [pc, #308]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d105      	bne.n	80019f4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019e8:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f4:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019fc:	2b0c      	cmp	r3, #12
 80019fe:	d11c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a00:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d116      	bne.n	8001a3a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_OscConfig+0x180>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e18f      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4938      	ldr	r1, [pc, #224]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a38:	e03a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d020      	beq.n	8001a84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a42:	4b35      	ldr	r3, [pc, #212]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f9b2 	bl	8000db0 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a50:	f7ff f9ae 	bl	8000db0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e170      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4925      	ldr	r1, [pc, #148]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
 8001a82:	e015      	b.n	8001ab0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f991 	bl	8000db0 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff f98d 	bl	8000db0 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e14f      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d037      	beq.n	8001b2c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d016      	beq.n	8001af2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_RCC_OscConfig+0x278>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff f971 	bl	8000db0 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad2:	f7ff f96d 	bl	8000db0 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e12f      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x22e>
 8001af0:	e01c      	b.n	8001b2c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_RCC_OscConfig+0x278>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff f95a 	bl	8000db0 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afe:	e00f      	b.n	8001b20 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff f956 	bl	8000db0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d908      	bls.n	8001b20 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e118      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	42470000 	.word	0x42470000
 8001b1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b20:	4b8a      	ldr	r3, [pc, #552]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e9      	bne.n	8001b00 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 8097 	beq.w	8001c68 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3e:	4b83      	ldr	r3, [pc, #524]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a7e      	ldr	r2, [pc, #504]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b7c      	ldr	r3, [pc, #496]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b66:	2301      	movs	r3, #1
 8001b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6a:	4b79      	ldr	r3, [pc, #484]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d118      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b76:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a75      	ldr	r2, [pc, #468]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b82:	f7ff f915 	bl	8000db0 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8a:	f7ff f911 	bl	8000db0 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e0d3      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	4b6c      	ldr	r3, [pc, #432]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x31a>
 8001bb0:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb4:	4a65      	ldr	r2, [pc, #404]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbc:	e01c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x354>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x33c>
 8001bc6:	4b61      	ldr	r3, [pc, #388]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	4a60      	ldr	r2, [pc, #384]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd2:	4b5e      	ldr	r3, [pc, #376]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a5d      	ldr	r2, [pc, #372]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x354>
 8001be0:	4b5a      	ldr	r3, [pc, #360]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	4a59      	ldr	r2, [pc, #356]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	6713      	str	r3, [r2, #112]	; 0x70
 8001bec:	4b57      	ldr	r3, [pc, #348]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	4a56      	ldr	r2, [pc, #344]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bf2:	f023 0304 	bic.w	r3, r3, #4
 8001bf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d015      	beq.n	8001c2c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff f8d6 	bl	8000db0 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c08:	f7ff f8d2 	bl	8000db0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e092      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1e:	4b4b      	ldr	r3, [pc, #300]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0ee      	beq.n	8001c08 <HAL_RCC_OscConfig+0x364>
 8001c2a:	e014      	b.n	8001c56 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7ff f8c0 	bl	8000db0 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7ff f8bc 	bl	8000db0 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e07c      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4a:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1ee      	bne.n	8001c34 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5c:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a3a      	ldr	r2, [pc, #232]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d068      	beq.n	8001d42 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c70:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d060      	beq.n	8001d3e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d145      	bne.n	8001d10 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c84:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8a:	f7ff f891 	bl	8000db0 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff f88d 	bl	8000db0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e04f      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca4:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69da      	ldr	r2, [r3, #28]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	019b      	lsls	r3, r3, #6
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	085b      	lsrs	r3, r3, #1
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	041b      	lsls	r3, r3, #16
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	061b      	lsls	r3, r3, #24
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	071b      	lsls	r3, r3, #28
 8001cdc:	491b      	ldr	r1, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f862 	bl	8000db0 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f85e 	bl	8000db0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e020      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x44c>
 8001d0e:	e018      	b.n	8001d42 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff f84b 	bl	8000db0 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff f847 	bl	8000db0 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e009      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x47a>
 8001d3c:	e001      	b.n	8001d42 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40007000 	.word	0x40007000
 8001d54:	42470060 	.word	0x42470060

08001d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e056      	b.n	8001e18 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d106      	bne.n	8001d8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f002 fd09 	bl	800479c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001da0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	ea42 0103 	orr.w	r1, r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	0c1b      	lsrs	r3, r3, #16
 8001de8:	f003 0104 	and.w	r1, r3, #4
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_SPI_Transmit+0x22>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e11e      	b.n	8002080 <HAL_SPI_Transmit+0x260>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e4a:	f7fe ffb1 	bl	8000db0 <HAL_GetTick>
 8001e4e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d002      	beq.n	8001e66 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e60:	2302      	movs	r3, #2
 8001e62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e64:	e103      	b.n	800206e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <HAL_SPI_Transmit+0x52>
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e76:	e0fa      	b.n	800206e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	88fa      	ldrh	r2, [r7, #6]
 8001e90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	88fa      	ldrh	r2, [r7, #6]
 8001e96:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ebe:	d107      	bne.n	8001ed0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ece:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d007      	beq.n	8001eee <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ef6:	d14b      	bne.n	8001f90 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_SPI_Transmit+0xe6>
 8001f00:	8afb      	ldrh	r3, [r7, #22]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d13e      	bne.n	8001f84 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	881a      	ldrh	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	1c9a      	adds	r2, r3, #2
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f2a:	e02b      	b.n	8001f84 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d112      	bne.n	8001f60 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	881a      	ldrh	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	1c9a      	adds	r2, r3, #2
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f5e:	e011      	b.n	8001f84 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f60:	f7fe ff26 	bl	8000db0 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d803      	bhi.n	8001f78 <HAL_SPI_Transmit+0x158>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f76:	d102      	bne.n	8001f7e <HAL_SPI_Transmit+0x15e>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f82:	e074      	b.n	800206e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1ce      	bne.n	8001f2c <HAL_SPI_Transmit+0x10c>
 8001f8e:	e04c      	b.n	800202a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <HAL_SPI_Transmit+0x17e>
 8001f98:	8afb      	ldrh	r3, [r7, #22]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d140      	bne.n	8002020 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fc4:	e02c      	b.n	8002020 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d113      	bne.n	8001ffc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	330c      	adds	r3, #12
 8001fde:	7812      	ldrb	r2, [r2, #0]
 8001fe0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ffa:	e011      	b.n	8002020 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ffc:	f7fe fed8 	bl	8000db0 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d803      	bhi.n	8002014 <HAL_SPI_Transmit+0x1f4>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002012:	d102      	bne.n	800201a <HAL_SPI_Transmit+0x1fa>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800201e:	e026      	b.n	800206e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1cd      	bne.n	8001fc6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fba4 	bl	800277c <SPI_EndRxTxTransaction>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2220      	movs	r2, #32
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10a      	bne.n	800205e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	77fb      	strb	r3, [r7, #31]
 800206a:	e000      	b.n	800206e <HAL_SPI_Transmit+0x24e>
  }

error:
 800206c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800207e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	4613      	mov	r3, r2
 8002096:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020a4:	d112      	bne.n	80020cc <HAL_SPI_Receive+0x44>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10e      	bne.n	80020cc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2204      	movs	r2, #4
 80020b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80020b6:	88fa      	ldrh	r2, [r7, #6]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f8e9 	bl	800229a <HAL_SPI_TransmitReceive>
 80020c8:	4603      	mov	r3, r0
 80020ca:	e0e2      	b.n	8002292 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_SPI_Receive+0x52>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e0db      	b.n	8002292 <HAL_SPI_Receive+0x20a>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020e2:	f7fe fe65 	bl	8000db0 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d002      	beq.n	80020fa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
 80020f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020f8:	e0c2      	b.n	8002280 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_SPI_Receive+0x7e>
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	75fb      	strb	r3, [r7, #23]
    goto error;
 800210a:	e0b9      	b.n	8002280 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2204      	movs	r2, #4
 8002110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	88fa      	ldrh	r2, [r7, #6]
 8002124:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	88fa      	ldrh	r2, [r7, #6]
 800212a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002152:	d107      	bne.n	8002164 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	2b40      	cmp	r3, #64	; 0x40
 8002170:	d007      	beq.n	8002182 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d162      	bne.n	8002250 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800218a:	e02e      	b.n	80021ea <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b01      	cmp	r3, #1
 8002198:	d115      	bne.n	80021c6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f103 020c 	add.w	r2, r3, #12
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	7812      	ldrb	r2, [r2, #0]
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021c4:	e011      	b.n	80021ea <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021c6:	f7fe fdf3 	bl	8000db0 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d803      	bhi.n	80021de <HAL_SPI_Receive+0x156>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d102      	bne.n	80021e4 <HAL_SPI_Receive+0x15c>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80021e8:	e04a      	b.n	8002280 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1cb      	bne.n	800218c <HAL_SPI_Receive+0x104>
 80021f4:	e031      	b.n	800225a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d113      	bne.n	800222c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220e:	b292      	uxth	r2, r2
 8002210:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002216:	1c9a      	adds	r2, r3, #2
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002220:	b29b      	uxth	r3, r3
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	87da      	strh	r2, [r3, #62]	; 0x3e
 800222a:	e011      	b.n	8002250 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800222c:	f7fe fdc0 	bl	8000db0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d803      	bhi.n	8002244 <HAL_SPI_Receive+0x1bc>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002242:	d102      	bne.n	800224a <HAL_SPI_Receive+0x1c2>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800224e:	e017      	b.n	8002280 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002254:	b29b      	uxth	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1cd      	bne.n	80021f6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	6839      	ldr	r1, [r7, #0]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fa27 	bl	80026b2 <SPI_EndRxTransaction>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	75fb      	strb	r3, [r7, #23]
 800227c:	e000      	b.n	8002280 <HAL_SPI_Receive+0x1f8>
  }

error :
 800227e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002290:	7dfb      	ldrb	r3, [r7, #23]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b08c      	sub	sp, #48	; 0x30
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022a8:	2301      	movs	r3, #1
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_SPI_TransmitReceive+0x26>
 80022bc:	2302      	movs	r3, #2
 80022be:	e18a      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x33c>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022c8:	f7fe fd72 	bl	8000db0 <HAL_GetTick>
 80022cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d00f      	beq.n	800230a <HAL_SPI_TransmitReceive+0x70>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022f0:	d107      	bne.n	8002302 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d103      	bne.n	8002302 <HAL_SPI_TransmitReceive+0x68>
 80022fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d003      	beq.n	800230a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002302:	2302      	movs	r3, #2
 8002304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002308:	e15b      	b.n	80025c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_SPI_TransmitReceive+0x82>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_SPI_TransmitReceive+0x82>
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d103      	bne.n	8002324 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002322:	e14e      	b.n	80025c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b04      	cmp	r3, #4
 800232e:	d003      	beq.n	8002338 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2205      	movs	r2, #5
 8002334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	887a      	ldrh	r2, [r7, #2]
 800234e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	887a      	ldrh	r2, [r7, #2]
 800235a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002378:	2b40      	cmp	r3, #64	; 0x40
 800237a:	d007      	beq.n	800238c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800238a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002394:	d178      	bne.n	8002488 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <HAL_SPI_TransmitReceive+0x10a>
 800239e:	8b7b      	ldrh	r3, [r7, #26]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d166      	bne.n	8002472 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	881a      	ldrh	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	1c9a      	adds	r2, r3, #2
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023c8:	e053      	b.n	8002472 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d11b      	bne.n	8002410 <HAL_SPI_TransmitReceive+0x176>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d016      	beq.n	8002410 <HAL_SPI_TransmitReceive+0x176>
 80023e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d113      	bne.n	8002410 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	881a      	ldrh	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	1c9a      	adds	r2, r3, #2
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d119      	bne.n	8002452 <HAL_SPI_TransmitReceive+0x1b8>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d014      	beq.n	8002452 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	b292      	uxth	r2, r2
 8002434:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	1c9a      	adds	r2, r3, #2
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800244e:	2301      	movs	r3, #1
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002452:	f7fe fcad 	bl	8000db0 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800245e:	429a      	cmp	r2, r3
 8002460:	d807      	bhi.n	8002472 <HAL_SPI_TransmitReceive+0x1d8>
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d003      	beq.n	8002472 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002470:	e0a7      	b.n	80025c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1a6      	bne.n	80023ca <HAL_SPI_TransmitReceive+0x130>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1a1      	bne.n	80023ca <HAL_SPI_TransmitReceive+0x130>
 8002486:	e07c      	b.n	8002582 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_SPI_TransmitReceive+0x1fc>
 8002490:	8b7b      	ldrh	r3, [r7, #26]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d16b      	bne.n	800256e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	330c      	adds	r3, #12
 80024a0:	7812      	ldrb	r2, [r2, #0]
 80024a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024bc:	e057      	b.n	800256e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d11c      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x26c>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d017      	beq.n	8002506 <HAL_SPI_TransmitReceive+0x26c>
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d114      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	330c      	adds	r3, #12
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d119      	bne.n	8002548 <HAL_SPI_TransmitReceive+0x2ae>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d014      	beq.n	8002548 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002544:	2301      	movs	r3, #1
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002548:	f7fe fc32 	bl	8000db0 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002554:	429a      	cmp	r2, r3
 8002556:	d803      	bhi.n	8002560 <HAL_SPI_TransmitReceive+0x2c6>
 8002558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255e:	d102      	bne.n	8002566 <HAL_SPI_TransmitReceive+0x2cc>
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	2b00      	cmp	r3, #0
 8002564:	d103      	bne.n	800256e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800256c:	e029      	b.n	80025c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1a2      	bne.n	80024be <HAL_SPI_TransmitReceive+0x224>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d19d      	bne.n	80024be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f8f8 	bl	800277c <SPI_EndRxTxTransaction>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d006      	beq.n	80025a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800259e:	e010      	b.n	80025c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10b      	bne.n	80025c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	e000      	b.n	80025c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80025c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3730      	adds	r7, #48	; 0x30
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	4613      	mov	r3, r2
 80025ec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ee:	e04c      	b.n	800268a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d048      	beq.n	800268a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80025f8:	f7fe fbda 	bl	8000db0 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d902      	bls.n	800260e <SPI_WaitFlagStateUntilTimeout+0x30>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d13d      	bne.n	800268a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800261c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002626:	d111      	bne.n	800264c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002630:	d004      	beq.n	800263c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263a:	d107      	bne.n	800264c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800264a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002654:	d10f      	bne.n	8002676 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002674:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e00f      	b.n	80026aa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4013      	ands	r3, r2
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	429a      	cmp	r2, r3
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d1a3      	bne.n	80025f0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af02      	add	r7, sp, #8
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026c6:	d111      	bne.n	80026ec <SPI_EndRxTransaction+0x3a>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026d0:	d004      	beq.n	80026dc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026da:	d107      	bne.n	80026ec <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ea:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026f4:	d12a      	bne.n	800274c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fe:	d012      	beq.n	8002726 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2200      	movs	r2, #0
 8002708:	2180      	movs	r1, #128	; 0x80
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff ff67 	bl	80025de <SPI_WaitFlagStateUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d02d      	beq.n	8002772 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f043 0220 	orr.w	r2, r3, #32
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e026      	b.n	8002774 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2200      	movs	r2, #0
 800272e:	2101      	movs	r1, #1
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff ff54 	bl	80025de <SPI_WaitFlagStateUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01a      	beq.n	8002772 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e013      	b.n	8002774 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	2101      	movs	r1, #1
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff ff41 	bl	80025de <SPI_WaitFlagStateUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e000      	b.n	8002774 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <SPI_EndRxTxTransaction+0x7c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1b      	ldr	r2, [pc, #108]	; (80027fc <SPI_EndRxTxTransaction+0x80>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0d5b      	lsrs	r3, r3, #21
 8002794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a6:	d112      	bne.n	80027ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2200      	movs	r2, #0
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff ff13 	bl	80025de <SPI_WaitFlagStateUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	f043 0220 	orr.w	r2, r3, #32
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e00f      	b.n	80027ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d0f2      	beq.n	80027ce <SPI_EndRxTxTransaction+0x52>
 80027e8:	e000      	b.n	80027ec <SPI_EndRxTxTransaction+0x70>
        break;
 80027ea:	bf00      	nop
  }

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000008 	.word	0x20000008
 80027fc:	165e9f81 	.word	0x165e9f81

08002800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e01d      	b.n	800284e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f002 f948 	bl	8004abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3304      	adds	r3, #4
 800283c:	4619      	mov	r1, r3
 800283e:	4610      	mov	r0, r2
 8002840:	f000 f9fa 	bl	8002c38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e01d      	b.n	80028a4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f815 	bl	80028ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3304      	adds	r3, #4
 8002892:	4619      	mov	r1, r3
 8002894:	4610      	mov	r0, r2
 8002896:	f000 f9cf 	bl	8002c38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2201      	movs	r2, #1
 80028d0:	6839      	ldr	r1, [r7, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fc9a 	bl	800320c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a15      	ldr	r2, [pc, #84]	; (8002934 <HAL_TIM_PWM_Start+0x74>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d004      	beq.n	80028ec <HAL_TIM_PWM_Start+0x2c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a14      	ldr	r2, [pc, #80]	; (8002938 <HAL_TIM_PWM_Start+0x78>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d101      	bne.n	80028f0 <HAL_TIM_PWM_Start+0x30>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_TIM_PWM_Start+0x32>
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002904:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b06      	cmp	r3, #6
 8002916:	d007      	beq.n	8002928 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	40010400 	.word	0x40010400

0800293c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002952:	2302      	movs	r3, #2
 8002954:	e0b4      	b.n	8002ac0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2202      	movs	r2, #2
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b0c      	cmp	r3, #12
 800296a:	f200 809f 	bhi.w	8002aac <HAL_TIM_PWM_ConfigChannel+0x170>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	080029a9 	.word	0x080029a9
 8002978:	08002aad 	.word	0x08002aad
 800297c:	08002aad 	.word	0x08002aad
 8002980:	08002aad 	.word	0x08002aad
 8002984:	080029e9 	.word	0x080029e9
 8002988:	08002aad 	.word	0x08002aad
 800298c:	08002aad 	.word	0x08002aad
 8002990:	08002aad 	.word	0x08002aad
 8002994:	08002a2b 	.word	0x08002a2b
 8002998:	08002aad 	.word	0x08002aad
 800299c:	08002aad 	.word	0x08002aad
 80029a0:	08002aad 	.word	0x08002aad
 80029a4:	08002a6b 	.word	0x08002a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f9e2 	bl	8002d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0208 	orr.w	r2, r2, #8
 80029c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0204 	bic.w	r2, r2, #4
 80029d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6999      	ldr	r1, [r3, #24]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	619a      	str	r2, [r3, #24]
      break;
 80029e6:	e062      	b.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fa32 	bl	8002e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6999      	ldr	r1, [r3, #24]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	021a      	lsls	r2, r3, #8
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	619a      	str	r2, [r3, #24]
      break;
 8002a28:	e041      	b.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fa87 	bl	8002f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69da      	ldr	r2, [r3, #28]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0208 	orr.w	r2, r2, #8
 8002a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69da      	ldr	r2, [r3, #28]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0204 	bic.w	r2, r2, #4
 8002a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69d9      	ldr	r1, [r3, #28]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	61da      	str	r2, [r3, #28]
      break;
 8002a68:	e021      	b.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fadb 	bl	800302c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69d9      	ldr	r1, [r3, #28]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	021a      	lsls	r2, r3, #8
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	61da      	str	r2, [r3, #28]
      break;
 8002aaa:	e000      	b.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002aac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_TIM_ConfigClockSource+0x18>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0a6      	b.n	8002c2e <HAL_TIM_ConfigClockSource+0x166>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b40      	cmp	r3, #64	; 0x40
 8002b16:	d067      	beq.n	8002be8 <HAL_TIM_ConfigClockSource+0x120>
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	d80b      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x6c>
 8002b1c:	2b10      	cmp	r3, #16
 8002b1e:	d073      	beq.n	8002c08 <HAL_TIM_ConfigClockSource+0x140>
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	d802      	bhi.n	8002b2a <HAL_TIM_ConfigClockSource+0x62>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d06f      	beq.n	8002c08 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b28:	e078      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d06c      	beq.n	8002c08 <HAL_TIM_ConfigClockSource+0x140>
 8002b2e:	2b30      	cmp	r3, #48	; 0x30
 8002b30:	d06a      	beq.n	8002c08 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002b32:	e073      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b34:	2b70      	cmp	r3, #112	; 0x70
 8002b36:	d00d      	beq.n	8002b54 <HAL_TIM_ConfigClockSource+0x8c>
 8002b38:	2b70      	cmp	r3, #112	; 0x70
 8002b3a:	d804      	bhi.n	8002b46 <HAL_TIM_ConfigClockSource+0x7e>
 8002b3c:	2b50      	cmp	r3, #80	; 0x50
 8002b3e:	d033      	beq.n	8002ba8 <HAL_TIM_ConfigClockSource+0xe0>
 8002b40:	2b60      	cmp	r3, #96	; 0x60
 8002b42:	d041      	beq.n	8002bc8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002b44:	e06a      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4a:	d066      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x152>
 8002b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b50:	d017      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002b52:	e063      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6899      	ldr	r1, [r3, #8]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f000 fb32 	bl	80031cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]
      break;
 8002b80:	e04c      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6899      	ldr	r1, [r3, #8]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f000 fb1b 	bl	80031cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ba4:	609a      	str	r2, [r3, #8]
      break;
 8002ba6:	e039      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f000 fa8f 	bl	80030d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2150      	movs	r1, #80	; 0x50
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fae8 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002bc6:	e029      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f000 faae 	bl	8003136 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2160      	movs	r1, #96	; 0x60
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fad8 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002be6:	e019      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f000 fa6f 	bl	80030d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2140      	movs	r1, #64	; 0x40
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fac8 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002c06:	e009      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4619      	mov	r1, r3
 8002c12:	4610      	mov	r0, r2
 8002c14:	f000 fabf 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002c18:	e000      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a40      	ldr	r2, [pc, #256]	; (8002d4c <TIM_Base_SetConfig+0x114>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d013      	beq.n	8002c78 <TIM_Base_SetConfig+0x40>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c56:	d00f      	beq.n	8002c78 <TIM_Base_SetConfig+0x40>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3d      	ldr	r2, [pc, #244]	; (8002d50 <TIM_Base_SetConfig+0x118>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00b      	beq.n	8002c78 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3c      	ldr	r2, [pc, #240]	; (8002d54 <TIM_Base_SetConfig+0x11c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d007      	beq.n	8002c78 <TIM_Base_SetConfig+0x40>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3b      	ldr	r2, [pc, #236]	; (8002d58 <TIM_Base_SetConfig+0x120>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_Base_SetConfig+0x40>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a3a      	ldr	r2, [pc, #232]	; (8002d5c <TIM_Base_SetConfig+0x124>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d108      	bne.n	8002c8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2f      	ldr	r2, [pc, #188]	; (8002d4c <TIM_Base_SetConfig+0x114>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d02b      	beq.n	8002cea <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c98:	d027      	beq.n	8002cea <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a2c      	ldr	r2, [pc, #176]	; (8002d50 <TIM_Base_SetConfig+0x118>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d023      	beq.n	8002cea <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	; (8002d54 <TIM_Base_SetConfig+0x11c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01f      	beq.n	8002cea <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2a      	ldr	r2, [pc, #168]	; (8002d58 <TIM_Base_SetConfig+0x120>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01b      	beq.n	8002cea <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <TIM_Base_SetConfig+0x124>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d017      	beq.n	8002cea <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a28      	ldr	r2, [pc, #160]	; (8002d60 <TIM_Base_SetConfig+0x128>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <TIM_Base_SetConfig+0x12c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00f      	beq.n	8002cea <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <TIM_Base_SetConfig+0x130>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00b      	beq.n	8002cea <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a25      	ldr	r2, [pc, #148]	; (8002d6c <TIM_Base_SetConfig+0x134>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a24      	ldr	r2, [pc, #144]	; (8002d70 <TIM_Base_SetConfig+0x138>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d003      	beq.n	8002cea <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a23      	ldr	r2, [pc, #140]	; (8002d74 <TIM_Base_SetConfig+0x13c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d108      	bne.n	8002cfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <TIM_Base_SetConfig+0x114>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d003      	beq.n	8002d30 <TIM_Base_SetConfig+0xf8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a0c      	ldr	r2, [pc, #48]	; (8002d5c <TIM_Base_SetConfig+0x124>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d103      	bne.n	8002d38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	615a      	str	r2, [r3, #20]
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40000800 	.word	0x40000800
 8002d58:	40000c00 	.word	0x40000c00
 8002d5c:	40010400 	.word	0x40010400
 8002d60:	40014000 	.word	0x40014000
 8002d64:	40014400 	.word	0x40014400
 8002d68:	40014800 	.word	0x40014800
 8002d6c:	40001800 	.word	0x40001800
 8002d70:	40001c00 	.word	0x40001c00
 8002d74:	40002000 	.word	0x40002000

08002d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f023 0302 	bic.w	r3, r3, #2
 8002dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a20      	ldr	r2, [pc, #128]	; (8002e50 <TIM_OC1_SetConfig+0xd8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <TIM_OC1_SetConfig+0x64>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <TIM_OC1_SetConfig+0xdc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d10c      	bne.n	8002df6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f023 0308 	bic.w	r3, r3, #8
 8002de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <TIM_OC1_SetConfig+0xd8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d003      	beq.n	8002e06 <TIM_OC1_SetConfig+0x8e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <TIM_OC1_SetConfig+0xdc>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d111      	bne.n	8002e2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	621a      	str	r2, [r3, #32]
}
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40010000 	.word	0x40010000
 8002e54:	40010400 	.word	0x40010400

08002e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f023 0210 	bic.w	r2, r3, #16
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f023 0320 	bic.w	r3, r3, #32
 8002ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a22      	ldr	r2, [pc, #136]	; (8002f3c <TIM_OC2_SetConfig+0xe4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_OC2_SetConfig+0x68>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a21      	ldr	r2, [pc, #132]	; (8002f40 <TIM_OC2_SetConfig+0xe8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d10d      	bne.n	8002edc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <TIM_OC2_SetConfig+0xe4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d003      	beq.n	8002eec <TIM_OC2_SetConfig+0x94>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <TIM_OC2_SetConfig+0xe8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d113      	bne.n	8002f14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	621a      	str	r2, [r3, #32]
}
 8002f2e:	bf00      	nop
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	40010400 	.word	0x40010400

08002f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0303 	bic.w	r3, r3, #3
 8002f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a21      	ldr	r2, [pc, #132]	; (8003024 <TIM_OC3_SetConfig+0xe0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d003      	beq.n	8002faa <TIM_OC3_SetConfig+0x66>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a20      	ldr	r2, [pc, #128]	; (8003028 <TIM_OC3_SetConfig+0xe4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d10d      	bne.n	8002fc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a16      	ldr	r2, [pc, #88]	; (8003024 <TIM_OC3_SetConfig+0xe0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_OC3_SetConfig+0x92>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a15      	ldr	r2, [pc, #84]	; (8003028 <TIM_OC3_SetConfig+0xe4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d113      	bne.n	8002ffe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	621a      	str	r2, [r3, #32]
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40010000 	.word	0x40010000
 8003028:	40010400 	.word	0x40010400

0800302c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	031b      	lsls	r3, r3, #12
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <TIM_OC4_SetConfig+0xa4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d003      	beq.n	8003094 <TIM_OC4_SetConfig+0x68>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a11      	ldr	r2, [pc, #68]	; (80030d4 <TIM_OC4_SetConfig+0xa8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d109      	bne.n	80030a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800309a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	019b      	lsls	r3, r3, #6
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	621a      	str	r2, [r3, #32]
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40010000 	.word	0x40010000
 80030d4:	40010400 	.word	0x40010400

080030d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f023 0201 	bic.w	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f023 030a 	bic.w	r3, r3, #10
 8003114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003136:	b480      	push	{r7}
 8003138:	b087      	sub	sp, #28
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f023 0210 	bic.w	r2, r3, #16
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	031b      	lsls	r3, r3, #12
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003172:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	621a      	str	r2, [r3, #32]
}
 800318a:	bf00      	nop
 800318c:	371c      	adds	r7, #28
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003196:	b480      	push	{r7}
 8003198:	b085      	sub	sp, #20
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f043 0307 	orr.w	r3, r3, #7
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	609a      	str	r2, [r3, #8]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	021a      	lsls	r2, r3, #8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	609a      	str	r2, [r3, #8]
}
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2201      	movs	r2, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a1a      	ldr	r2, [r3, #32]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	43db      	mvns	r3, r3
 800322e:	401a      	ands	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	fa01 f303 	lsl.w	r3, r1, r3
 8003244:	431a      	orrs	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800326c:	2302      	movs	r3, #2
 800326e:	e05a      	b.n	8003326 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a21      	ldr	r2, [pc, #132]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d022      	beq.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032bc:	d01d      	beq.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d018      	beq.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1b      	ldr	r2, [pc, #108]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1a      	ldr	r2, [pc, #104]	; (8003340 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00e      	beq.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a18      	ldr	r2, [pc, #96]	; (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d009      	beq.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a17      	ldr	r2, [pc, #92]	; (8003348 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d004      	beq.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a15      	ldr	r2, [pc, #84]	; (800334c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d10c      	bne.n	8003314 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	4313      	orrs	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40010000 	.word	0x40010000
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800
 8003340:	40000c00 	.word	0x40000c00
 8003344:	40010400 	.word	0x40010400
 8003348:	40014000 	.word	0x40014000
 800334c:	40001800 	.word	0x40001800

08003350 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003368:	2302      	movs	r3, #2
 800336a:	e03d      	b.n	80033e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e03f      	b.n	8003486 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f001 fbd4 	bl	8004bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	; 0x24
 8003424:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003436:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f90b 	bl	8003654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800344c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800345c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800346c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b088      	sub	sp, #32
 8003492:	af02      	add	r7, sp, #8
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	f040 8083 	bne.w	80035b6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_UART_Transmit+0x2e>
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e07b      	b.n	80035b8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Transmit+0x40>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e074      	b.n	80035b8 <HAL_UART_Transmit+0x12a>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2221      	movs	r2, #33	; 0x21
 80034e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034e4:	f7fd fc64 	bl	8000db0 <HAL_GetTick>
 80034e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80034fe:	e042      	b.n	8003586 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003516:	d122      	bne.n	800355e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2200      	movs	r2, #0
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f84c 	bl	80035c0 <UART_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e042      	b.n	80035b8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003544:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3302      	adds	r3, #2
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	e017      	b.n	8003586 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3301      	adds	r3, #1
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	e013      	b.n	8003586 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f829 	bl	80035c0 <UART_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e01f      	b.n	80035b8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	60ba      	str	r2, [r7, #8]
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1b7      	bne.n	8003500 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	2140      	movs	r1, #64	; 0x40
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f810 	bl	80035c0 <UART_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e006      	b.n	80035b8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
  }
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d0:	e02c      	b.n	800362c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d028      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80035e0:	f7fd fbe6 	bl	8000db0 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d21d      	bcs.n	800362c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e00f      	b.n	800364c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4013      	ands	r3, r2
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	429a      	cmp	r2, r3
 8003648:	d0c3      	beq.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003696:	f023 030c 	bic.w	r3, r3, #12
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	68f9      	ldr	r1, [r7, #12]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c2:	f040 818b 	bne.w	80039dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4ac1      	ldr	r2, [pc, #772]	; (80039d0 <UART_SetConfig+0x37c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d005      	beq.n	80036dc <UART_SetConfig+0x88>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4abf      	ldr	r2, [pc, #764]	; (80039d4 <UART_SetConfig+0x380>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	f040 80bd 	bne.w	8003856 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036dc:	f7fd ff2e 	bl	800153c <HAL_RCC_GetPCLK2Freq>
 80036e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	461d      	mov	r5, r3
 80036e6:	f04f 0600 	mov.w	r6, #0
 80036ea:	46a8      	mov	r8, r5
 80036ec:	46b1      	mov	r9, r6
 80036ee:	eb18 0308 	adds.w	r3, r8, r8
 80036f2:	eb49 0409 	adc.w	r4, r9, r9
 80036f6:	4698      	mov	r8, r3
 80036f8:	46a1      	mov	r9, r4
 80036fa:	eb18 0805 	adds.w	r8, r8, r5
 80036fe:	eb49 0906 	adc.w	r9, r9, r6
 8003702:	f04f 0100 	mov.w	r1, #0
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800370e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003712:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003716:	4688      	mov	r8, r1
 8003718:	4691      	mov	r9, r2
 800371a:	eb18 0005 	adds.w	r0, r8, r5
 800371e:	eb49 0106 	adc.w	r1, r9, r6
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	461d      	mov	r5, r3
 8003728:	f04f 0600 	mov.w	r6, #0
 800372c:	196b      	adds	r3, r5, r5
 800372e:	eb46 0406 	adc.w	r4, r6, r6
 8003732:	461a      	mov	r2, r3
 8003734:	4623      	mov	r3, r4
 8003736:	f7fd f955 	bl	80009e4 <__aeabi_uldivmod>
 800373a:	4603      	mov	r3, r0
 800373c:	460c      	mov	r4, r1
 800373e:	461a      	mov	r2, r3
 8003740:	4ba5      	ldr	r3, [pc, #660]	; (80039d8 <UART_SetConfig+0x384>)
 8003742:	fba3 2302 	umull	r2, r3, r3, r2
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	461d      	mov	r5, r3
 8003750:	f04f 0600 	mov.w	r6, #0
 8003754:	46a9      	mov	r9, r5
 8003756:	46b2      	mov	sl, r6
 8003758:	eb19 0309 	adds.w	r3, r9, r9
 800375c:	eb4a 040a 	adc.w	r4, sl, sl
 8003760:	4699      	mov	r9, r3
 8003762:	46a2      	mov	sl, r4
 8003764:	eb19 0905 	adds.w	r9, r9, r5
 8003768:	eb4a 0a06 	adc.w	sl, sl, r6
 800376c:	f04f 0100 	mov.w	r1, #0
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003778:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800377c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003780:	4689      	mov	r9, r1
 8003782:	4692      	mov	sl, r2
 8003784:	eb19 0005 	adds.w	r0, r9, r5
 8003788:	eb4a 0106 	adc.w	r1, sl, r6
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	461d      	mov	r5, r3
 8003792:	f04f 0600 	mov.w	r6, #0
 8003796:	196b      	adds	r3, r5, r5
 8003798:	eb46 0406 	adc.w	r4, r6, r6
 800379c:	461a      	mov	r2, r3
 800379e:	4623      	mov	r3, r4
 80037a0:	f7fd f920 	bl	80009e4 <__aeabi_uldivmod>
 80037a4:	4603      	mov	r3, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	461a      	mov	r2, r3
 80037aa:	4b8b      	ldr	r3, [pc, #556]	; (80039d8 <UART_SetConfig+0x384>)
 80037ac:	fba3 1302 	umull	r1, r3, r3, r2
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	2164      	movs	r1, #100	; 0x64
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	3332      	adds	r3, #50	; 0x32
 80037be:	4a86      	ldr	r2, [pc, #536]	; (80039d8 <UART_SetConfig+0x384>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037cc:	4498      	add	r8, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	461d      	mov	r5, r3
 80037d2:	f04f 0600 	mov.w	r6, #0
 80037d6:	46a9      	mov	r9, r5
 80037d8:	46b2      	mov	sl, r6
 80037da:	eb19 0309 	adds.w	r3, r9, r9
 80037de:	eb4a 040a 	adc.w	r4, sl, sl
 80037e2:	4699      	mov	r9, r3
 80037e4:	46a2      	mov	sl, r4
 80037e6:	eb19 0905 	adds.w	r9, r9, r5
 80037ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80037ee:	f04f 0100 	mov.w	r1, #0
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003802:	4689      	mov	r9, r1
 8003804:	4692      	mov	sl, r2
 8003806:	eb19 0005 	adds.w	r0, r9, r5
 800380a:	eb4a 0106 	adc.w	r1, sl, r6
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	461d      	mov	r5, r3
 8003814:	f04f 0600 	mov.w	r6, #0
 8003818:	196b      	adds	r3, r5, r5
 800381a:	eb46 0406 	adc.w	r4, r6, r6
 800381e:	461a      	mov	r2, r3
 8003820:	4623      	mov	r3, r4
 8003822:	f7fd f8df 	bl	80009e4 <__aeabi_uldivmod>
 8003826:	4603      	mov	r3, r0
 8003828:	460c      	mov	r4, r1
 800382a:	461a      	mov	r2, r3
 800382c:	4b6a      	ldr	r3, [pc, #424]	; (80039d8 <UART_SetConfig+0x384>)
 800382e:	fba3 1302 	umull	r1, r3, r3, r2
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	2164      	movs	r1, #100	; 0x64
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	3332      	adds	r3, #50	; 0x32
 8003840:	4a65      	ldr	r2, [pc, #404]	; (80039d8 <UART_SetConfig+0x384>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	f003 0207 	and.w	r2, r3, #7
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4442      	add	r2, r8
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	e26f      	b.n	8003d36 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003856:	f7fd fe5d 	bl	8001514 <HAL_RCC_GetPCLK1Freq>
 800385a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	461d      	mov	r5, r3
 8003860:	f04f 0600 	mov.w	r6, #0
 8003864:	46a8      	mov	r8, r5
 8003866:	46b1      	mov	r9, r6
 8003868:	eb18 0308 	adds.w	r3, r8, r8
 800386c:	eb49 0409 	adc.w	r4, r9, r9
 8003870:	4698      	mov	r8, r3
 8003872:	46a1      	mov	r9, r4
 8003874:	eb18 0805 	adds.w	r8, r8, r5
 8003878:	eb49 0906 	adc.w	r9, r9, r6
 800387c:	f04f 0100 	mov.w	r1, #0
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003888:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800388c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003890:	4688      	mov	r8, r1
 8003892:	4691      	mov	r9, r2
 8003894:	eb18 0005 	adds.w	r0, r8, r5
 8003898:	eb49 0106 	adc.w	r1, r9, r6
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	461d      	mov	r5, r3
 80038a2:	f04f 0600 	mov.w	r6, #0
 80038a6:	196b      	adds	r3, r5, r5
 80038a8:	eb46 0406 	adc.w	r4, r6, r6
 80038ac:	461a      	mov	r2, r3
 80038ae:	4623      	mov	r3, r4
 80038b0:	f7fd f898 	bl	80009e4 <__aeabi_uldivmod>
 80038b4:	4603      	mov	r3, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	461a      	mov	r2, r3
 80038ba:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <UART_SetConfig+0x384>)
 80038bc:	fba3 2302 	umull	r2, r3, r3, r2
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	461d      	mov	r5, r3
 80038ca:	f04f 0600 	mov.w	r6, #0
 80038ce:	46a9      	mov	r9, r5
 80038d0:	46b2      	mov	sl, r6
 80038d2:	eb19 0309 	adds.w	r3, r9, r9
 80038d6:	eb4a 040a 	adc.w	r4, sl, sl
 80038da:	4699      	mov	r9, r3
 80038dc:	46a2      	mov	sl, r4
 80038de:	eb19 0905 	adds.w	r9, r9, r5
 80038e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80038e6:	f04f 0100 	mov.w	r1, #0
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038fa:	4689      	mov	r9, r1
 80038fc:	4692      	mov	sl, r2
 80038fe:	eb19 0005 	adds.w	r0, r9, r5
 8003902:	eb4a 0106 	adc.w	r1, sl, r6
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	461d      	mov	r5, r3
 800390c:	f04f 0600 	mov.w	r6, #0
 8003910:	196b      	adds	r3, r5, r5
 8003912:	eb46 0406 	adc.w	r4, r6, r6
 8003916:	461a      	mov	r2, r3
 8003918:	4623      	mov	r3, r4
 800391a:	f7fd f863 	bl	80009e4 <__aeabi_uldivmod>
 800391e:	4603      	mov	r3, r0
 8003920:	460c      	mov	r4, r1
 8003922:	461a      	mov	r2, r3
 8003924:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <UART_SetConfig+0x384>)
 8003926:	fba3 1302 	umull	r1, r3, r3, r2
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	2164      	movs	r1, #100	; 0x64
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	3332      	adds	r3, #50	; 0x32
 8003938:	4a27      	ldr	r2, [pc, #156]	; (80039d8 <UART_SetConfig+0x384>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003946:	4498      	add	r8, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	461d      	mov	r5, r3
 800394c:	f04f 0600 	mov.w	r6, #0
 8003950:	46a9      	mov	r9, r5
 8003952:	46b2      	mov	sl, r6
 8003954:	eb19 0309 	adds.w	r3, r9, r9
 8003958:	eb4a 040a 	adc.w	r4, sl, sl
 800395c:	4699      	mov	r9, r3
 800395e:	46a2      	mov	sl, r4
 8003960:	eb19 0905 	adds.w	r9, r9, r5
 8003964:	eb4a 0a06 	adc.w	sl, sl, r6
 8003968:	f04f 0100 	mov.w	r1, #0
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003974:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003978:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800397c:	4689      	mov	r9, r1
 800397e:	4692      	mov	sl, r2
 8003980:	eb19 0005 	adds.w	r0, r9, r5
 8003984:	eb4a 0106 	adc.w	r1, sl, r6
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	461d      	mov	r5, r3
 800398e:	f04f 0600 	mov.w	r6, #0
 8003992:	196b      	adds	r3, r5, r5
 8003994:	eb46 0406 	adc.w	r4, r6, r6
 8003998:	461a      	mov	r2, r3
 800399a:	4623      	mov	r3, r4
 800399c:	f7fd f822 	bl	80009e4 <__aeabi_uldivmod>
 80039a0:	4603      	mov	r3, r0
 80039a2:	460c      	mov	r4, r1
 80039a4:	461a      	mov	r2, r3
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <UART_SetConfig+0x384>)
 80039a8:	fba3 1302 	umull	r1, r3, r3, r2
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	2164      	movs	r1, #100	; 0x64
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	3332      	adds	r3, #50	; 0x32
 80039ba:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <UART_SetConfig+0x384>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	f003 0207 	and.w	r2, r3, #7
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4442      	add	r2, r8
 80039cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80039ce:	e1b2      	b.n	8003d36 <UART_SetConfig+0x6e2>
 80039d0:	40011000 	.word	0x40011000
 80039d4:	40011400 	.word	0x40011400
 80039d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4ad7      	ldr	r2, [pc, #860]	; (8003d40 <UART_SetConfig+0x6ec>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d005      	beq.n	80039f2 <UART_SetConfig+0x39e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4ad6      	ldr	r2, [pc, #856]	; (8003d44 <UART_SetConfig+0x6f0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	f040 80d1 	bne.w	8003b94 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80039f2:	f7fd fda3 	bl	800153c <HAL_RCC_GetPCLK2Freq>
 80039f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	469a      	mov	sl, r3
 80039fc:	f04f 0b00 	mov.w	fp, #0
 8003a00:	46d0      	mov	r8, sl
 8003a02:	46d9      	mov	r9, fp
 8003a04:	eb18 0308 	adds.w	r3, r8, r8
 8003a08:	eb49 0409 	adc.w	r4, r9, r9
 8003a0c:	4698      	mov	r8, r3
 8003a0e:	46a1      	mov	r9, r4
 8003a10:	eb18 080a 	adds.w	r8, r8, sl
 8003a14:	eb49 090b 	adc.w	r9, r9, fp
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a2c:	4688      	mov	r8, r1
 8003a2e:	4691      	mov	r9, r2
 8003a30:	eb1a 0508 	adds.w	r5, sl, r8
 8003a34:	eb4b 0609 	adc.w	r6, fp, r9
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	f04f 0400 	mov.w	r4, #0
 8003a4a:	0094      	lsls	r4, r2, #2
 8003a4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a50:	008b      	lsls	r3, r1, #2
 8003a52:	461a      	mov	r2, r3
 8003a54:	4623      	mov	r3, r4
 8003a56:	4628      	mov	r0, r5
 8003a58:	4631      	mov	r1, r6
 8003a5a:	f7fc ffc3 	bl	80009e4 <__aeabi_uldivmod>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	460c      	mov	r4, r1
 8003a62:	461a      	mov	r2, r3
 8003a64:	4bb8      	ldr	r3, [pc, #736]	; (8003d48 <UART_SetConfig+0x6f4>)
 8003a66:	fba3 2302 	umull	r2, r3, r3, r2
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	469b      	mov	fp, r3
 8003a74:	f04f 0c00 	mov.w	ip, #0
 8003a78:	46d9      	mov	r9, fp
 8003a7a:	46e2      	mov	sl, ip
 8003a7c:	eb19 0309 	adds.w	r3, r9, r9
 8003a80:	eb4a 040a 	adc.w	r4, sl, sl
 8003a84:	4699      	mov	r9, r3
 8003a86:	46a2      	mov	sl, r4
 8003a88:	eb19 090b 	adds.w	r9, r9, fp
 8003a8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a90:	f04f 0100 	mov.w	r1, #0
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003aa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aa4:	4689      	mov	r9, r1
 8003aa6:	4692      	mov	sl, r2
 8003aa8:	eb1b 0509 	adds.w	r5, fp, r9
 8003aac:	eb4c 060a 	adc.w	r6, ip, sl
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	f04f 0400 	mov.w	r4, #0
 8003ac2:	0094      	lsls	r4, r2, #2
 8003ac4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ac8:	008b      	lsls	r3, r1, #2
 8003aca:	461a      	mov	r2, r3
 8003acc:	4623      	mov	r3, r4
 8003ace:	4628      	mov	r0, r5
 8003ad0:	4631      	mov	r1, r6
 8003ad2:	f7fc ff87 	bl	80009e4 <__aeabi_uldivmod>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	460c      	mov	r4, r1
 8003ada:	461a      	mov	r2, r3
 8003adc:	4b9a      	ldr	r3, [pc, #616]	; (8003d48 <UART_SetConfig+0x6f4>)
 8003ade:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	2164      	movs	r1, #100	; 0x64
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	3332      	adds	r3, #50	; 0x32
 8003af0:	4a95      	ldr	r2, [pc, #596]	; (8003d48 <UART_SetConfig+0x6f4>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003afc:	4498      	add	r8, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	469b      	mov	fp, r3
 8003b02:	f04f 0c00 	mov.w	ip, #0
 8003b06:	46d9      	mov	r9, fp
 8003b08:	46e2      	mov	sl, ip
 8003b0a:	eb19 0309 	adds.w	r3, r9, r9
 8003b0e:	eb4a 040a 	adc.w	r4, sl, sl
 8003b12:	4699      	mov	r9, r3
 8003b14:	46a2      	mov	sl, r4
 8003b16:	eb19 090b 	adds.w	r9, r9, fp
 8003b1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b32:	4689      	mov	r9, r1
 8003b34:	4692      	mov	sl, r2
 8003b36:	eb1b 0509 	adds.w	r5, fp, r9
 8003b3a:	eb4c 060a 	adc.w	r6, ip, sl
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4619      	mov	r1, r3
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	f04f 0400 	mov.w	r4, #0
 8003b50:	0094      	lsls	r4, r2, #2
 8003b52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b56:	008b      	lsls	r3, r1, #2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4623      	mov	r3, r4
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	4631      	mov	r1, r6
 8003b60:	f7fc ff40 	bl	80009e4 <__aeabi_uldivmod>
 8003b64:	4603      	mov	r3, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b77      	ldr	r3, [pc, #476]	; (8003d48 <UART_SetConfig+0x6f4>)
 8003b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	2164      	movs	r1, #100	; 0x64
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	3332      	adds	r3, #50	; 0x32
 8003b7e:	4a72      	ldr	r2, [pc, #456]	; (8003d48 <UART_SetConfig+0x6f4>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	f003 020f 	and.w	r2, r3, #15
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4442      	add	r2, r8
 8003b90:	609a      	str	r2, [r3, #8]
 8003b92:	e0d0      	b.n	8003d36 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b94:	f7fd fcbe 	bl	8001514 <HAL_RCC_GetPCLK1Freq>
 8003b98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	469a      	mov	sl, r3
 8003b9e:	f04f 0b00 	mov.w	fp, #0
 8003ba2:	46d0      	mov	r8, sl
 8003ba4:	46d9      	mov	r9, fp
 8003ba6:	eb18 0308 	adds.w	r3, r8, r8
 8003baa:	eb49 0409 	adc.w	r4, r9, r9
 8003bae:	4698      	mov	r8, r3
 8003bb0:	46a1      	mov	r9, r4
 8003bb2:	eb18 080a 	adds.w	r8, r8, sl
 8003bb6:	eb49 090b 	adc.w	r9, r9, fp
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bc6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bce:	4688      	mov	r8, r1
 8003bd0:	4691      	mov	r9, r2
 8003bd2:	eb1a 0508 	adds.w	r5, sl, r8
 8003bd6:	eb4b 0609 	adc.w	r6, fp, r9
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4619      	mov	r1, r3
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	f04f 0400 	mov.w	r4, #0
 8003bec:	0094      	lsls	r4, r2, #2
 8003bee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bf2:	008b      	lsls	r3, r1, #2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4623      	mov	r3, r4
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	f7fc fef2 	bl	80009e4 <__aeabi_uldivmod>
 8003c00:	4603      	mov	r3, r0
 8003c02:	460c      	mov	r4, r1
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b50      	ldr	r3, [pc, #320]	; (8003d48 <UART_SetConfig+0x6f4>)
 8003c08:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	469b      	mov	fp, r3
 8003c16:	f04f 0c00 	mov.w	ip, #0
 8003c1a:	46d9      	mov	r9, fp
 8003c1c:	46e2      	mov	sl, ip
 8003c1e:	eb19 0309 	adds.w	r3, r9, r9
 8003c22:	eb4a 040a 	adc.w	r4, sl, sl
 8003c26:	4699      	mov	r9, r3
 8003c28:	46a2      	mov	sl, r4
 8003c2a:	eb19 090b 	adds.w	r9, r9, fp
 8003c2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c32:	f04f 0100 	mov.w	r1, #0
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c46:	4689      	mov	r9, r1
 8003c48:	4692      	mov	sl, r2
 8003c4a:	eb1b 0509 	adds.w	r5, fp, r9
 8003c4e:	eb4c 060a 	adc.w	r6, ip, sl
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4619      	mov	r1, r3
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	f04f 0400 	mov.w	r4, #0
 8003c64:	0094      	lsls	r4, r2, #2
 8003c66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c6a:	008b      	lsls	r3, r1, #2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4623      	mov	r3, r4
 8003c70:	4628      	mov	r0, r5
 8003c72:	4631      	mov	r1, r6
 8003c74:	f7fc feb6 	bl	80009e4 <__aeabi_uldivmod>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	460c      	mov	r4, r1
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b32      	ldr	r3, [pc, #200]	; (8003d48 <UART_SetConfig+0x6f4>)
 8003c80:	fba3 1302 	umull	r1, r3, r3, r2
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	2164      	movs	r1, #100	; 0x64
 8003c88:	fb01 f303 	mul.w	r3, r1, r3
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	3332      	adds	r3, #50	; 0x32
 8003c92:	4a2d      	ldr	r2, [pc, #180]	; (8003d48 <UART_SetConfig+0x6f4>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c9e:	4498      	add	r8, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	469b      	mov	fp, r3
 8003ca4:	f04f 0c00 	mov.w	ip, #0
 8003ca8:	46d9      	mov	r9, fp
 8003caa:	46e2      	mov	sl, ip
 8003cac:	eb19 0309 	adds.w	r3, r9, r9
 8003cb0:	eb4a 040a 	adc.w	r4, sl, sl
 8003cb4:	4699      	mov	r9, r3
 8003cb6:	46a2      	mov	sl, r4
 8003cb8:	eb19 090b 	adds.w	r9, r9, fp
 8003cbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cc0:	f04f 0100 	mov.w	r1, #0
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ccc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cd4:	4689      	mov	r9, r1
 8003cd6:	4692      	mov	sl, r2
 8003cd8:	eb1b 0509 	adds.w	r5, fp, r9
 8003cdc:	eb4c 060a 	adc.w	r6, ip, sl
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	f04f 0400 	mov.w	r4, #0
 8003cf2:	0094      	lsls	r4, r2, #2
 8003cf4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cf8:	008b      	lsls	r3, r1, #2
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4623      	mov	r3, r4
 8003cfe:	4628      	mov	r0, r5
 8003d00:	4631      	mov	r1, r6
 8003d02:	f7fc fe6f 	bl	80009e4 <__aeabi_uldivmod>
 8003d06:	4603      	mov	r3, r0
 8003d08:	460c      	mov	r4, r1
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <UART_SetConfig+0x6f4>)
 8003d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	2164      	movs	r1, #100	; 0x64
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	3332      	adds	r3, #50	; 0x32
 8003d20:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <UART_SetConfig+0x6f4>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	f003 020f 	and.w	r2, r3, #15
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4442      	add	r2, r8
 8003d32:	609a      	str	r2, [r3, #8]
}
 8003d34:	e7ff      	b.n	8003d36 <UART_SetConfig+0x6e2>
 8003d36:	bf00      	nop
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d40:	40011000 	.word	0x40011000
 8003d44:	40011400 	.word	0x40011400
 8003d48:	51eb851f 	.word	0x51eb851f

08003d4c <NRF24_init>:

/* Functions */

// NRF24 Initialization function (20 and 53 page in the datasheet)
void NRF24_init(SPI_HandleTypeDef *nrfSPI)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	// Copy SPI handle
	nrf24_hspi = nrfSPI;
 8003d54:	4a51      	ldr	r2, [pc, #324]	; (8003e9c <NRF24_init+0x150>)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6013      	str	r3, [r2, #0]

	// Put Pins To Idle State
	NRF24_CSN(HIGH);
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	f000 f8a0 	bl	8003ea0 <NRF24_CSN>
	NRF24_CE(LOW);
 8003d60:	2000      	movs	r0, #0
 8003d62:	f000 f8b9 	bl	8003ed8 <NRF24_CE>

	// Initial Delay
	HAL_Delay(5);
 8003d66:	2005      	movs	r0, #5
 8003d68:	f7fd f82e 	bl	8000dc8 <HAL_Delay>

	// Soft Reset Registers
	NRF24_write_register(REG_CONFIG, 		_DS(1, CONFIG_CRCO) | _DS(1, CONFIG_EN_CRC));
 8003d6c:	210c      	movs	r1, #12
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f000 f8ce 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 		0x00);
 8003d74:	2100      	movs	r1, #0
 8003d76:	2001      	movs	r0, #1
 8003d78:	f000 f8ca 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 	_DS(1, EN_RXADDR_ERX_P0) | _DS(1, EN_RXADDR_ERX_P1));
 8003d7c:	2103      	movs	r1, #3
 8003d7e:	2002      	movs	r0, #2
 8003d80:	f000 f8c6 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 		_DS(3, SETUP_AW_AW));
 8003d84:	2103      	movs	r1, #3
 8003d86:	2003      	movs	r0, #3
 8003d88:	f000 f8c2 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 	_DS(15, SETUP_RETR_ARC) | _DS(4, SETUP_RETR_ARD));
 8003d8c:	214f      	movs	r1, #79	; 0x4f
 8003d8e:	2004      	movs	r0, #4
 8003d90:	f000 f8be 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 		_DS(52, RF_CH_RF_CH));
 8003d94:	2134      	movs	r1, #52	; 0x34
 8003d96:	2005      	movs	r0, #5
 8003d98:	f000 f8ba 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 		_DS(1, RF_SETUP_LNA_HCURR) | _DS(3, RF_SETUP_RF_PWR));
 8003d9c:	2107      	movs	r1, #7
 8003d9e:	2006      	movs	r0, #6
 8003da0:	f000 f8b6 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 		0x00);
 8003da4:	2100      	movs	r1, #0
 8003da6:	2007      	movs	r0, #7
 8003da8:	f000 f8b2 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 	0x00);
 8003dac:	2100      	movs	r1, #0
 8003dae:	2008      	movs	r0, #8
 8003db0:	f000 f8ae 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_CD, 			0x00);
 8003db4:	2100      	movs	r1, #0
 8003db6:	2009      	movs	r0, #9
 8003db8:	f000 f8aa 	bl	8003f10 <NRF24_write_register>

	uint8_t pipeAddrVar[6];
	pipeAddrVar[4] = 0xE7;
 8003dbc:	23e7      	movs	r3, #231	; 0xe7
 8003dbe:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xE7;
 8003dc0:	23e7      	movs	r3, #231	; 0xe7
 8003dc2:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xE7;
 8003dc4:	23e7      	movs	r3, #231	; 0xe7
 8003dc6:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xE7;
 8003dc8:	23e7      	movs	r3, #231	; 0xe7
 8003dca:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xE7;
 8003dcc:	23e7      	movs	r3, #231	; 0xe7
 8003dce:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 8003dd0:	f107 0308 	add.w	r3, r7, #8
 8003dd4:	2205      	movs	r2, #5
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	200a      	movs	r0, #10
 8003dda:	f000 f8bd 	bl	8003f58 <NRF24_write_registerN>

	pipeAddrVar[4] = 0xC2;
 8003dde:	23c2      	movs	r3, #194	; 0xc2
 8003de0:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xC2;
 8003de2:	23c2      	movs	r3, #194	; 0xc2
 8003de4:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xC2;
 8003de6:	23c2      	movs	r3, #194	; 0xc2
 8003de8:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xC2;
 8003dea:	23c2      	movs	r3, #194	; 0xc2
 8003dec:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xC2;
 8003dee:	23c2      	movs	r3, #194	; 0xc2
 8003df0:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 8003df2:	f107 0308 	add.w	r3, r7, #8
 8003df6:	2205      	movs	r2, #5
 8003df8:	4619      	mov	r1, r3
 8003dfa:	200b      	movs	r0, #11
 8003dfc:	f000 f8ac 	bl	8003f58 <NRF24_write_registerN>

	NRF24_write_register(REG_RX_ADDR_P2, 	0xC3);
 8003e00:	21c3      	movs	r1, #195	; 0xc3
 8003e02:	200c      	movs	r0, #12
 8003e04:	f000 f884 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 	0xC4);
 8003e08:	21c4      	movs	r1, #196	; 0xc4
 8003e0a:	200d      	movs	r0, #13
 8003e0c:	f000 f880 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 	0xC5);
 8003e10:	21c5      	movs	r1, #197	; 0xc5
 8003e12:	200e      	movs	r0, #14
 8003e14:	f000 f87c 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 	0xC6);
 8003e18:	21c6      	movs	r1, #198	; 0xc6
 8003e1a:	200f      	movs	r0, #15
 8003e1c:	f000 f878 	bl	8003f10 <NRF24_write_register>

	pipeAddrVar[4] = 0xE7;
 8003e20:	23e7      	movs	r3, #231	; 0xe7
 8003e22:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xE7;
 8003e24:	23e7      	movs	r3, #231	; 0xe7
 8003e26:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xE7;
 8003e28:	23e7      	movs	r3, #231	; 0xe7
 8003e2a:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xE7;
 8003e2c:	23e7      	movs	r3, #231	; 0xe7
 8003e2e:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xE7;
 8003e30:	23e7      	movs	r3, #231	; 0xe7
 8003e32:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 8003e34:	f107 0308 	add.w	r3, r7, #8
 8003e38:	2205      	movs	r2, #5
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	2010      	movs	r0, #16
 8003e3e:	f000 f88b 	bl	8003f58 <NRF24_write_registerN>

	NRF24_write_register(REG_RX_PW_P0, 		0x00);
 8003e42:	2100      	movs	r1, #0
 8003e44:	2011      	movs	r0, #17
 8003e46:	f000 f863 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 		0x00);
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	2012      	movs	r0, #18
 8003e4e:	f000 f85f 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 		0x00);
 8003e52:	2100      	movs	r1, #0
 8003e54:	2013      	movs	r0, #19
 8003e56:	f000 f85b 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 		0x00);
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	2014      	movs	r0, #20
 8003e5e:	f000 f857 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 		0x00);
 8003e62:	2100      	movs	r1, #0
 8003e64:	2015      	movs	r0, #21
 8003e66:	f000 f853 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 		0x00);
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	2016      	movs	r0, #22
 8003e6e:	f000 f84f 	bl	8003f10 <NRF24_write_register>

	NRF24_write_register(REG_DYNPD, 		0x00);
 8003e72:	2100      	movs	r1, #0
 8003e74:	201c      	movs	r0, #28
 8003e76:	f000 f84b 	bl	8003f10 <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 		0x00);
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	201d      	movs	r0, #29
 8003e7e:	f000 f847 	bl	8003f10 <NRF24_write_register>

	NRF24_resetStatus();
 8003e82:	f000 f8bb 	bl	8003ffc <NRF24_resetStatus>

	NRF24_flush_TX();
 8003e86:	f000 f8c1 	bl	800400c <NRF24_flush_TX>
	NRF24_flush_RX();
 8003e8a:	f000 f8c7 	bl	800401c <NRF24_flush_RX>

	NRF24_power(LOW);
 8003e8e:	2000      	movs	r0, #0
 8003e90:	f000 f8cc 	bl	800402c <NRF24_power>
}
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000028 	.word	0x20000028

08003ea0 <NRF24_CSN>:

// CSN Pin operations
static void NRF24_CSN(uint8_t state)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	71fb      	strb	r3, [r7, #7]
	if (state)
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d006      	beq.n	8003ebe <NRF24_CSN+0x1e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eb6:	4807      	ldr	r0, [pc, #28]	; (8003ed4 <NRF24_CSN+0x34>)
 8003eb8:	f7fd fa20 	bl	80012fc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
}
 8003ebc:	e005      	b.n	8003eca <NRF24_CSN+0x2a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ec4:	4803      	ldr	r0, [pc, #12]	; (8003ed4 <NRF24_CSN+0x34>)
 8003ec6:	f7fd fa19 	bl	80012fc <HAL_GPIO_WritePin>
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40020800 	.word	0x40020800

08003ed8 <NRF24_CE>:

// CE Pin operations
static void NRF24_CE(uint8_t state)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	71fb      	strb	r3, [r7, #7]
	if (state)
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d006      	beq.n	8003ef6 <NRF24_CE+0x1e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003eee:	4807      	ldr	r0, [pc, #28]	; (8003f0c <NRF24_CE+0x34>)
 8003ef0:	f7fd fa04 	bl	80012fc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
}
 8003ef4:	e005      	b.n	8003f02 <NRF24_CE+0x2a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003efc:	4803      	ldr	r0, [pc, #12]	; (8003f0c <NRF24_CE+0x34>)
 8003efe:	f7fd f9fd 	bl	80012fc <HAL_GPIO_WritePin>
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40020800 	.word	0x40020800

08003f10 <NRF24_write_register>:

// Write 1B to specific register (W_REGISTER command - 46 page in the datasheet)
static void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	460a      	mov	r2, r1
 8003f1a:	71fb      	strb	r3, [r7, #7]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	71bb      	strb	r3, [r7, #6]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8003f20:	2000      	movs	r0, #0
 8003f22:	f7ff ffbd 	bl	8003ea0 <NRF24_CSN>

	//Transmit register address and data
	SPI_Buf[0] = reg | CMD_W_REGISTER;
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	f043 0320 	orr.w	r3, r3, #32
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	733b      	strb	r3, [r7, #12]
	SPI_Buf[1] = value;
 8003f30:	79bb      	ldrb	r3, [r7, #6]
 8003f32:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(nrf24_hspi, SPI_Buf, 2, 100);
 8003f34:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <NRF24_write_register+0x44>)
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	f107 010c 	add.w	r1, r7, #12
 8003f3c:	2364      	movs	r3, #100	; 0x64
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f7fd ff6e 	bl	8001e20 <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 8003f44:	2001      	movs	r0, #1
 8003f46:	f7ff ffab 	bl	8003ea0 <NRF24_CSN>
}
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000028 	.word	0x20000028

08003f58 <NRF24_write_registerN>:

// Write >1B to specific register (W_REGISTER command - 46 page in the datasheet)
static void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	6039      	str	r1, [r7, #0]
 8003f62:	71fb      	strb	r3, [r7, #7]
 8003f64:	4613      	mov	r3, r2
 8003f66:	71bb      	strb	r3, [r7, #6]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f7ff ff99 	bl	8003ea0 <NRF24_CSN>

	//Transmit register address and data
	SPI_Buf[0] = reg | CMD_W_REGISTER;
 8003f6e:	79fb      	ldrb	r3, [r7, #7]
 8003f70:	f043 0320 	orr.w	r3, r3, #32
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, SPI_Buf, 1, 100);
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <NRF24_write_registerN+0x50>)
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	f107 010c 	add.w	r1, r7, #12
 8003f80:	2364      	movs	r3, #100	; 0x64
 8003f82:	2201      	movs	r2, #1
 8003f84:	f7fd ff4c 	bl	8001e20 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf24_hspi, (uint8_t*)buf, len, 100);
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <NRF24_write_registerN+0x50>)
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	79bb      	ldrb	r3, [r7, #6]
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	2364      	movs	r3, #100	; 0x64
 8003f92:	6839      	ldr	r1, [r7, #0]
 8003f94:	f7fd ff44 	bl	8001e20 <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 8003f98:	2001      	movs	r0, #1
 8003f9a:	f7ff ff81 	bl	8003ea0 <NRF24_CSN>
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000028 	.word	0x20000028

08003fac <NRF24_read_register>:

// Read 1B from specific register (R_REGISTER command - 46 page in the datasheet)
static uint8_t NRF24_read_register(uint8_t reg)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	71fb      	strb	r3, [r7, #7]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	f7ff ff72 	bl	8003ea0 <NRF24_CSN>

	//Transmit register address
	SPI_Buf[0] = reg & 0x1F;
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, SPI_Buf, 1, 100);
 8003fc6:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <NRF24_read_register+0x4c>)
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	f107 010c 	add.w	r1, r7, #12
 8003fce:	2364      	movs	r3, #100	; 0x64
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f7fd ff25 	bl	8001e20 <HAL_SPI_Transmit>

	//Receive data
	HAL_SPI_Receive(nrf24_hspi, &SPI_Buf[1], 1, 100);
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <NRF24_read_register+0x4c>)
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	f107 030c 	add.w	r3, r7, #12
 8003fde:	1c59      	adds	r1, r3, #1
 8003fe0:	2364      	movs	r3, #100	; 0x64
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f7fe f850 	bl	8002088 <HAL_SPI_Receive>

	NRF24_CSN(HIGH);
 8003fe8:	2001      	movs	r0, #1
 8003fea:	f7ff ff59 	bl	8003ea0 <NRF24_CSN>

	return SPI_Buf[1];
 8003fee:	7b7b      	ldrb	r3, [r7, #13]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000028 	.word	0x20000028

08003ffc <NRF24_resetStatus>:

// Reset Status (write 1 to clear - 55 page in the datasheet)
static void NRF24_resetStatus(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS, _DS(1, STATUS_MAX_RT) | _DS(1, STATUS_TX_DS) | _DS(1, STATUS_RX_DR));
 8004000:	2170      	movs	r1, #112	; 0x70
 8004002:	2007      	movs	r0, #7
 8004004:	f7ff ff84 	bl	8003f10 <NRF24_write_register>
}
 8004008:	bf00      	nop
 800400a:	bd80      	pop	{r7, pc}

0800400c <NRF24_flush_TX>:

// Flush TX Buffer (46 page in the datasheet)
static void NRF24_flush_TX(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8004010:	21ff      	movs	r1, #255	; 0xff
 8004012:	20e1      	movs	r0, #225	; 0xe1
 8004014:	f7ff ff7c 	bl	8003f10 <NRF24_write_register>
}
 8004018:	bf00      	nop
 800401a:	bd80      	pop	{r7, pc}

0800401c <NRF24_flush_RX>:

// Flush RX Buffer (46 page in the datasheet)
static void NRF24_flush_RX(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8004020:	21ff      	movs	r1, #255	; 0xff
 8004022:	20e2      	movs	r0, #226	; 0xe2
 8004024:	f7ff ff74 	bl	8003f10 <NRF24_write_register>
}
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}

0800402c <NRF24_power>:

// Power Up (PWR_UP_bit change - 53 page in the datasheet)
static void NRF24_power(uint8_t state)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	71fb      	strb	r3, [r7, #7]
	if(state)
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00b      	beq.n	8004054 <NRF24_power+0x28>
		NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | _DS(1, CONFIG_PWR_UP));
 800403c:	2000      	movs	r0, #0
 800403e:	f7ff ffb5 	bl	8003fac <NRF24_read_register>
 8004042:	4603      	mov	r3, r0
 8004044:	f043 0302 	orr.w	r3, r3, #2
 8004048:	b2db      	uxtb	r3, r3
 800404a:	4619      	mov	r1, r3
 800404c:	2000      	movs	r0, #0
 800404e:	f7ff ff5f 	bl	8003f10 <NRF24_write_register>
	else
		NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) & ~_DS(1, CONFIG_PWR_UP));
}
 8004052:	e00a      	b.n	800406a <NRF24_power+0x3e>
		NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) & ~_DS(1, CONFIG_PWR_UP));
 8004054:	2000      	movs	r0, #0
 8004056:	f7ff ffa9 	bl	8003fac <NRF24_read_register>
 800405a:	4603      	mov	r3, r0
 800405c:	f023 0302 	bic.w	r3, r3, #2
 8004060:	b2db      	uxtb	r3, r3
 8004062:	4619      	mov	r1, r3
 8004064:	2000      	movs	r0, #0
 8004066:	f7ff ff53 	bl	8003f10 <NRF24_write_register>
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <NRF24_openReadingPipe>:
	NRF24_write_register(REG_RX_PW_P0, payload_size);
}

// Open RX Pipe (65 and 66 page in the datasheet)
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	4601      	mov	r1, r0
 800407c:	e9c7 2300 	strd	r2, r3, [r7]
 8004080:	460b      	mov	r3, r1
 8004082:	73fb      	strb	r3, [r7, #15]
	// Data in vectors for better code quality
	const uint8_t NRF24_ADDR_PX[] = {
 8004084:	4a25      	ldr	r2, [pc, #148]	; (800411c <NRF24_openReadingPipe+0xa8>)
 8004086:	f107 0318 	add.w	r3, r7, #24
 800408a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800408e:	6018      	str	r0, [r3, #0]
 8004090:	3304      	adds	r3, #4
 8004092:	8019      	strh	r1, [r3, #0]
			REG_RX_ADDR_P2,
			REG_RX_ADDR_P3,
			REG_RX_ADDR_P4,
			REG_RX_ADDR_P5
	};
	const uint8_t NRF24_RX_PW_PX[] = {
 8004094:	4a22      	ldr	r2, [pc, #136]	; (8004120 <NRF24_openReadingPipe+0xac>)
 8004096:	f107 0310 	add.w	r3, r7, #16
 800409a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800409e:	6018      	str	r0, [r3, #0]
 80040a0:	3304      	adds	r3, #4
 80040a2:	8019      	strh	r1, [r3, #0]
			REG_RX_PW_P3,
			REG_RX_PW_P4,
			REG_RX_PW_P5
	};

	if(number < 2){
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d80b      	bhi.n	80040c2 <NRF24_openReadingPipe+0x4e>
		// Write 5B address to pipe (55 page in the datasheet)
		NRF24_write_registerN(NRF24_ADDR_PX[number], (uint8_t *)(&address), 5);
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	f107 0220 	add.w	r2, r7, #32
 80040b0:	4413      	add	r3, r2
 80040b2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80040b6:	4639      	mov	r1, r7
 80040b8:	2205      	movs	r2, #5
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff ff4c 	bl	8003f58 <NRF24_write_registerN>
 80040c0:	e00a      	b.n	80040d8 <NRF24_openReadingPipe+0x64>
	}
	else{
		// Write LSB, because only this differs from P1 address (55 page in the datasheet)
		NRF24_write_registerN(NRF24_ADDR_PX[number], (uint8_t *)(&address), 1);
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	f107 0220 	add.w	r2, r7, #32
 80040c8:	4413      	add	r3, r2
 80040ca:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80040ce:	4639      	mov	r1, r7
 80040d0:	2201      	movs	r2, #1
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff ff40 	bl	8003f58 <NRF24_write_registerN>
	}

	// Write payload size
	NRF24_write_register(NRF24_RX_PW_PX[number], payload_size);
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	f107 0220 	add.w	r2, r7, #32
 80040de:	4413      	add	r3, r2
 80040e0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80040e4:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <NRF24_openReadingPipe+0xb0>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f7ff ff10 	bl	8003f10 <NRF24_write_register>

	// Enable pipe
	NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _DS(1, number));
 80040f0:	2002      	movs	r0, #2
 80040f2:	f7ff ff5b 	bl	8003fac <NRF24_read_register>
 80040f6:	4603      	mov	r3, r0
 80040f8:	b25a      	sxtb	r2, r3
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	b25b      	sxtb	r3, r3
 8004104:	4313      	orrs	r3, r2
 8004106:	b25b      	sxtb	r3, r3
 8004108:	b2db      	uxtb	r3, r3
 800410a:	4619      	mov	r1, r3
 800410c:	2002      	movs	r0, #2
 800410e:	f7ff feff 	bl	8003f10 <NRF24_write_register>
}
 8004112:	bf00      	nop
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	08004d1c 	.word	0x08004d1c
 8004120:	08004d24 	.word	0x08004d24
 8004124:	20000005 	.word	0x20000005

08004128 <NRF24_read>:
	return (uint8_t)(NRF24_read_register(REG_STATUS) & _DS(1, STATUS_TX_DS));
}

// Read Data - function returns 1 if RX FIFO is empty (described below)
uint8_t NRF24_read(void* buf, uint8_t len)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;

	NRF24_CSN(LOW);
 8004134:	2000      	movs	r0, #0
 8004136:	f7ff feb3 	bl	8003ea0 <NRF24_CSN>

	// Read payload with proper command (46 page in the datasheet)
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 800413a:	2361      	movs	r3, #97	; 0x61
 800413c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(nrf24_hspi, &cmdRxBuf, 1, 100);
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <NRF24_read+0x58>)
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	f107 010f 	add.w	r1, r7, #15
 8004146:	2364      	movs	r3, #100	; 0x64
 8004148:	2201      	movs	r2, #1
 800414a:	f7fd fe69 	bl	8001e20 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf24_hspi, buf, len, 100);
 800414e:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <NRF24_read+0x58>)
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	b29a      	uxth	r2, r3
 8004156:	2364      	movs	r3, #100	; 0x64
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	f7fd ff95 	bl	8002088 <HAL_SPI_Receive>

	NRF24_CSN(HIGH);
 800415e:	2001      	movs	r0, #1
 8004160:	f7ff fe9e 	bl	8003ea0 <NRF24_CSN>

	NRF24_flush_RX();
 8004164:	f7ff ff5a 	bl	800401c <NRF24_flush_RX>

	return (uint8_t)(NRF24_read_register(REG_FIFO_STATUS) & _DS(1, FIFO_STATUS_RX_EMPTY));
 8004168:	2017      	movs	r0, #23
 800416a:	f7ff ff1f 	bl	8003fac <NRF24_read_register>
 800416e:	4603      	mov	r3, r0
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	b2db      	uxtb	r3, r3
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000028 	.word	0x20000028

08004184 <NRF24_startListening>:

// Start Listening On Pipes
void NRF24_startListening(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
	// Power up and set RX mode (65 and 66 page in the datasheet)
	NRF24_power(HIGH);
 8004188:	2001      	movs	r0, #1
 800418a:	f7ff ff4f 	bl	800402c <NRF24_power>
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | _DS(1, CONFIG_PRIM_RX));
 800418e:	2000      	movs	r0, #0
 8004190:	f7ff ff0c 	bl	8003fac <NRF24_read_register>
 8004194:	4603      	mov	r3, r0
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	b2db      	uxtb	r3, r3
 800419c:	4619      	mov	r1, r3
 800419e:	2000      	movs	r0, #0
 80041a0:	f7ff feb6 	bl	8003f10 <NRF24_write_register>

	// Flush buffers
	NRF24_flush_TX();
 80041a4:	f7ff ff32 	bl	800400c <NRF24_flush_TX>
	NRF24_flush_RX();
 80041a8:	f7ff ff38 	bl	800401c <NRF24_flush_RX>

	NRF24_CE(HIGH);
 80041ac:	2001      	movs	r0, #1
 80041ae:	f7ff fe93 	bl	8003ed8 <NRF24_CE>

	// Wait 1 ms for radio to come on (20 page of the datasheet)
	HAL_Delay(1);
 80041b2:	2001      	movs	r0, #1
 80041b4:	f7fc fe08 	bl	8000dc8 <HAL_Delay>
}
 80041b8:	bf00      	nop
 80041ba:	bd80      	pop	{r7, pc}

080041bc <NRF24_available>:

// Check For Available Data To Read
uint8_t NRF24_available(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
	uint8_t result = (NRF24_read_register(REG_STATUS) & _DS(1, STATUS_RX_DR));
 80041c2:	2007      	movs	r0, #7
 80041c4:	f7ff fef2 	bl	8003fac <NRF24_read_register>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	71fb      	strb	r3, [r7, #7]

	if (result){
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <NRF24_available+0x22>
		// Clear the status bit
		NRF24_write_register(REG_STATUS, _DS(1, STATUS_RX_DR));
 80041d6:	2140      	movs	r1, #64	; 0x40
 80041d8:	2007      	movs	r0, #7
 80041da:	f7ff fe99 	bl	8003f10 <NRF24_write_register>
	}
	return result;
 80041de:	79fb      	ldrb	r3, [r7, #7]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	; 0x28
 80041ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ee:	f107 0314 	add.w	r3, r7, #20
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	609a      	str	r2, [r3, #8]
 80041fa:	60da      	str	r2, [r3, #12]
 80041fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	4b37      	ldr	r3, [pc, #220]	; (80042e0 <MX_GPIO_Init+0xf8>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	4a36      	ldr	r2, [pc, #216]	; (80042e0 <MX_GPIO_Init+0xf8>)
 8004208:	f043 0304 	orr.w	r3, r3, #4
 800420c:	6313      	str	r3, [r2, #48]	; 0x30
 800420e:	4b34      	ldr	r3, [pc, #208]	; (80042e0 <MX_GPIO_Init+0xf8>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	4b30      	ldr	r3, [pc, #192]	; (80042e0 <MX_GPIO_Init+0xf8>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	4a2f      	ldr	r2, [pc, #188]	; (80042e0 <MX_GPIO_Init+0xf8>)
 8004224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004228:	6313      	str	r3, [r2, #48]	; 0x30
 800422a:	4b2d      	ldr	r3, [pc, #180]	; (80042e0 <MX_GPIO_Init+0xf8>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <MX_GPIO_Init+0xf8>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	4a28      	ldr	r2, [pc, #160]	; (80042e0 <MX_GPIO_Init+0xf8>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	6313      	str	r3, [r2, #48]	; 0x30
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <MX_GPIO_Init+0xf8>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	607b      	str	r3, [r7, #4]
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <MX_GPIO_Init+0xf8>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	4a21      	ldr	r2, [pc, #132]	; (80042e0 <MX_GPIO_Init+0xf8>)
 800425c:	f043 0302 	orr.w	r3, r3, #2
 8004260:	6313      	str	r3, [r2, #48]	; 0x30
 8004262:	4b1f      	ldr	r3, [pc, #124]	; (80042e0 <MX_GPIO_Init+0xf8>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	607b      	str	r3, [r7, #4]
 800426c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800426e:	2200      	movs	r2, #0
 8004270:	2120      	movs	r1, #32
 8004272:	481c      	ldr	r0, [pc, #112]	; (80042e4 <MX_GPIO_Init+0xfc>)
 8004274:	f7fd f842 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8004278:	2200      	movs	r2, #0
 800427a:	f44f 7158 	mov.w	r1, #864	; 0x360
 800427e:	481a      	ldr	r0, [pc, #104]	; (80042e8 <MX_GPIO_Init+0x100>)
 8004280:	f7fd f83c 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800428a:	4b18      	ldr	r3, [pc, #96]	; (80042ec <MX_GPIO_Init+0x104>)
 800428c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004292:	f107 0314 	add.w	r3, r7, #20
 8004296:	4619      	mov	r1, r3
 8004298:	4813      	ldr	r0, [pc, #76]	; (80042e8 <MX_GPIO_Init+0x100>)
 800429a:	f7fc fe9d 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800429e:	2320      	movs	r3, #32
 80042a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042a2:	2301      	movs	r3, #1
 80042a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042aa:	2300      	movs	r3, #0
 80042ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80042ae:	f107 0314 	add.w	r3, r7, #20
 80042b2:	4619      	mov	r1, r3
 80042b4:	480b      	ldr	r0, [pc, #44]	; (80042e4 <MX_GPIO_Init+0xfc>)
 80042b6:	f7fc fe8f 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|NRF24_CSN_Pin|NRF24_CE_Pin;
 80042ba:	f44f 7358 	mov.w	r3, #864	; 0x360
 80042be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042c0:	2301      	movs	r3, #1
 80042c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c8:	2300      	movs	r3, #0
 80042ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042cc:	f107 0314 	add.w	r3, r7, #20
 80042d0:	4619      	mov	r1, r3
 80042d2:	4805      	ldr	r0, [pc, #20]	; (80042e8 <MX_GPIO_Init+0x100>)
 80042d4:	f7fc fe80 	bl	8000fd8 <HAL_GPIO_Init>

}
 80042d8:	bf00      	nop
 80042da:	3728      	adds	r7, #40	; 0x28
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40020000 	.word	0x40020000
 80042e8:	40020800 	.word	0x40020800
 80042ec:	10210000 	.word	0x10210000

080042f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042f0:	b5b0      	push	{r4, r5, r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042f6:	f7fc fcf5 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042fa:	f000 f9a3 	bl	8004644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042fe:	f7ff ff73 	bl	80041e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004302:	f000 fc37 	bl	8004b74 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8004306:	f000 fa13 	bl	8004730 <MX_SPI2_Init>
  MX_TIM1_Init();
 800430a:	f000 fb2b 	bl	8004964 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_init(&hspi2);
 800430e:	48a4      	ldr	r0, [pc, #656]	; (80045a0 <main+0x2b0>)
 8004310:	f7ff fd1c 	bl	8003d4c <NRF24_init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004314:	2100      	movs	r1, #0
 8004316:	48a3      	ldr	r0, [pc, #652]	; (80045a4 <main+0x2b4>)
 8004318:	f7fe fad2 	bl	80028c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800431c:	2104      	movs	r1, #4
 800431e:	48a1      	ldr	r0, [pc, #644]	; (80045a4 <main+0x2b4>)
 8004320:	f7fe face 	bl	80028c0 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004324:	2200      	movs	r2, #0
 8004326:	2120      	movs	r1, #32
 8004328:	489f      	ldr	r0, [pc, #636]	; (80045a8 <main+0x2b8>)
 800432a:	f7fc ffe7 	bl	80012fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800432e:	2200      	movs	r2, #0
 8004330:	2140      	movs	r1, #64	; 0x40
 8004332:	489d      	ldr	r0, [pc, #628]	; (80045a8 <main+0x2b8>)
 8004334:	f7fc ffe2 	bl	80012fc <HAL_GPIO_WritePin>

  TIM1->CCR1 = 0;
 8004338:	4b9c      	ldr	r3, [pc, #624]	; (80045ac <main+0x2bc>)
 800433a:	2200      	movs	r2, #0
 800433c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 800433e:	4b9b      	ldr	r3, [pc, #620]	; (80045ac <main+0x2bc>)
 8004340:	2200      	movs	r2, #0
 8004342:	639a      	str	r2, [r3, #56]	; 0x38

  NRF24_openReadingPipe(1, rx_pipe_addr);
 8004344:	a494      	add	r4, pc, #592	; (adr r4, 8004598 <main+0x2a8>)
 8004346:	e9d4 3400 	ldrd	r3, r4, [r4]
 800434a:	461a      	mov	r2, r3
 800434c:	4623      	mov	r3, r4
 800434e:	2001      	movs	r0, #1
 8004350:	f7ff fe90 	bl	8004074 <NRF24_openReadingPipe>
  NRF24_startListening();
 8004354:	f7ff ff16 	bl	8004184 <NRF24_startListening>

  uint32_t watchdog = HAL_GetTick();
 8004358:	f7fc fd2a 	bl	8000db0 <HAL_GetTick>
 800435c:	61f8      	str	r0, [r7, #28]
  uint8_t error_msg[] = "Connection Lost\r\n";
 800435e:	4b94      	ldr	r3, [pc, #592]	; (80045b0 <main+0x2c0>)
 8004360:	1d3c      	adds	r4, r7, #4
 8004362:	461d      	mov	r5, r3
 8004364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	8023      	strh	r3, [r4, #0]
  const uint32_t timeout = 1400;
 800436c:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8004370:	61bb      	str	r3, [r7, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(NRF24_available()){
 8004372:	f7ff ff23 	bl	80041bc <NRF24_available>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8144 	beq.w	8004606 <main+0x316>
		  NRF24_read(my_rx_data, PAYLOAD_SIZE);
 800437e:	2102      	movs	r1, #2
 8004380:	488c      	ldr	r0, [pc, #560]	; (80045b4 <main+0x2c4>)
 8004382:	f7ff fed1 	bl	8004128 <NRF24_read>

		  my_rx_data[PAYLOAD_SIZE] = '\r';
 8004386:	4b8b      	ldr	r3, [pc, #556]	; (80045b4 <main+0x2c4>)
 8004388:	220d      	movs	r2, #13
 800438a:	709a      	strb	r2, [r3, #2]
		  my_rx_data[PAYLOAD_SIZE + 1] = '\n';
 800438c:	4b89      	ldr	r3, [pc, #548]	; (80045b4 <main+0x2c4>)
 800438e:	220a      	movs	r2, #10
 8004390:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit(&huart2, my_rx_data, PAYLOAD_SIZE + 2, 100);
 8004392:	2364      	movs	r3, #100	; 0x64
 8004394:	2204      	movs	r2, #4
 8004396:	4987      	ldr	r1, [pc, #540]	; (80045b4 <main+0x2c4>)
 8004398:	4887      	ldr	r0, [pc, #540]	; (80045b8 <main+0x2c8>)
 800439a:	f7ff f878 	bl	800348e <HAL_UART_Transmit>

		  if((my_rx_data[0] >= 40) && (my_rx_data[0] <= 60)){
 800439e:	4b85      	ldr	r3, [pc, #532]	; (80045b4 <main+0x2c4>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b27      	cmp	r3, #39	; 0x27
 80043a4:	d914      	bls.n	80043d0 <main+0xe0>
 80043a6:	4b83      	ldr	r3, [pc, #524]	; (80045b4 <main+0x2c4>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b3c      	cmp	r3, #60	; 0x3c
 80043ac:	d810      	bhi.n	80043d0 <main+0xe0>
		  		// IDLE STATE - STOP
		  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80043ae:	2200      	movs	r2, #0
 80043b0:	2120      	movs	r1, #32
 80043b2:	487d      	ldr	r0, [pc, #500]	; (80045a8 <main+0x2b8>)
 80043b4:	f7fc ffa2 	bl	80012fc <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80043b8:	2200      	movs	r2, #0
 80043ba:	2140      	movs	r1, #64	; 0x40
 80043bc:	487a      	ldr	r0, [pc, #488]	; (80045a8 <main+0x2b8>)
 80043be:	f7fc ff9d 	bl	80012fc <HAL_GPIO_WritePin>
		  		TIM1->CCR1 = 0;
 80043c2:	4b7a      	ldr	r3, [pc, #488]	; (80045ac <main+0x2bc>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	635a      	str	r2, [r3, #52]	; 0x34
		  		TIM1->CCR2 = 0;
 80043c8:	4b78      	ldr	r3, [pc, #480]	; (80045ac <main+0x2bc>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
 80043ce:	e116      	b.n	80045fe <main+0x30e>
		  	}
		  	else if((my_rx_data[0] >= 0) && (my_rx_data[0] < 40)){
 80043d0:	4b78      	ldr	r3, [pc, #480]	; (80045b4 <main+0x2c4>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b27      	cmp	r3, #39	; 0x27
 80043d6:	d87c      	bhi.n	80044d2 <main+0x1e2>
		  		// SAIL BACKWARD
		  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80043d8:	2200      	movs	r2, #0
 80043da:	2120      	movs	r1, #32
 80043dc:	4872      	ldr	r0, [pc, #456]	; (80045a8 <main+0x2b8>)
 80043de:	f7fc ff8d 	bl	80012fc <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80043e2:	2201      	movs	r2, #1
 80043e4:	2140      	movs	r1, #64	; 0x40
 80043e6:	4870      	ldr	r0, [pc, #448]	; (80045a8 <main+0x2b8>)
 80043e8:	f7fc ff88 	bl	80012fc <HAL_GPIO_WritePin>
		  		if((my_rx_data[1] >= 40) && (my_rx_data[1] <= 60)){
 80043ec:	4b71      	ldr	r3, [pc, #452]	; (80045b4 <main+0x2c4>)
 80043ee:	785b      	ldrb	r3, [r3, #1]
 80043f0:	2b27      	cmp	r3, #39	; 0x27
 80043f2:	d90c      	bls.n	800440e <main+0x11e>
 80043f4:	4b6f      	ldr	r3, [pc, #444]	; (80045b4 <main+0x2c4>)
 80043f6:	785b      	ldrb	r3, [r3, #1]
 80043f8:	2b3c      	cmp	r3, #60	; 0x3c
 80043fa:	d808      	bhi.n	800440e <main+0x11e>
		  			// SAIL STRAIGHT
		  			TIM1->CCR1 = my_rx_data[0];
 80043fc:	4b6d      	ldr	r3, [pc, #436]	; (80045b4 <main+0x2c4>)
 80043fe:	781a      	ldrb	r2, [r3, #0]
 8004400:	4b6a      	ldr	r3, [pc, #424]	; (80045ac <main+0x2bc>)
 8004402:	635a      	str	r2, [r3, #52]	; 0x34
		  			TIM1->CCR2 = my_rx_data[0];
 8004404:	4b6b      	ldr	r3, [pc, #428]	; (80045b4 <main+0x2c4>)
 8004406:	781a      	ldrb	r2, [r3, #0]
 8004408:	4b68      	ldr	r3, [pc, #416]	; (80045ac <main+0x2bc>)
 800440a:	639a      	str	r2, [r3, #56]	; 0x38
 800440c:	e0f7      	b.n	80045fe <main+0x30e>
		  		}
		  		else if((my_rx_data[1] >= 0) && (my_rx_data[1] < 20)){
 800440e:	4b69      	ldr	r3, [pc, #420]	; (80045b4 <main+0x2c4>)
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	2b13      	cmp	r3, #19
 8004414:	d807      	bhi.n	8004426 <main+0x136>
		  			// SAIL FULL LEFT
		  			TIM1->CCR1 = my_rx_data[0];
 8004416:	4b67      	ldr	r3, [pc, #412]	; (80045b4 <main+0x2c4>)
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	4b64      	ldr	r3, [pc, #400]	; (80045ac <main+0x2bc>)
 800441c:	635a      	str	r2, [r3, #52]	; 0x34
		  			TIM1->CCR2 = 0;
 800441e:	4b63      	ldr	r3, [pc, #396]	; (80045ac <main+0x2bc>)
 8004420:	2200      	movs	r2, #0
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
 8004424:	e0eb      	b.n	80045fe <main+0x30e>
		  		}
		  		else if((my_rx_data[1] >= 20) && (my_rx_data[1] < 40)){
 8004426:	4b63      	ldr	r3, [pc, #396]	; (80045b4 <main+0x2c4>)
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b13      	cmp	r3, #19
 800442c:	d91d      	bls.n	800446a <main+0x17a>
 800442e:	4b61      	ldr	r3, [pc, #388]	; (80045b4 <main+0x2c4>)
 8004430:	785b      	ldrb	r3, [r3, #1]
 8004432:	2b27      	cmp	r3, #39	; 0x27
 8004434:	d819      	bhi.n	800446a <main+0x17a>
		  			// SAIL HALF LEFT
		  			TIM1->CCR1 = my_rx_data[0];
 8004436:	4b5f      	ldr	r3, [pc, #380]	; (80045b4 <main+0x2c4>)
 8004438:	781a      	ldrb	r2, [r3, #0]
 800443a:	4b5c      	ldr	r3, [pc, #368]	; (80045ac <main+0x2bc>)
 800443c:	635a      	str	r2, [r3, #52]	; 0x34
		  			TIM1->CCR2 = (uint8_t)(my_rx_data[0] / 2.0);
 800443e:	4b5d      	ldr	r3, [pc, #372]	; (80045b4 <main+0x2c4>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fc f832 	bl	80004ac <__aeabi_i2d>
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004450:	f7fc f9c0 	bl	80007d4 <__aeabi_ddiv>
 8004454:	4603      	mov	r3, r0
 8004456:	460c      	mov	r4, r1
 8004458:	4618      	mov	r0, r3
 800445a:	4621      	mov	r1, r4
 800445c:	f7fc faa2 	bl	80009a4 <__aeabi_d2uiz>
 8004460:	4603      	mov	r3, r0
 8004462:	b2da      	uxtb	r2, r3
 8004464:	4b51      	ldr	r3, [pc, #324]	; (80045ac <main+0x2bc>)
 8004466:	639a      	str	r2, [r3, #56]	; 0x38
 8004468:	e0c9      	b.n	80045fe <main+0x30e>
		  		}
		  		else if((my_rx_data[1] > 80) && (my_rx_data[1] <= 100)){
 800446a:	4b52      	ldr	r3, [pc, #328]	; (80045b4 <main+0x2c4>)
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	2b50      	cmp	r3, #80	; 0x50
 8004470:	d90b      	bls.n	800448a <main+0x19a>
 8004472:	4b50      	ldr	r3, [pc, #320]	; (80045b4 <main+0x2c4>)
 8004474:	785b      	ldrb	r3, [r3, #1]
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d807      	bhi.n	800448a <main+0x19a>
		  			// SAIL FULL RIGHT
		  			TIM1->CCR1 = 0;
 800447a:	4b4c      	ldr	r3, [pc, #304]	; (80045ac <main+0x2bc>)
 800447c:	2200      	movs	r2, #0
 800447e:	635a      	str	r2, [r3, #52]	; 0x34
		  			TIM1->CCR2 = my_rx_data[0];
 8004480:	4b4c      	ldr	r3, [pc, #304]	; (80045b4 <main+0x2c4>)
 8004482:	781a      	ldrb	r2, [r3, #0]
 8004484:	4b49      	ldr	r3, [pc, #292]	; (80045ac <main+0x2bc>)
 8004486:	639a      	str	r2, [r3, #56]	; 0x38
 8004488:	e0b9      	b.n	80045fe <main+0x30e>
		  		}
		  		else if((my_rx_data[1] > 80) && (my_rx_data[1] <= 100)){
 800448a:	4b4a      	ldr	r3, [pc, #296]	; (80045b4 <main+0x2c4>)
 800448c:	785b      	ldrb	r3, [r3, #1]
 800448e:	2b50      	cmp	r3, #80	; 0x50
 8004490:	f240 80b5 	bls.w	80045fe <main+0x30e>
 8004494:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <main+0x2c4>)
 8004496:	785b      	ldrb	r3, [r3, #1]
 8004498:	2b64      	cmp	r3, #100	; 0x64
 800449a:	f200 80b0 	bhi.w	80045fe <main+0x30e>
		  			// SAIL HALF RIGHT
		  			TIM1->CCR1 = (uint8_t)(my_rx_data[0] / 2.0);
 800449e:	4b45      	ldr	r3, [pc, #276]	; (80045b4 <main+0x2c4>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fc f802 	bl	80004ac <__aeabi_i2d>
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044b0:	f7fc f990 	bl	80007d4 <__aeabi_ddiv>
 80044b4:	4603      	mov	r3, r0
 80044b6:	460c      	mov	r4, r1
 80044b8:	4618      	mov	r0, r3
 80044ba:	4621      	mov	r1, r4
 80044bc:	f7fc fa72 	bl	80009a4 <__aeabi_d2uiz>
 80044c0:	4603      	mov	r3, r0
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	4b39      	ldr	r3, [pc, #228]	; (80045ac <main+0x2bc>)
 80044c6:	635a      	str	r2, [r3, #52]	; 0x34
		  			TIM1->CCR2 = my_rx_data[0];
 80044c8:	4b3a      	ldr	r3, [pc, #232]	; (80045b4 <main+0x2c4>)
 80044ca:	781a      	ldrb	r2, [r3, #0]
 80044cc:	4b37      	ldr	r3, [pc, #220]	; (80045ac <main+0x2bc>)
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38
 80044d0:	e095      	b.n	80045fe <main+0x30e>
		  		}
		  	}
		  	else if((my_rx_data[0] > 60) && (my_rx_data[0] <= 100)){
 80044d2:	4b38      	ldr	r3, [pc, #224]	; (80045b4 <main+0x2c4>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b3c      	cmp	r3, #60	; 0x3c
 80044d8:	f240 8091 	bls.w	80045fe <main+0x30e>
 80044dc:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <main+0x2c4>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b64      	cmp	r3, #100	; 0x64
 80044e2:	f200 808c 	bhi.w	80045fe <main+0x30e>
		  		// SAIL FORWARD
		  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80044e6:	2201      	movs	r2, #1
 80044e8:	2120      	movs	r1, #32
 80044ea:	482f      	ldr	r0, [pc, #188]	; (80045a8 <main+0x2b8>)
 80044ec:	f7fc ff06 	bl	80012fc <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80044f0:	2200      	movs	r2, #0
 80044f2:	2140      	movs	r1, #64	; 0x40
 80044f4:	482c      	ldr	r0, [pc, #176]	; (80045a8 <main+0x2b8>)
 80044f6:	f7fc ff01 	bl	80012fc <HAL_GPIO_WritePin>
		  		if((my_rx_data[1] >= 40) && (my_rx_data[1] <= 60)){
 80044fa:	4b2e      	ldr	r3, [pc, #184]	; (80045b4 <main+0x2c4>)
 80044fc:	785b      	ldrb	r3, [r3, #1]
 80044fe:	2b27      	cmp	r3, #39	; 0x27
 8004500:	d90c      	bls.n	800451c <main+0x22c>
 8004502:	4b2c      	ldr	r3, [pc, #176]	; (80045b4 <main+0x2c4>)
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	2b3c      	cmp	r3, #60	; 0x3c
 8004508:	d808      	bhi.n	800451c <main+0x22c>
		  			// SAIL STRAIGHT
		  			TIM1->CCR1 = my_rx_data[0];
 800450a:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <main+0x2c4>)
 800450c:	781a      	ldrb	r2, [r3, #0]
 800450e:	4b27      	ldr	r3, [pc, #156]	; (80045ac <main+0x2bc>)
 8004510:	635a      	str	r2, [r3, #52]	; 0x34
		  			TIM1->CCR2 = my_rx_data[0];
 8004512:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <main+0x2c4>)
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	4b25      	ldr	r3, [pc, #148]	; (80045ac <main+0x2bc>)
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
 800451a:	e070      	b.n	80045fe <main+0x30e>
		  		}
		  		else if((my_rx_data[1] >= 0) && (my_rx_data[1] < 20)){
 800451c:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <main+0x2c4>)
 800451e:	785b      	ldrb	r3, [r3, #1]
 8004520:	2b13      	cmp	r3, #19
 8004522:	d807      	bhi.n	8004534 <main+0x244>
		  			// SAIL FULL LEFT
		  			TIM1->CCR1 = 0;
 8004524:	4b21      	ldr	r3, [pc, #132]	; (80045ac <main+0x2bc>)
 8004526:	2200      	movs	r2, #0
 8004528:	635a      	str	r2, [r3, #52]	; 0x34
		  			TIM1->CCR2 = my_rx_data[0];
 800452a:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <main+0x2c4>)
 800452c:	781a      	ldrb	r2, [r3, #0]
 800452e:	4b1f      	ldr	r3, [pc, #124]	; (80045ac <main+0x2bc>)
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
 8004532:	e064      	b.n	80045fe <main+0x30e>
		  		}
		  		else if((my_rx_data[1] >= 20) && (my_rx_data[1] < 40)){
 8004534:	4b1f      	ldr	r3, [pc, #124]	; (80045b4 <main+0x2c4>)
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	2b13      	cmp	r3, #19
 800453a:	d91d      	bls.n	8004578 <main+0x288>
 800453c:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <main+0x2c4>)
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	2b27      	cmp	r3, #39	; 0x27
 8004542:	d819      	bhi.n	8004578 <main+0x288>
		  			// SAIL HALF LEFT
		  			TIM1->CCR1 = (uint8_t)(my_rx_data[0] / 2.0);
 8004544:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <main+0x2c4>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f7fb ffaf 	bl	80004ac <__aeabi_i2d>
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004556:	f7fc f93d 	bl	80007d4 <__aeabi_ddiv>
 800455a:	4603      	mov	r3, r0
 800455c:	460c      	mov	r4, r1
 800455e:	4618      	mov	r0, r3
 8004560:	4621      	mov	r1, r4
 8004562:	f7fc fa1f 	bl	80009a4 <__aeabi_d2uiz>
 8004566:	4603      	mov	r3, r0
 8004568:	b2da      	uxtb	r2, r3
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <main+0x2bc>)
 800456c:	635a      	str	r2, [r3, #52]	; 0x34
		  			TIM1->CCR2 = my_rx_data[0];
 800456e:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <main+0x2c4>)
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	4b0e      	ldr	r3, [pc, #56]	; (80045ac <main+0x2bc>)
 8004574:	639a      	str	r2, [r3, #56]	; 0x38
 8004576:	e042      	b.n	80045fe <main+0x30e>
		  		}
		  		else if((my_rx_data[1] > 80) && (my_rx_data[1] <= 100)){
 8004578:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <main+0x2c4>)
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b50      	cmp	r3, #80	; 0x50
 800457e:	d91d      	bls.n	80045bc <main+0x2cc>
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <main+0x2c4>)
 8004582:	785b      	ldrb	r3, [r3, #1]
 8004584:	2b64      	cmp	r3, #100	; 0x64
 8004586:	d819      	bhi.n	80045bc <main+0x2cc>
		  			// SAIL FULL RIGHT
		  			TIM1->CCR1 = my_rx_data[0];
 8004588:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <main+0x2c4>)
 800458a:	781a      	ldrb	r2, [r3, #0]
 800458c:	4b07      	ldr	r3, [pc, #28]	; (80045ac <main+0x2bc>)
 800458e:	635a      	str	r2, [r3, #52]	; 0x34
		  			TIM1->CCR2 = 0;
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <main+0x2bc>)
 8004592:	2200      	movs	r2, #0
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
 8004596:	e032      	b.n	80045fe <main+0x30e>
 8004598:	223344aa 	.word	0x223344aa
 800459c:	00000011 	.word	0x00000011
 80045a0:	20000054 	.word	0x20000054
 80045a4:	200000ac 	.word	0x200000ac
 80045a8:	40020800 	.word	0x40020800
 80045ac:	40010000 	.word	0x40010000
 80045b0:	08004d2c 	.word	0x08004d2c
 80045b4:	2000002c 	.word	0x2000002c
 80045b8:	200000ec 	.word	0x200000ec
		  		}
		  		else if((my_rx_data[1] > 80) && (my_rx_data[1] <= 100)){
 80045bc:	4b1e      	ldr	r3, [pc, #120]	; (8004638 <main+0x348>)
 80045be:	785b      	ldrb	r3, [r3, #1]
 80045c0:	2b50      	cmp	r3, #80	; 0x50
 80045c2:	d91c      	bls.n	80045fe <main+0x30e>
 80045c4:	4b1c      	ldr	r3, [pc, #112]	; (8004638 <main+0x348>)
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	2b64      	cmp	r3, #100	; 0x64
 80045ca:	d818      	bhi.n	80045fe <main+0x30e>
		  			// SAIL HALF RIGHT
		  			TIM1->CCR1 = my_rx_data[0];
 80045cc:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <main+0x348>)
 80045ce:	781a      	ldrb	r2, [r3, #0]
 80045d0:	4b1a      	ldr	r3, [pc, #104]	; (800463c <main+0x34c>)
 80045d2:	635a      	str	r2, [r3, #52]	; 0x34
		  			TIM1->CCR2 = (uint8_t)(my_rx_data[0] / 2.0);
 80045d4:	4b18      	ldr	r3, [pc, #96]	; (8004638 <main+0x348>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fb ff67 	bl	80004ac <__aeabi_i2d>
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045e6:	f7fc f8f5 	bl	80007d4 <__aeabi_ddiv>
 80045ea:	4603      	mov	r3, r0
 80045ec:	460c      	mov	r4, r1
 80045ee:	4618      	mov	r0, r3
 80045f0:	4621      	mov	r1, r4
 80045f2:	f7fc f9d7 	bl	80009a4 <__aeabi_d2uiz>
 80045f6:	4603      	mov	r3, r0
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <main+0x34c>)
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
		  		}
		  	}

		  watchdog = HAL_GetTick();
 80045fe:	f7fc fbd7 	bl	8000db0 <HAL_GetTick>
 8004602:	61f8      	str	r0, [r7, #28]
 8004604:	e6b5      	b.n	8004372 <main+0x82>
	  }
	  else if((HAL_GetTick() - watchdog) > timeout ){
 8004606:	f7fc fbd3 	bl	8000db0 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	429a      	cmp	r2, r3
 8004614:	f4bf aead 	bcs.w	8004372 <main+0x82>
		  my_rx_data[0] = IDLE_STATE;
 8004618:	4b07      	ldr	r3, [pc, #28]	; (8004638 <main+0x348>)
 800461a:	2232      	movs	r2, #50	; 0x32
 800461c:	701a      	strb	r2, [r3, #0]
		  my_rx_data[1] = IDLE_STATE;
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <main+0x348>)
 8004620:	2232      	movs	r2, #50	; 0x32
 8004622:	705a      	strb	r2, [r3, #1]
		  HAL_UART_Transmit(&huart2, error_msg, sizeof(error_msg), 100);
 8004624:	1d39      	adds	r1, r7, #4
 8004626:	2364      	movs	r3, #100	; 0x64
 8004628:	2212      	movs	r2, #18
 800462a:	4805      	ldr	r0, [pc, #20]	; (8004640 <main+0x350>)
 800462c:	f7fe ff2f 	bl	800348e <HAL_UART_Transmit>

		  HAL_Delay(100);
 8004630:	2064      	movs	r0, #100	; 0x64
 8004632:	f7fc fbc9 	bl	8000dc8 <HAL_Delay>
	  if(NRF24_available()){
 8004636:	e69c      	b.n	8004372 <main+0x82>
 8004638:	2000002c 	.word	0x2000002c
 800463c:	40010000 	.word	0x40010000
 8004640:	200000ec 	.word	0x200000ec

08004644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b094      	sub	sp, #80	; 0x50
 8004648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800464a:	f107 031c 	add.w	r3, r7, #28
 800464e:	2234      	movs	r2, #52	; 0x34
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fb4e 	bl	8004cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004658:	f107 0308 	add.w	r3, r7, #8
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	605a      	str	r2, [r3, #4]
 8004662:	609a      	str	r2, [r3, #8]
 8004664:	60da      	str	r2, [r3, #12]
 8004666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004668:	2300      	movs	r3, #0
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	4b2a      	ldr	r3, [pc, #168]	; (8004718 <SystemClock_Config+0xd4>)
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	4a29      	ldr	r2, [pc, #164]	; (8004718 <SystemClock_Config+0xd4>)
 8004672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004676:	6413      	str	r3, [r2, #64]	; 0x40
 8004678:	4b27      	ldr	r3, [pc, #156]	; (8004718 <SystemClock_Config+0xd4>)
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004684:	2300      	movs	r3, #0
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	4b24      	ldr	r3, [pc, #144]	; (800471c <SystemClock_Config+0xd8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004690:	4a22      	ldr	r2, [pc, #136]	; (800471c <SystemClock_Config+0xd8>)
 8004692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	4b20      	ldr	r3, [pc, #128]	; (800471c <SystemClock_Config+0xd8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80046a4:	2302      	movs	r3, #2
 80046a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80046a8:	2301      	movs	r3, #1
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80046ac:	2310      	movs	r3, #16
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046b0:	2302      	movs	r3, #2
 80046b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80046b4:	2300      	movs	r3, #0
 80046b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80046b8:	2310      	movs	r3, #16
 80046ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80046bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80046c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80046c2:	2304      	movs	r3, #4
 80046c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80046c6:	2302      	movs	r3, #2
 80046c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80046ca:	2302      	movs	r3, #2
 80046cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046ce:	f107 031c 	add.w	r3, r7, #28
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd f8e6 	bl	80018a4 <HAL_RCC_OscConfig>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80046de:	f000 f81f 	bl	8004720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046e2:	230f      	movs	r3, #15
 80046e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046e6:	2302      	movs	r3, #2
 80046e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80046ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80046f8:	f107 0308 	add.w	r3, r7, #8
 80046fc:	2102      	movs	r1, #2
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fc fe16 	bl	8001330 <HAL_RCC_ClockConfig>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800470a:	f000 f809 	bl	8004720 <Error_Handler>
  }
}
 800470e:	bf00      	nop
 8004710:	3750      	adds	r7, #80	; 0x50
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800
 800471c:	40007000 	.word	0x40007000

08004720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004724:	bf00      	nop
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8004734:	4b17      	ldr	r3, [pc, #92]	; (8004794 <MX_SPI2_Init+0x64>)
 8004736:	4a18      	ldr	r2, [pc, #96]	; (8004798 <MX_SPI2_Init+0x68>)
 8004738:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800473a:	4b16      	ldr	r3, [pc, #88]	; (8004794 <MX_SPI2_Init+0x64>)
 800473c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004740:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004742:	4b14      	ldr	r3, [pc, #80]	; (8004794 <MX_SPI2_Init+0x64>)
 8004744:	2200      	movs	r2, #0
 8004746:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004748:	4b12      	ldr	r3, [pc, #72]	; (8004794 <MX_SPI2_Init+0x64>)
 800474a:	2200      	movs	r2, #0
 800474c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <MX_SPI2_Init+0x64>)
 8004750:	2200      	movs	r2, #0
 8004752:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <MX_SPI2_Init+0x64>)
 8004756:	2200      	movs	r2, #0
 8004758:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800475a:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <MX_SPI2_Init+0x64>)
 800475c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004760:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <MX_SPI2_Init+0x64>)
 8004764:	2220      	movs	r2, #32
 8004766:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <MX_SPI2_Init+0x64>)
 800476a:	2200      	movs	r2, #0
 800476c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <MX_SPI2_Init+0x64>)
 8004770:	2200      	movs	r2, #0
 8004772:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004774:	4b07      	ldr	r3, [pc, #28]	; (8004794 <MX_SPI2_Init+0x64>)
 8004776:	2200      	movs	r2, #0
 8004778:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <MX_SPI2_Init+0x64>)
 800477c:	220a      	movs	r2, #10
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004780:	4804      	ldr	r0, [pc, #16]	; (8004794 <MX_SPI2_Init+0x64>)
 8004782:	f7fd fae9 	bl	8001d58 <HAL_SPI_Init>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800478c:	f7ff ffc8 	bl	8004720 <Error_Handler>
  }

}
 8004790:	bf00      	nop
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000054 	.word	0x20000054
 8004798:	40003800 	.word	0x40003800

0800479c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	; 0x28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a4:	f107 0314 	add.w	r3, r7, #20
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	605a      	str	r2, [r3, #4]
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	60da      	str	r2, [r3, #12]
 80047b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a30      	ldr	r2, [pc, #192]	; (800487c <HAL_SPI_MspInit+0xe0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d15a      	bne.n	8004874 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <HAL_SPI_MspInit+0xe4>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	4a2e      	ldr	r2, [pc, #184]	; (8004880 <HAL_SPI_MspInit+0xe4>)
 80047c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047cc:	6413      	str	r3, [r2, #64]	; 0x40
 80047ce:	4b2c      	ldr	r3, [pc, #176]	; (8004880 <HAL_SPI_MspInit+0xe4>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	4b28      	ldr	r3, [pc, #160]	; (8004880 <HAL_SPI_MspInit+0xe4>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	4a27      	ldr	r2, [pc, #156]	; (8004880 <HAL_SPI_MspInit+0xe4>)
 80047e4:	f043 0304 	orr.w	r3, r3, #4
 80047e8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ea:	4b25      	ldr	r3, [pc, #148]	; (8004880 <HAL_SPI_MspInit+0xe4>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	4b21      	ldr	r3, [pc, #132]	; (8004880 <HAL_SPI_MspInit+0xe4>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	4a20      	ldr	r2, [pc, #128]	; (8004880 <HAL_SPI_MspInit+0xe4>)
 8004800:	f043 0302 	orr.w	r3, r3, #2
 8004804:	6313      	str	r3, [r2, #48]	; 0x30
 8004806:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <HAL_SPI_MspInit+0xe4>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004812:	2302      	movs	r3, #2
 8004814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004816:	2302      	movs	r3, #2
 8004818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800481e:	2303      	movs	r3, #3
 8004820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8004822:	2307      	movs	r3, #7
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004826:	f107 0314 	add.w	r3, r7, #20
 800482a:	4619      	mov	r1, r3
 800482c:	4815      	ldr	r0, [pc, #84]	; (8004884 <HAL_SPI_MspInit+0xe8>)
 800482e:	f7fc fbd3 	bl	8000fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004832:	2304      	movs	r3, #4
 8004834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004836:	2302      	movs	r3, #2
 8004838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800483e:	2303      	movs	r3, #3
 8004840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004842:	2305      	movs	r3, #5
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004846:	f107 0314 	add.w	r3, r7, #20
 800484a:	4619      	mov	r1, r3
 800484c:	480d      	ldr	r0, [pc, #52]	; (8004884 <HAL_SPI_MspInit+0xe8>)
 800484e:	f7fc fbc3 	bl	8000fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004858:	2302      	movs	r3, #2
 800485a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485c:	2300      	movs	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004860:	2303      	movs	r3, #3
 8004862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004864:	2305      	movs	r3, #5
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004868:	f107 0314 	add.w	r3, r7, #20
 800486c:	4619      	mov	r1, r3
 800486e:	4806      	ldr	r0, [pc, #24]	; (8004888 <HAL_SPI_MspInit+0xec>)
 8004870:	f7fc fbb2 	bl	8000fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004874:	bf00      	nop
 8004876:	3728      	adds	r7, #40	; 0x28
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40003800 	.word	0x40003800
 8004880:	40023800 	.word	0x40023800
 8004884:	40020800 	.word	0x40020800
 8004888:	40020400 	.word	0x40020400

0800488c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	607b      	str	r3, [r7, #4]
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <HAL_MspInit+0x4c>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	4a0f      	ldr	r2, [pc, #60]	; (80048d8 <HAL_MspInit+0x4c>)
 800489c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a0:	6453      	str	r3, [r2, #68]	; 0x44
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <HAL_MspInit+0x4c>)
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_MspInit+0x4c>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	4a08      	ldr	r2, [pc, #32]	; (80048d8 <HAL_MspInit+0x4c>)
 80048b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048bc:	6413      	str	r3, [r2, #64]	; 0x40
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_MspInit+0x4c>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80048ca:	2007      	movs	r0, #7
 80048cc:	f7fc fb50 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40023800 	.word	0x40023800

080048dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ea:	b480      	push	{r7}
 80048ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048ee:	e7fe      	b.n	80048ee <HardFault_Handler+0x4>

080048f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048f4:	e7fe      	b.n	80048f4 <MemManage_Handler+0x4>

080048f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048f6:	b480      	push	{r7}
 80048f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048fa:	e7fe      	b.n	80048fa <BusFault_Handler+0x4>

080048fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004900:	e7fe      	b.n	8004900 <UsageFault_Handler+0x4>

08004902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004902:	b480      	push	{r7}
 8004904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004906:	bf00      	nop
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800491e:	b480      	push	{r7}
 8004920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004930:	f7fc fa2a 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004934:	bf00      	nop
 8004936:	bd80      	pop	{r7, pc}

08004938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800493c:	4b08      	ldr	r3, [pc, #32]	; (8004960 <SystemInit+0x28>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	4a07      	ldr	r2, [pc, #28]	; (8004960 <SystemInit+0x28>)
 8004944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <SystemInit+0x28>)
 800494e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004952:	609a      	str	r2, [r3, #8]
#endif
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	e000ed00 	.word	0xe000ed00

08004964 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b096      	sub	sp, #88	; 0x58
 8004968:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800496a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	605a      	str	r2, [r3, #4]
 8004974:	609a      	str	r2, [r3, #8]
 8004976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004978:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	605a      	str	r2, [r3, #4]
 800498c:	609a      	str	r2, [r3, #8]
 800498e:	60da      	str	r2, [r3, #12]
 8004990:	611a      	str	r2, [r3, #16]
 8004992:	615a      	str	r2, [r3, #20]
 8004994:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004996:	1d3b      	adds	r3, r7, #4
 8004998:	2220      	movs	r2, #32
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f000 f9a9 	bl	8004cf4 <memset>

  htim1.Instance = TIM1;
 80049a2:	4b44      	ldr	r3, [pc, #272]	; (8004ab4 <MX_TIM1_Init+0x150>)
 80049a4:	4a44      	ldr	r2, [pc, #272]	; (8004ab8 <MX_TIM1_Init+0x154>)
 80049a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 839;
 80049a8:	4b42      	ldr	r3, [pc, #264]	; (8004ab4 <MX_TIM1_Init+0x150>)
 80049aa:	f240 3247 	movw	r2, #839	; 0x347
 80049ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b0:	4b40      	ldr	r3, [pc, #256]	; (8004ab4 <MX_TIM1_Init+0x150>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80049b6:	4b3f      	ldr	r3, [pc, #252]	; (8004ab4 <MX_TIM1_Init+0x150>)
 80049b8:	2263      	movs	r2, #99	; 0x63
 80049ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049bc:	4b3d      	ldr	r3, [pc, #244]	; (8004ab4 <MX_TIM1_Init+0x150>)
 80049be:	2200      	movs	r2, #0
 80049c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80049c2:	4b3c      	ldr	r3, [pc, #240]	; (8004ab4 <MX_TIM1_Init+0x150>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049c8:	4b3a      	ldr	r3, [pc, #232]	; (8004ab4 <MX_TIM1_Init+0x150>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80049ce:	4839      	ldr	r0, [pc, #228]	; (8004ab4 <MX_TIM1_Init+0x150>)
 80049d0:	f7fd ff16 	bl	8002800 <HAL_TIM_Base_Init>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80049da:	f7ff fea1 	bl	8004720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80049e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049e8:	4619      	mov	r1, r3
 80049ea:	4832      	ldr	r0, [pc, #200]	; (8004ab4 <MX_TIM1_Init+0x150>)
 80049ec:	f7fe f86c 	bl	8002ac8 <HAL_TIM_ConfigClockSource>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80049f6:	f7ff fe93 	bl	8004720 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80049fa:	482e      	ldr	r0, [pc, #184]	; (8004ab4 <MX_TIM1_Init+0x150>)
 80049fc:	f7fd ff2b 	bl	8002856 <HAL_TIM_PWM_Init>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004a06:	f7ff fe8b 	bl	8004720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a16:	4619      	mov	r1, r3
 8004a18:	4826      	ldr	r0, [pc, #152]	; (8004ab4 <MX_TIM1_Init+0x150>)
 8004a1a:	f7fe fc1d 	bl	8003258 <HAL_TIMEx_MasterConfigSynchronization>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004a24:	f7ff fe7c 	bl	8004720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a28:	2360      	movs	r3, #96	; 0x60
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a30:	2300      	movs	r3, #0
 8004a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a34:	2300      	movs	r3, #0
 8004a36:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a40:	2300      	movs	r3, #0
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4819      	ldr	r0, [pc, #100]	; (8004ab4 <MX_TIM1_Init+0x150>)
 8004a4e:	f7fd ff75 	bl	800293c <HAL_TIM_PWM_ConfigChannel>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004a58:	f7ff fe62 	bl	8004720 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a60:	2204      	movs	r2, #4
 8004a62:	4619      	mov	r1, r3
 8004a64:	4813      	ldr	r0, [pc, #76]	; (8004ab4 <MX_TIM1_Init+0x150>)
 8004a66:	f7fd ff69 	bl	800293c <HAL_TIM_PWM_ConfigChannel>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004a70:	f7ff fe56 	bl	8004720 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004a92:	1d3b      	adds	r3, r7, #4
 8004a94:	4619      	mov	r1, r3
 8004a96:	4807      	ldr	r0, [pc, #28]	; (8004ab4 <MX_TIM1_Init+0x150>)
 8004a98:	f7fe fc5a 	bl	8003350 <HAL_TIMEx_ConfigBreakDeadTime>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8004aa2:	f7ff fe3d 	bl	8004720 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8004aa6:	4803      	ldr	r0, [pc, #12]	; (8004ab4 <MX_TIM1_Init+0x150>)
 8004aa8:	f000 f82a 	bl	8004b00 <HAL_TIM_MspPostInit>

}
 8004aac:	bf00      	nop
 8004aae:	3758      	adds	r7, #88	; 0x58
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	200000ac 	.word	0x200000ac
 8004ab8:	40010000 	.word	0x40010000

08004abc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a0b      	ldr	r2, [pc, #44]	; (8004af8 <HAL_TIM_Base_MspInit+0x3c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d10d      	bne.n	8004aea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <HAL_TIM_Base_MspInit+0x40>)
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	4a09      	ldr	r2, [pc, #36]	; (8004afc <HAL_TIM_Base_MspInit+0x40>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ade:	4b07      	ldr	r3, [pc, #28]	; (8004afc <HAL_TIM_Base_MspInit+0x40>)
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40010000 	.word	0x40010000
 8004afc:	40023800 	.word	0x40023800

08004b00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b08:	f107 030c 	add.w	r3, r7, #12
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	605a      	str	r2, [r3, #4]
 8004b12:	609a      	str	r2, [r3, #8]
 8004b14:	60da      	str	r2, [r3, #12]
 8004b16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a12      	ldr	r2, [pc, #72]	; (8004b68 <HAL_TIM_MspPostInit+0x68>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d11e      	bne.n	8004b60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <HAL_TIM_MspPostInit+0x6c>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4a10      	ldr	r2, [pc, #64]	; (8004b6c <HAL_TIM_MspPostInit+0x6c>)
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	6313      	str	r3, [r2, #48]	; 0x30
 8004b32:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <HAL_TIM_MspPostInit+0x6c>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b44:	2302      	movs	r3, #2
 8004b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004b50:	2301      	movs	r3, #1
 8004b52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b54:	f107 030c 	add.w	r3, r7, #12
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4805      	ldr	r0, [pc, #20]	; (8004b70 <HAL_TIM_MspPostInit+0x70>)
 8004b5c:	f7fc fa3c 	bl	8000fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004b60:	bf00      	nop
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40020000 	.word	0x40020000

08004b74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004b78:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <MX_USART2_UART_Init+0x4c>)
 8004b7a:	4a12      	ldr	r2, [pc, #72]	; (8004bc4 <MX_USART2_UART_Init+0x50>)
 8004b7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004b7e:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <MX_USART2_UART_Init+0x4c>)
 8004b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004b86:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <MX_USART2_UART_Init+0x4c>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <MX_USART2_UART_Init+0x4c>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004b92:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <MX_USART2_UART_Init+0x4c>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004b98:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <MX_USART2_UART_Init+0x4c>)
 8004b9a:	220c      	movs	r2, #12
 8004b9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b9e:	4b08      	ldr	r3, [pc, #32]	; (8004bc0 <MX_USART2_UART_Init+0x4c>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <MX_USART2_UART_Init+0x4c>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004baa:	4805      	ldr	r0, [pc, #20]	; (8004bc0 <MX_USART2_UART_Init+0x4c>)
 8004bac:	f7fe fc22 	bl	80033f4 <HAL_UART_Init>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004bb6:	f7ff fdb3 	bl	8004720 <Error_Handler>
  }

}
 8004bba:	bf00      	nop
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	200000ec 	.word	0x200000ec
 8004bc4:	40004400 	.word	0x40004400

08004bc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	; 0x28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd0:	f107 0314 	add.w	r3, r7, #20
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	605a      	str	r2, [r3, #4]
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <HAL_UART_MspInit+0x84>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d12b      	bne.n	8004c42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <HAL_UART_MspInit+0x88>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	4a17      	ldr	r2, [pc, #92]	; (8004c50 <HAL_UART_MspInit+0x88>)
 8004bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfa:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <HAL_UART_MspInit+0x88>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	4b11      	ldr	r3, [pc, #68]	; (8004c50 <HAL_UART_MspInit+0x88>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	4a10      	ldr	r2, [pc, #64]	; (8004c50 <HAL_UART_MspInit+0x88>)
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	6313      	str	r3, [r2, #48]	; 0x30
 8004c16:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <HAL_UART_MspInit+0x88>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004c22:	230c      	movs	r3, #12
 8004c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c26:	2302      	movs	r3, #2
 8004c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c32:	2307      	movs	r3, #7
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c36:	f107 0314 	add.w	r3, r7, #20
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4805      	ldr	r0, [pc, #20]	; (8004c54 <HAL_UART_MspInit+0x8c>)
 8004c3e:	f7fc f9cb 	bl	8000fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004c42:	bf00      	nop
 8004c44:	3728      	adds	r7, #40	; 0x28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40004400 	.word	0x40004400
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40020000 	.word	0x40020000

08004c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c5e:	e003      	b.n	8004c68 <LoopCopyDataInit>

08004c60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c66:	3104      	adds	r1, #4

08004c68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c68:	480b      	ldr	r0, [pc, #44]	; (8004c98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c70:	d3f6      	bcc.n	8004c60 <CopyDataInit>
  ldr  r2, =_sbss
 8004c72:	4a0b      	ldr	r2, [pc, #44]	; (8004ca0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c74:	e002      	b.n	8004c7c <LoopFillZerobss>

08004c76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c78:	f842 3b04 	str.w	r3, [r2], #4

08004c7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c7c:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c80:	d3f9      	bcc.n	8004c76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c82:	f7ff fe59 	bl	8004938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c86:	f000 f811 	bl	8004cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c8a:	f7ff fb31 	bl	80042f0 <main>
  bx  lr    
 8004c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004c94:	08004d68 	.word	0x08004d68
  ldr  r0, =_sdata
 8004c98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c9c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004ca0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004ca4:	2000012c 	.word	0x2000012c

08004ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ca8:	e7fe      	b.n	8004ca8 <ADC_IRQHandler>
	...

08004cac <__libc_init_array>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	4e0d      	ldr	r6, [pc, #52]	; (8004ce4 <__libc_init_array+0x38>)
 8004cb0:	4c0d      	ldr	r4, [pc, #52]	; (8004ce8 <__libc_init_array+0x3c>)
 8004cb2:	1ba4      	subs	r4, r4, r6
 8004cb4:	10a4      	asrs	r4, r4, #2
 8004cb6:	2500      	movs	r5, #0
 8004cb8:	42a5      	cmp	r5, r4
 8004cba:	d109      	bne.n	8004cd0 <__libc_init_array+0x24>
 8004cbc:	4e0b      	ldr	r6, [pc, #44]	; (8004cec <__libc_init_array+0x40>)
 8004cbe:	4c0c      	ldr	r4, [pc, #48]	; (8004cf0 <__libc_init_array+0x44>)
 8004cc0:	f000 f820 	bl	8004d04 <_init>
 8004cc4:	1ba4      	subs	r4, r4, r6
 8004cc6:	10a4      	asrs	r4, r4, #2
 8004cc8:	2500      	movs	r5, #0
 8004cca:	42a5      	cmp	r5, r4
 8004ccc:	d105      	bne.n	8004cda <__libc_init_array+0x2e>
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cd4:	4798      	blx	r3
 8004cd6:	3501      	adds	r5, #1
 8004cd8:	e7ee      	b.n	8004cb8 <__libc_init_array+0xc>
 8004cda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cde:	4798      	blx	r3
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	e7f2      	b.n	8004cca <__libc_init_array+0x1e>
 8004ce4:	08004d60 	.word	0x08004d60
 8004ce8:	08004d60 	.word	0x08004d60
 8004cec:	08004d60 	.word	0x08004d60
 8004cf0:	08004d64 	.word	0x08004d64

08004cf4 <memset>:
 8004cf4:	4402      	add	r2, r0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d100      	bne.n	8004cfe <memset+0xa>
 8004cfc:	4770      	bx	lr
 8004cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004d02:	e7f9      	b.n	8004cf8 <memset+0x4>

08004d04 <_init>:
 8004d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d06:	bf00      	nop
 8004d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0a:	bc08      	pop	{r3}
 8004d0c:	469e      	mov	lr, r3
 8004d0e:	4770      	bx	lr

08004d10 <_fini>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	bf00      	nop
 8004d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d16:	bc08      	pop	{r3}
 8004d18:	469e      	mov	lr, r3
 8004d1a:	4770      	bx	lr
