
Boat_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004028  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800422c  0800422c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800422c  0800422c  0001422c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004234  08004234  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004234  08004234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004238  08004238  00014238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800423c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08004248  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08004248  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea6f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000214e  00000000  00000000  0002eaab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  00030c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  00031a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022b75  00000000  00000000  00032768  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba98  00000000  00000000  000552dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d15ae  00000000  00000000  00060d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132323  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af0  00000000  00000000  001323a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080041d8 	.word	0x080041d8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080041d8 	.word	0x080041d8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_Init+0x40>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <HAL_Init+0x40>)
 8000512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <HAL_Init+0x40>)
 800051e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <HAL_Init+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <HAL_Init+0x40>)
 800052a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000530:	2003      	movs	r0, #3
 8000532:	f000 f92f 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000536:	2000      	movs	r0, #0
 8000538:	f000 f808 	bl	800054c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800053c:	f003 fc10 	bl	8003d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40023c00 	.word	0x40023c00

0800054c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x54>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <HAL_InitTick+0x58>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000562:	fbb3 f3f1 	udiv	r3, r3, r1
 8000566:	fbb2 f3f3 	udiv	r3, r2, r3
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f939 	bl	80007e2 <HAL_SYSTICK_Config>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
 8000578:	e00e      	b.n	8000598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b0f      	cmp	r3, #15
 800057e:	d80a      	bhi.n	8000596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000580:	2200      	movs	r2, #0
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	f04f 30ff 	mov.w	r0, #4294967295
 8000588:	f000 f90f 	bl	80007aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <HAL_InitTick+0x5c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e000      	b.n	8000598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000008 	.word	0x20000008
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x20>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_IncTick+0x24>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <HAL_IncTick+0x24>)
 80005be:	6013      	str	r3, [r2, #0]
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000004 	.word	0x20000004
 80005d0:	2000002c 	.word	0x2000002c

080005d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return uwTick;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <HAL_GetTick+0x14>)
 80005da:	681b      	ldr	r3, [r3, #0]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2000002c 	.word	0x2000002c

080005ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f4:	f7ff ffee 	bl	80005d4 <HAL_GetTick>
 80005f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000604:	d005      	beq.n	8000612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_Delay+0x40>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4413      	add	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000612:	bf00      	nop
 8000614:	f7ff ffde 	bl	80005d4 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	429a      	cmp	r2, r3
 8000622:	d8f7      	bhi.n	8000614 <HAL_Delay+0x28>
  {
  }
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000004 	.word	0x20000004

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff ff8e 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff47 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff5c 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff8e 	bl	80006e8 <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5d 	bl	8000694 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ffb0 	bl	8000750 <SysTick_Config>
 80007f0:	4603      	mov	r3, r0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b089      	sub	sp, #36	; 0x24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
 8000816:	e165      	b.n	8000ae4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000818:	2201      	movs	r2, #1
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4013      	ands	r3, r2
 800082a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	429a      	cmp	r2, r3
 8000832:	f040 8154 	bne.w	8000ade <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d00b      	beq.n	8000856 <HAL_GPIO_Init+0x5a>
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d007      	beq.n	8000856 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084a:	2b11      	cmp	r3, #17
 800084c:	d003      	beq.n	8000856 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b12      	cmp	r3, #18
 8000854:	d130      	bne.n	80008b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	2203      	movs	r2, #3
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	4013      	ands	r3, r2
 800086c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	68da      	ldr	r2, [r3, #12]
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	4313      	orrs	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800088c:	2201      	movs	r2, #1
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4013      	ands	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	091b      	lsrs	r3, r3, #4
 80008a2:	f003 0201 	and.w	r2, r3, #1
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	2203      	movs	r2, #3
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4013      	ands	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	4313      	orrs	r3, r2
 80008e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d003      	beq.n	80008f8 <HAL_GPIO_Init+0xfc>
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b12      	cmp	r3, #18
 80008f6:	d123      	bne.n	8000940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	08da      	lsrs	r2, r3, #3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3208      	adds	r2, #8
 8000900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	f003 0307 	and.w	r3, r3, #7
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	220f      	movs	r2, #15
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	691a      	ldr	r2, [r3, #16]
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	4313      	orrs	r3, r2
 8000930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	08da      	lsrs	r2, r3, #3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3208      	adds	r2, #8
 800093a:	69b9      	ldr	r1, [r7, #24]
 800093c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	2203      	movs	r2, #3
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	4013      	ands	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f003 0203 	and.w	r2, r3, #3
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4313      	orrs	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097c:	2b00      	cmp	r3, #0
 800097e:	f000 80ae 	beq.w	8000ade <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b5c      	ldr	r3, [pc, #368]	; (8000af8 <HAL_GPIO_Init+0x2fc>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	4a5b      	ldr	r2, [pc, #364]	; (8000af8 <HAL_GPIO_Init+0x2fc>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000990:	6453      	str	r3, [r2, #68]	; 0x44
 8000992:	4b59      	ldr	r3, [pc, #356]	; (8000af8 <HAL_GPIO_Init+0x2fc>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800099e:	4a57      	ldr	r2, [pc, #348]	; (8000afc <HAL_GPIO_Init+0x300>)
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	089b      	lsrs	r3, r3, #2
 80009a4:	3302      	adds	r3, #2
 80009a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f003 0303 	and.w	r3, r3, #3
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	220f      	movs	r2, #15
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	4013      	ands	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a4e      	ldr	r2, [pc, #312]	; (8000b00 <HAL_GPIO_Init+0x304>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d025      	beq.n	8000a16 <HAL_GPIO_Init+0x21a>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a4d      	ldr	r2, [pc, #308]	; (8000b04 <HAL_GPIO_Init+0x308>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d01f      	beq.n	8000a12 <HAL_GPIO_Init+0x216>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a4c      	ldr	r2, [pc, #304]	; (8000b08 <HAL_GPIO_Init+0x30c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d019      	beq.n	8000a0e <HAL_GPIO_Init+0x212>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a4b      	ldr	r2, [pc, #300]	; (8000b0c <HAL_GPIO_Init+0x310>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d013      	beq.n	8000a0a <HAL_GPIO_Init+0x20e>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a4a      	ldr	r2, [pc, #296]	; (8000b10 <HAL_GPIO_Init+0x314>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d00d      	beq.n	8000a06 <HAL_GPIO_Init+0x20a>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a49      	ldr	r2, [pc, #292]	; (8000b14 <HAL_GPIO_Init+0x318>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d007      	beq.n	8000a02 <HAL_GPIO_Init+0x206>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a48      	ldr	r2, [pc, #288]	; (8000b18 <HAL_GPIO_Init+0x31c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_GPIO_Init+0x202>
 80009fa:	2306      	movs	r3, #6
 80009fc:	e00c      	b.n	8000a18 <HAL_GPIO_Init+0x21c>
 80009fe:	2307      	movs	r3, #7
 8000a00:	e00a      	b.n	8000a18 <HAL_GPIO_Init+0x21c>
 8000a02:	2305      	movs	r3, #5
 8000a04:	e008      	b.n	8000a18 <HAL_GPIO_Init+0x21c>
 8000a06:	2304      	movs	r3, #4
 8000a08:	e006      	b.n	8000a18 <HAL_GPIO_Init+0x21c>
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	e004      	b.n	8000a18 <HAL_GPIO_Init+0x21c>
 8000a0e:	2302      	movs	r3, #2
 8000a10:	e002      	b.n	8000a18 <HAL_GPIO_Init+0x21c>
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <HAL_GPIO_Init+0x21c>
 8000a16:	2300      	movs	r3, #0
 8000a18:	69fa      	ldr	r2, [r7, #28]
 8000a1a:	f002 0203 	and.w	r2, r2, #3
 8000a1e:	0092      	lsls	r2, r2, #2
 8000a20:	4093      	lsls	r3, r2
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a28:	4934      	ldr	r1, [pc, #208]	; (8000afc <HAL_GPIO_Init+0x300>)
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	089b      	lsrs	r3, r3, #2
 8000a2e:	3302      	adds	r3, #2
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a36:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <HAL_GPIO_Init+0x320>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	4013      	ands	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a5a:	4a30      	ldr	r2, [pc, #192]	; (8000b1c <HAL_GPIO_Init+0x320>)
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a60:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <HAL_GPIO_Init+0x320>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a84:	4a25      	ldr	r2, [pc, #148]	; (8000b1c <HAL_GPIO_Init+0x320>)
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a8a:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <HAL_GPIO_Init+0x320>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	43db      	mvns	r3, r3
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	4013      	ands	r3, r2
 8000a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aae:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <HAL_GPIO_Init+0x320>)
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_GPIO_Init+0x320>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ad8:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_GPIO_Init+0x320>)
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	2b0f      	cmp	r3, #15
 8000ae8:	f67f ae96 	bls.w	8000818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000aec:	bf00      	nop
 8000aee:	3724      	adds	r7, #36	; 0x24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40013800 	.word	0x40013800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020400 	.word	0x40020400
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	40020c00 	.word	0x40020c00
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40021400 	.word	0x40021400
 8000b18:	40021800 	.word	0x40021800
 8000b1c:	40013c00 	.word	0x40013c00

08000b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b30:	787b      	ldrb	r3, [r7, #1]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b3c:	e003      	b.n	8000b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	041a      	lsls	r2, r3, #16
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	619a      	str	r2, [r3, #24]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e0cc      	b.n	8000d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b68:	4b68      	ldr	r3, [pc, #416]	; (8000d0c <HAL_RCC_ClockConfig+0x1b8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f003 030f 	and.w	r3, r3, #15
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d90c      	bls.n	8000b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b76:	4b65      	ldr	r3, [pc, #404]	; (8000d0c <HAL_RCC_ClockConfig+0x1b8>)
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b7e:	4b63      	ldr	r3, [pc, #396]	; (8000d0c <HAL_RCC_ClockConfig+0x1b8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d001      	beq.n	8000b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e0b8      	b.n	8000d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d020      	beq.n	8000bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d005      	beq.n	8000bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ba8:	4b59      	ldr	r3, [pc, #356]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	4a58      	ldr	r2, [pc, #352]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000bb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 0308 	and.w	r3, r3, #8
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d005      	beq.n	8000bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bc0:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	4a52      	ldr	r2, [pc, #328]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bcc:	4b50      	ldr	r3, [pc, #320]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	494d      	ldr	r1, [pc, #308]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d044      	beq.n	8000c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d107      	bne.n	8000c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf2:	4b47      	ldr	r3, [pc, #284]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d119      	bne.n	8000c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e07f      	b.n	8000d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d003      	beq.n	8000c12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d107      	bne.n	8000c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c12:	4b3f      	ldr	r3, [pc, #252]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d109      	bne.n	8000c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e06f      	b.n	8000d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c22:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d101      	bne.n	8000c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e067      	b.n	8000d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c32:	4b37      	ldr	r3, [pc, #220]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f023 0203 	bic.w	r2, r3, #3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	4934      	ldr	r1, [pc, #208]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000c40:	4313      	orrs	r3, r2
 8000c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c44:	f7ff fcc6 	bl	80005d4 <HAL_GetTick>
 8000c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c4a:	e00a      	b.n	8000c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c4c:	f7ff fcc2 	bl	80005d4 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d901      	bls.n	8000c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e04f      	b.n	8000d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c62:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f003 020c 	and.w	r2, r3, #12
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d1eb      	bne.n	8000c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c74:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_RCC_ClockConfig+0x1b8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 030f 	and.w	r3, r3, #15
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d20c      	bcs.n	8000c9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <HAL_RCC_ClockConfig+0x1b8>)
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c8a:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <HAL_RCC_ClockConfig+0x1b8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d001      	beq.n	8000c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e032      	b.n	8000d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d008      	beq.n	8000cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	4916      	ldr	r1, [pc, #88]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d009      	beq.n	8000cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	490e      	ldr	r1, [pc, #56]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cda:	f000 f855 	bl	8000d88 <HAL_RCC_GetSysClockFreq>
 8000cde:	4601      	mov	r1, r0
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_RCC_ClockConfig+0x1bc>)
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	091b      	lsrs	r3, r3, #4
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_RCC_ClockConfig+0x1c0>)
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <HAL_RCC_ClockConfig+0x1c4>)
 8000cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_RCC_ClockConfig+0x1c8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fc26 	bl	800054c <HAL_InitTick>

  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023c00 	.word	0x40023c00
 8000d10:	40023800 	.word	0x40023800
 8000d14:	08004214 	.word	0x08004214
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000000 	.word	0x20000000

08000d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008

08000d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d3c:	f7ff fff0 	bl	8000d20 <HAL_RCC_GetHCLKFreq>
 8000d40:	4601      	mov	r1, r0
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	0a9b      	lsrs	r3, r3, #10
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	4a03      	ldr	r2, [pc, #12]	; (8000d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d4e:	5cd3      	ldrb	r3, [r2, r3]
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	08004224 	.word	0x08004224

08000d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d64:	f7ff ffdc 	bl	8000d20 <HAL_RCC_GetHCLKFreq>
 8000d68:	4601      	mov	r1, r0
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	0b5b      	lsrs	r3, r3, #13
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	4a03      	ldr	r2, [pc, #12]	; (8000d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d76:	5cd3      	ldrb	r3, [r2, r3]
 8000d78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40023800 	.word	0x40023800
 8000d84:	08004224 	.word	0x08004224

08000d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000da2:	4bc6      	ldr	r3, [pc, #792]	; (80010bc <HAL_RCC_GetSysClockFreq+0x334>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f003 030c 	and.w	r3, r3, #12
 8000daa:	2b0c      	cmp	r3, #12
 8000dac:	f200 817e 	bhi.w	80010ac <HAL_RCC_GetSysClockFreq+0x324>
 8000db0:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <HAL_RCC_GetSysClockFreq+0x30>)
 8000db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db6:	bf00      	nop
 8000db8:	08000ded 	.word	0x08000ded
 8000dbc:	080010ad 	.word	0x080010ad
 8000dc0:	080010ad 	.word	0x080010ad
 8000dc4:	080010ad 	.word	0x080010ad
 8000dc8:	08000df3 	.word	0x08000df3
 8000dcc:	080010ad 	.word	0x080010ad
 8000dd0:	080010ad 	.word	0x080010ad
 8000dd4:	080010ad 	.word	0x080010ad
 8000dd8:	08000df9 	.word	0x08000df9
 8000ddc:	080010ad 	.word	0x080010ad
 8000de0:	080010ad 	.word	0x080010ad
 8000de4:	080010ad 	.word	0x080010ad
 8000de8:	08000f55 	.word	0x08000f55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000dec:	4bb4      	ldr	r3, [pc, #720]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x338>)
 8000dee:	613b      	str	r3, [r7, #16]
       break;
 8000df0:	e15f      	b.n	80010b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000df2:	4bb4      	ldr	r3, [pc, #720]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x33c>)
 8000df4:	613b      	str	r3, [r7, #16]
      break;
 8000df6:	e15c      	b.n	80010b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000df8:	4bb0      	ldr	r3, [pc, #704]	; (80010bc <HAL_RCC_GetSysClockFreq+0x334>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e00:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e02:	4bae      	ldr	r3, [pc, #696]	; (80010bc <HAL_RCC_GetSysClockFreq+0x334>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d04a      	beq.n	8000ea4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e0e:	4bab      	ldr	r3, [pc, #684]	; (80010bc <HAL_RCC_GetSysClockFreq+0x334>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	099b      	lsrs	r3, r3, #6
 8000e14:	f04f 0400 	mov.w	r4, #0
 8000e18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	ea03 0501 	and.w	r5, r3, r1
 8000e24:	ea04 0602 	and.w	r6, r4, r2
 8000e28:	4629      	mov	r1, r5
 8000e2a:	4632      	mov	r2, r6
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	f04f 0400 	mov.w	r4, #0
 8000e34:	0154      	lsls	r4, r2, #5
 8000e36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000e3a:	014b      	lsls	r3, r1, #5
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4622      	mov	r2, r4
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	eb62 0206 	sbc.w	r2, r2, r6
 8000e46:	f04f 0300 	mov.w	r3, #0
 8000e4a:	f04f 0400 	mov.w	r4, #0
 8000e4e:	0194      	lsls	r4, r2, #6
 8000e50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000e54:	018b      	lsls	r3, r1, #6
 8000e56:	1a5b      	subs	r3, r3, r1
 8000e58:	eb64 0402 	sbc.w	r4, r4, r2
 8000e5c:	f04f 0100 	mov.w	r1, #0
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	00e2      	lsls	r2, r4, #3
 8000e66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000e6a:	00d9      	lsls	r1, r3, #3
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4614      	mov	r4, r2
 8000e70:	195b      	adds	r3, r3, r5
 8000e72:	eb44 0406 	adc.w	r4, r4, r6
 8000e76:	f04f 0100 	mov.w	r1, #0
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	0262      	lsls	r2, r4, #9
 8000e80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000e84:	0259      	lsls	r1, r3, #9
 8000e86:	460b      	mov	r3, r1
 8000e88:	4614      	mov	r4, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	4621      	mov	r1, r4
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f04f 0400 	mov.w	r4, #0
 8000e94:	461a      	mov	r2, r3
 8000e96:	4623      	mov	r3, r4
 8000e98:	f7ff f9b6 	bl	8000208 <__aeabi_uldivmod>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	460c      	mov	r4, r1
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	e049      	b.n	8000f38 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ea4:	4b85      	ldr	r3, [pc, #532]	; (80010bc <HAL_RCC_GetSysClockFreq+0x334>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	f04f 0400 	mov.w	r4, #0
 8000eae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	ea03 0501 	and.w	r5, r3, r1
 8000eba:	ea04 0602 	and.w	r6, r4, r2
 8000ebe:	4629      	mov	r1, r5
 8000ec0:	4632      	mov	r2, r6
 8000ec2:	f04f 0300 	mov.w	r3, #0
 8000ec6:	f04f 0400 	mov.w	r4, #0
 8000eca:	0154      	lsls	r4, r2, #5
 8000ecc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ed0:	014b      	lsls	r3, r1, #5
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4622      	mov	r2, r4
 8000ed6:	1b49      	subs	r1, r1, r5
 8000ed8:	eb62 0206 	sbc.w	r2, r2, r6
 8000edc:	f04f 0300 	mov.w	r3, #0
 8000ee0:	f04f 0400 	mov.w	r4, #0
 8000ee4:	0194      	lsls	r4, r2, #6
 8000ee6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000eea:	018b      	lsls	r3, r1, #6
 8000eec:	1a5b      	subs	r3, r3, r1
 8000eee:	eb64 0402 	sbc.w	r4, r4, r2
 8000ef2:	f04f 0100 	mov.w	r1, #0
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	00e2      	lsls	r2, r4, #3
 8000efc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f00:	00d9      	lsls	r1, r3, #3
 8000f02:	460b      	mov	r3, r1
 8000f04:	4614      	mov	r4, r2
 8000f06:	195b      	adds	r3, r3, r5
 8000f08:	eb44 0406 	adc.w	r4, r4, r6
 8000f0c:	f04f 0100 	mov.w	r1, #0
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	02a2      	lsls	r2, r4, #10
 8000f16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000f1a:	0299      	lsls	r1, r3, #10
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4614      	mov	r4, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	4621      	mov	r1, r4
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f04f 0400 	mov.w	r4, #0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4623      	mov	r3, r4
 8000f2e:	f7ff f96b 	bl	8000208 <__aeabi_uldivmod>
 8000f32:	4603      	mov	r3, r0
 8000f34:	460c      	mov	r4, r1
 8000f36:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f38:	4b60      	ldr	r3, [pc, #384]	; (80010bc <HAL_RCC_GetSysClockFreq+0x334>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	0c1b      	lsrs	r3, r3, #16
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	3301      	adds	r3, #1
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f50:	613b      	str	r3, [r7, #16]
      break;
 8000f52:	e0ae      	b.n	80010b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f54:	4b59      	ldr	r3, [pc, #356]	; (80010bc <HAL_RCC_GetSysClockFreq+0x334>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f5c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f5e:	4b57      	ldr	r3, [pc, #348]	; (80010bc <HAL_RCC_GetSysClockFreq+0x334>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d04a      	beq.n	8001000 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f6a:	4b54      	ldr	r3, [pc, #336]	; (80010bc <HAL_RCC_GetSysClockFreq+0x334>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	099b      	lsrs	r3, r3, #6
 8000f70:	f04f 0400 	mov.w	r4, #0
 8000f74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	ea03 0501 	and.w	r5, r3, r1
 8000f80:	ea04 0602 	and.w	r6, r4, r2
 8000f84:	4629      	mov	r1, r5
 8000f86:	4632      	mov	r2, r6
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	f04f 0400 	mov.w	r4, #0
 8000f90:	0154      	lsls	r4, r2, #5
 8000f92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f96:	014b      	lsls	r3, r1, #5
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4622      	mov	r2, r4
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	eb62 0206 	sbc.w	r2, r2, r6
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	f04f 0400 	mov.w	r4, #0
 8000faa:	0194      	lsls	r4, r2, #6
 8000fac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000fb0:	018b      	lsls	r3, r1, #6
 8000fb2:	1a5b      	subs	r3, r3, r1
 8000fb4:	eb64 0402 	sbc.w	r4, r4, r2
 8000fb8:	f04f 0100 	mov.w	r1, #0
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	00e2      	lsls	r2, r4, #3
 8000fc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000fc6:	00d9      	lsls	r1, r3, #3
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4614      	mov	r4, r2
 8000fcc:	195b      	adds	r3, r3, r5
 8000fce:	eb44 0406 	adc.w	r4, r4, r6
 8000fd2:	f04f 0100 	mov.w	r1, #0
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	0262      	lsls	r2, r4, #9
 8000fdc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000fe0:	0259      	lsls	r1, r3, #9
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4614      	mov	r4, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	4621      	mov	r1, r4
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f04f 0400 	mov.w	r4, #0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	f7ff f908 	bl	8000208 <__aeabi_uldivmod>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	e049      	b.n	8001094 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <HAL_RCC_GetSysClockFreq+0x334>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	099b      	lsrs	r3, r3, #6
 8001006:	f04f 0400 	mov.w	r4, #0
 800100a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	ea03 0501 	and.w	r5, r3, r1
 8001016:	ea04 0602 	and.w	r6, r4, r2
 800101a:	4629      	mov	r1, r5
 800101c:	4632      	mov	r2, r6
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	f04f 0400 	mov.w	r4, #0
 8001026:	0154      	lsls	r4, r2, #5
 8001028:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800102c:	014b      	lsls	r3, r1, #5
 800102e:	4619      	mov	r1, r3
 8001030:	4622      	mov	r2, r4
 8001032:	1b49      	subs	r1, r1, r5
 8001034:	eb62 0206 	sbc.w	r2, r2, r6
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	f04f 0400 	mov.w	r4, #0
 8001040:	0194      	lsls	r4, r2, #6
 8001042:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001046:	018b      	lsls	r3, r1, #6
 8001048:	1a5b      	subs	r3, r3, r1
 800104a:	eb64 0402 	sbc.w	r4, r4, r2
 800104e:	f04f 0100 	mov.w	r1, #0
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	00e2      	lsls	r2, r4, #3
 8001058:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800105c:	00d9      	lsls	r1, r3, #3
 800105e:	460b      	mov	r3, r1
 8001060:	4614      	mov	r4, r2
 8001062:	195b      	adds	r3, r3, r5
 8001064:	eb44 0406 	adc.w	r4, r4, r6
 8001068:	f04f 0100 	mov.w	r1, #0
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	02a2      	lsls	r2, r4, #10
 8001072:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001076:	0299      	lsls	r1, r3, #10
 8001078:	460b      	mov	r3, r1
 800107a:	4614      	mov	r4, r2
 800107c:	4618      	mov	r0, r3
 800107e:	4621      	mov	r1, r4
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f04f 0400 	mov.w	r4, #0
 8001086:	461a      	mov	r2, r3
 8001088:	4623      	mov	r3, r4
 800108a:	f7ff f8bd 	bl	8000208 <__aeabi_uldivmod>
 800108e:	4603      	mov	r3, r0
 8001090:	460c      	mov	r4, r1
 8001092:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_RCC_GetSysClockFreq+0x334>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	0f1b      	lsrs	r3, r3, #28
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a8:	613b      	str	r3, [r7, #16]
      break;
 80010aa:	e002      	b.n	80010b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x338>)
 80010ae:	613b      	str	r3, [r7, #16]
      break;
 80010b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80010b2:	693b      	ldr	r3, [r7, #16]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	00f42400 	.word	0x00f42400
 80010c4:	007a1200 	.word	0x007a1200

080010c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 8083 	beq.w	80011e8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80010e2:	4b95      	ldr	r3, [pc, #596]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d019      	beq.n	8001122 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80010ee:	4b92      	ldr	r3, [pc, #584]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d106      	bne.n	8001108 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80010fa:	4b8f      	ldr	r3, [pc, #572]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001106:	d00c      	beq.n	8001122 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001108:	4b8b      	ldr	r3, [pc, #556]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001110:	2b0c      	cmp	r3, #12
 8001112:	d112      	bne.n	800113a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001114:	4b88      	ldr	r3, [pc, #544]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001120:	d10b      	bne.n	800113a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001122:	4b85      	ldr	r3, [pc, #532]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d05b      	beq.n	80011e6 <HAL_RCC_OscConfig+0x11e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d157      	bne.n	80011e6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e216      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001142:	d106      	bne.n	8001152 <HAL_RCC_OscConfig+0x8a>
 8001144:	4b7c      	ldr	r3, [pc, #496]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a7b      	ldr	r2, [pc, #492]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800114a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e01d      	b.n	800118e <HAL_RCC_OscConfig+0xc6>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115a:	d10c      	bne.n	8001176 <HAL_RCC_OscConfig+0xae>
 800115c:	4b76      	ldr	r3, [pc, #472]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a75      	ldr	r2, [pc, #468]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b73      	ldr	r3, [pc, #460]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a72      	ldr	r2, [pc, #456]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800116e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	e00b      	b.n	800118e <HAL_RCC_OscConfig+0xc6>
 8001176:	4b70      	ldr	r3, [pc, #448]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6f      	ldr	r2, [pc, #444]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800117c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	4b6d      	ldr	r3, [pc, #436]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a6c      	ldr	r2, [pc, #432]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d013      	beq.n	80011be <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001196:	f7ff fa1d 	bl	80005d4 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800119e:	f7ff fa19 	bl	80005d4 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b64      	cmp	r3, #100	; 0x64
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e1db      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b0:	4b61      	ldr	r3, [pc, #388]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f0      	beq.n	800119e <HAL_RCC_OscConfig+0xd6>
 80011bc:	e014      	b.n	80011e8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011be:	f7ff fa09 	bl	80005d4 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c6:	f7ff fa05 	bl	80005d4 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b64      	cmp	r3, #100	; 0x64
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e1c7      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d8:	4b57      	ldr	r3, [pc, #348]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f0      	bne.n	80011c6 <HAL_RCC_OscConfig+0xfe>
 80011e4:	e000      	b.n	80011e8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d06f      	beq.n	80012d4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80011f4:	4b50      	ldr	r3, [pc, #320]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d017      	beq.n	8001230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001200:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001208:	2b08      	cmp	r3, #8
 800120a:	d105      	bne.n	8001218 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800120c:	4b4a      	ldr	r3, [pc, #296]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00b      	beq.n	8001230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001218:	4b47      	ldr	r3, [pc, #284]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001220:	2b0c      	cmp	r3, #12
 8001222:	d11c      	bne.n	800125e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001224:	4b44      	ldr	r3, [pc, #272]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d116      	bne.n	800125e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001230:	4b41      	ldr	r3, [pc, #260]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_OscConfig+0x180>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d001      	beq.n	8001248 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e18f      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001248:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4938      	ldr	r1, [pc, #224]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001258:	4313      	orrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125c:	e03a      	b.n	80012d4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d020      	beq.n	80012a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001266:	4b35      	ldr	r3, [pc, #212]	; (800133c <HAL_RCC_OscConfig+0x274>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126c:	f7ff f9b2 	bl	80005d4 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001274:	f7ff f9ae 	bl	80005d4 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e170      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001286:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b29      	ldr	r3, [pc, #164]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4925      	ldr	r1, [pc, #148]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
 80012a6:	e015      	b.n	80012d4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_RCC_OscConfig+0x274>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ae:	f7ff f991 	bl	80005d4 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b6:	f7ff f98d 	bl	80005d4 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e14f      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f0      	bne.n	80012b6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d037      	beq.n	8001350 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d016      	beq.n	8001316 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_RCC_OscConfig+0x278>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ee:	f7ff f971 	bl	80005d4 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f6:	f7ff f96d 	bl	80005d4 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e12f      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800130a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x22e>
 8001314:	e01c      	b.n	8001350 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_RCC_OscConfig+0x278>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131c:	f7ff f95a 	bl	80005d4 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001322:	e00f      	b.n	8001344 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff f956 	bl	80005d4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d908      	bls.n	8001344 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e118      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	42470000 	.word	0x42470000
 8001340:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	4b8a      	ldr	r3, [pc, #552]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1e9      	bne.n	8001324 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 8097 	beq.w	800148c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001362:	4b83      	ldr	r3, [pc, #524]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10f      	bne.n	800138e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b7f      	ldr	r3, [pc, #508]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a7e      	ldr	r2, [pc, #504]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b7c      	ldr	r3, [pc, #496]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800138a:	2301      	movs	r3, #1
 800138c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138e:	4b79      	ldr	r3, [pc, #484]	; (8001574 <HAL_RCC_OscConfig+0x4ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001396:	2b00      	cmp	r3, #0
 8001398:	d118      	bne.n	80013cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139a:	4b76      	ldr	r3, [pc, #472]	; (8001574 <HAL_RCC_OscConfig+0x4ac>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a75      	ldr	r2, [pc, #468]	; (8001574 <HAL_RCC_OscConfig+0x4ac>)
 80013a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a6:	f7ff f915 	bl	80005d4 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ae:	f7ff f911 	bl	80005d4 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e0d3      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c0:	4b6c      	ldr	r3, [pc, #432]	; (8001574 <HAL_RCC_OscConfig+0x4ac>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x31a>
 80013d4:	4b66      	ldr	r3, [pc, #408]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 80013d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d8:	4a65      	ldr	r2, [pc, #404]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6713      	str	r3, [r2, #112]	; 0x70
 80013e0:	e01c      	b.n	800141c <HAL_RCC_OscConfig+0x354>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x33c>
 80013ea:	4b61      	ldr	r3, [pc, #388]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ee:	4a60      	ldr	r2, [pc, #384]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6713      	str	r3, [r2, #112]	; 0x70
 80013f6:	4b5e      	ldr	r3, [pc, #376]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fa:	4a5d      	ldr	r2, [pc, #372]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6713      	str	r3, [r2, #112]	; 0x70
 8001402:	e00b      	b.n	800141c <HAL_RCC_OscConfig+0x354>
 8001404:	4b5a      	ldr	r3, [pc, #360]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001408:	4a59      	ldr	r2, [pc, #356]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	6713      	str	r3, [r2, #112]	; 0x70
 8001410:	4b57      	ldr	r3, [pc, #348]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001414:	4a56      	ldr	r2, [pc, #344]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001416:	f023 0304 	bic.w	r3, r3, #4
 800141a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d015      	beq.n	8001450 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001424:	f7ff f8d6 	bl	80005d4 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142a:	e00a      	b.n	8001442 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142c:	f7ff f8d2 	bl	80005d4 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f241 3288 	movw	r2, #5000	; 0x1388
 800143a:	4293      	cmp	r3, r2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e092      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001442:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0ee      	beq.n	800142c <HAL_RCC_OscConfig+0x364>
 800144e:	e014      	b.n	800147a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff f8c0 	bl	80005d4 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001456:	e00a      	b.n	800146e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f7ff f8bc 	bl	80005d4 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	; 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e07c      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146e:	4b40      	ldr	r3, [pc, #256]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1ee      	bne.n	8001458 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800147a:	7dfb      	ldrb	r3, [r7, #23]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001480:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a3a      	ldr	r2, [pc, #232]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d068      	beq.n	8001566 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d060      	beq.n	8001562 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d145      	bne.n	8001534 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a8:	4b33      	ldr	r3, [pc, #204]	; (8001578 <HAL_RCC_OscConfig+0x4b0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff f891 	bl	80005d4 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff f88d 	bl	80005d4 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e04f      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69da      	ldr	r2, [r3, #28]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	019b      	lsls	r3, r3, #6
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	3b01      	subs	r3, #1
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	061b      	lsls	r3, r3, #24
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	071b      	lsls	r3, r3, #28
 8001500:	491b      	ldr	r1, [pc, #108]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HAL_RCC_OscConfig+0x4b0>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff f862 	bl	80005d4 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001514:	f7ff f85e 	bl	80005d4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e020      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0x44c>
 8001532:	e018      	b.n	8001566 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_RCC_OscConfig+0x4b0>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff f84b 	bl	80005d4 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff f847 	bl	80005d4 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e009      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_RCC_OscConfig+0x4a8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x47a>
 8001560:	e001      	b.n	8001566 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000
 8001578:	42470060 	.word	0x42470060

0800157c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e056      	b.n	800163c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d106      	bne.n	80015ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f002 fb61 	bl	8003c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2202      	movs	r2, #2
 80015b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	ea42 0103 	orr.w	r1, r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	0c1b      	lsrs	r3, r3, #16
 800160c:	f003 0104 	and.w	r1, r3, #4
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	69da      	ldr	r2, [r3, #28]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800162a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	4613      	mov	r3, r2
 8001652:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_SPI_Transmit+0x22>
 8001662:	2302      	movs	r3, #2
 8001664:	e11e      	b.n	80018a4 <HAL_SPI_Transmit+0x260>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800166e:	f7fe ffb1 	bl	80005d4 <HAL_GetTick>
 8001672:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d002      	beq.n	800168a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001684:	2302      	movs	r3, #2
 8001686:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001688:	e103      	b.n	8001892 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <HAL_SPI_Transmit+0x52>
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	77fb      	strb	r3, [r7, #31]
    goto error;
 800169a:	e0fa      	b.n	8001892 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2203      	movs	r2, #3
 80016a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	88fa      	ldrh	r2, [r7, #6]
 80016b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	88fa      	ldrh	r2, [r7, #6]
 80016ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016e2:	d107      	bne.n	80016f4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fe:	2b40      	cmp	r3, #64	; 0x40
 8001700:	d007      	beq.n	8001712 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800171a:	d14b      	bne.n	80017b4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <HAL_SPI_Transmit+0xe6>
 8001724:	8afb      	ldrh	r3, [r7, #22]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d13e      	bne.n	80017a8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	881a      	ldrh	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	1c9a      	adds	r2, r3, #2
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001744:	b29b      	uxth	r3, r3
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800174e:	e02b      	b.n	80017a8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b02      	cmp	r3, #2
 800175c:	d112      	bne.n	8001784 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	881a      	ldrh	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	1c9a      	adds	r2, r3, #2
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001778:	b29b      	uxth	r3, r3
 800177a:	3b01      	subs	r3, #1
 800177c:	b29a      	uxth	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	86da      	strh	r2, [r3, #54]	; 0x36
 8001782:	e011      	b.n	80017a8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001784:	f7fe ff26 	bl	80005d4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d803      	bhi.n	800179c <HAL_SPI_Transmit+0x158>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179a:	d102      	bne.n	80017a2 <HAL_SPI_Transmit+0x15e>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80017a6:	e074      	b.n	8001892 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ce      	bne.n	8001750 <HAL_SPI_Transmit+0x10c>
 80017b2:	e04c      	b.n	800184e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <HAL_SPI_Transmit+0x17e>
 80017bc:	8afb      	ldrh	r3, [r7, #22]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d140      	bne.n	8001844 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	330c      	adds	r3, #12
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80017e8:	e02c      	b.n	8001844 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d113      	bne.n	8001820 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	330c      	adds	r3, #12
 8001802:	7812      	ldrb	r2, [r2, #0]
 8001804:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001814:	b29b      	uxth	r3, r3
 8001816:	3b01      	subs	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	86da      	strh	r2, [r3, #54]	; 0x36
 800181e:	e011      	b.n	8001844 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001820:	f7fe fed8 	bl	80005d4 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d803      	bhi.n	8001838 <HAL_SPI_Transmit+0x1f4>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001836:	d102      	bne.n	800183e <HAL_SPI_Transmit+0x1fa>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d102      	bne.n	8001844 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001842:	e026      	b.n	8001892 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001848:	b29b      	uxth	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1cd      	bne.n	80017ea <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	6839      	ldr	r1, [r7, #0]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 fba4 	bl	8001fa0 <SPI_EndRxTxTransaction>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2220      	movs	r2, #32
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10a      	bne.n	8001882 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	77fb      	strb	r3, [r7, #31]
 800188e:	e000      	b.n	8001892 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001890:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80018a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018c8:	d112      	bne.n	80018f0 <HAL_SPI_Receive+0x44>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10e      	bne.n	80018f0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2204      	movs	r2, #4
 80018d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80018da:	88fa      	ldrh	r2, [r7, #6]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f8e9 	bl	8001abe <HAL_SPI_TransmitReceive>
 80018ec:	4603      	mov	r3, r0
 80018ee:	e0e2      	b.n	8001ab6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_SPI_Receive+0x52>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e0db      	b.n	8001ab6 <HAL_SPI_Receive+0x20a>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001906:	f7fe fe65 	bl	80005d4 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d002      	beq.n	800191e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001918:	2302      	movs	r3, #2
 800191a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800191c:	e0c2      	b.n	8001aa4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <HAL_SPI_Receive+0x7e>
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800192e:	e0b9      	b.n	8001aa4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2204      	movs	r2, #4
 8001934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	88fa      	ldrh	r2, [r7, #6]
 800194e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001976:	d107      	bne.n	8001988 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001986:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001992:	2b40      	cmp	r3, #64	; 0x40
 8001994:	d007      	beq.n	80019a6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d162      	bne.n	8001a74 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80019ae:	e02e      	b.n	8001a0e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d115      	bne.n	80019ea <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f103 020c 	add.w	r2, r3, #12
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	7812      	ldrb	r2, [r2, #0]
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019de:	b29b      	uxth	r3, r3
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80019e8:	e011      	b.n	8001a0e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019ea:	f7fe fdf3 	bl	80005d4 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d803      	bhi.n	8001a02 <HAL_SPI_Receive+0x156>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d102      	bne.n	8001a08 <HAL_SPI_Receive+0x15c>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001a0c:	e04a      	b.n	8001aa4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1cb      	bne.n	80019b0 <HAL_SPI_Receive+0x104>
 8001a18:	e031      	b.n	8001a7e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d113      	bne.n	8001a50 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a32:	b292      	uxth	r2, r2
 8001a34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	1c9a      	adds	r2, r3, #2
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a4e:	e011      	b.n	8001a74 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a50:	f7fe fdc0 	bl	80005d4 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d803      	bhi.n	8001a68 <HAL_SPI_Receive+0x1bc>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a66:	d102      	bne.n	8001a6e <HAL_SPI_Receive+0x1c2>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001a72:	e017      	b.n	8001aa4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1cd      	bne.n	8001a1a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	6839      	ldr	r1, [r7, #0]
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fa27 	bl	8001ed6 <SPI_EndRxTransaction>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2220      	movs	r2, #32
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	75fb      	strb	r3, [r7, #23]
 8001aa0:	e000      	b.n	8001aa4 <HAL_SPI_Receive+0x1f8>
  }

error :
 8001aa2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b08c      	sub	sp, #48	; 0x30
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001acc:	2301      	movs	r3, #1
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_SPI_TransmitReceive+0x26>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e18a      	b.n	8001dfa <HAL_SPI_TransmitReceive+0x33c>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aec:	f7fe fd72 	bl	80005d4 <HAL_GetTick>
 8001af0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d00f      	beq.n	8001b2e <HAL_SPI_TransmitReceive+0x70>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b14:	d107      	bne.n	8001b26 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <HAL_SPI_TransmitReceive+0x68>
 8001b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d003      	beq.n	8001b2e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001b26:	2302      	movs	r3, #2
 8001b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b2c:	e15b      	b.n	8001de6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_SPI_TransmitReceive+0x82>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <HAL_SPI_TransmitReceive+0x82>
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d103      	bne.n	8001b48 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b46:	e14e      	b.n	8001de6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d003      	beq.n	8001b5c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2205      	movs	r2, #5
 8001b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	887a      	ldrh	r2, [r7, #2]
 8001b72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	887a      	ldrh	r2, [r7, #2]
 8001b7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9c:	2b40      	cmp	r3, #64	; 0x40
 8001b9e:	d007      	beq.n	8001bb0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bb8:	d178      	bne.n	8001cac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_SPI_TransmitReceive+0x10a>
 8001bc2:	8b7b      	ldrh	r3, [r7, #26]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d166      	bne.n	8001c96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	881a      	ldrh	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	1c9a      	adds	r2, r3, #2
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bec:	e053      	b.n	8001c96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d11b      	bne.n	8001c34 <HAL_SPI_TransmitReceive+0x176>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d016      	beq.n	8001c34 <HAL_SPI_TransmitReceive+0x176>
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d113      	bne.n	8001c34 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	881a      	ldrh	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	1c9a      	adds	r2, r3, #2
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d119      	bne.n	8001c76 <HAL_SPI_TransmitReceive+0x1b8>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d014      	beq.n	8001c76 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c56:	b292      	uxth	r2, r2
 8001c58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5e:	1c9a      	adds	r2, r3, #2
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c72:	2301      	movs	r3, #1
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001c76:	f7fe fcad 	bl	80005d4 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d807      	bhi.n	8001c96 <HAL_SPI_TransmitReceive+0x1d8>
 8001c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d003      	beq.n	8001c96 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c94:	e0a7      	b.n	8001de6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1a6      	bne.n	8001bee <HAL_SPI_TransmitReceive+0x130>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1a1      	bne.n	8001bee <HAL_SPI_TransmitReceive+0x130>
 8001caa:	e07c      	b.n	8001da6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <HAL_SPI_TransmitReceive+0x1fc>
 8001cb4:	8b7b      	ldrh	r3, [r7, #26]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d16b      	bne.n	8001d92 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	330c      	adds	r3, #12
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ce0:	e057      	b.n	8001d92 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d11c      	bne.n	8001d2a <HAL_SPI_TransmitReceive+0x26c>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d017      	beq.n	8001d2a <HAL_SPI_TransmitReceive+0x26c>
 8001cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d114      	bne.n	8001d2a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	330c      	adds	r3, #12
 8001d0a:	7812      	ldrb	r2, [r2, #0]
 8001d0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d119      	bne.n	8001d6c <HAL_SPI_TransmitReceive+0x2ae>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d014      	beq.n	8001d6c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001d6c:	f7fe fc32 	bl	80005d4 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d803      	bhi.n	8001d84 <HAL_SPI_TransmitReceive+0x2c6>
 8001d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d82:	d102      	bne.n	8001d8a <HAL_SPI_TransmitReceive+0x2cc>
 8001d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d103      	bne.n	8001d92 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d90:	e029      	b.n	8001de6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1a2      	bne.n	8001ce2 <HAL_SPI_TransmitReceive+0x224>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d19d      	bne.n	8001ce2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f8f8 	bl	8001fa0 <SPI_EndRxTxTransaction>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001dc2:	e010      	b.n	8001de6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10b      	bne.n	8001de4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	e000      	b.n	8001de6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001de4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001df6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3730      	adds	r7, #48	; 0x30
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e12:	e04c      	b.n	8001eae <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1a:	d048      	beq.n	8001eae <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e1c:	f7fe fbda 	bl	80005d4 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d902      	bls.n	8001e32 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d13d      	bne.n	8001eae <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e4a:	d111      	bne.n	8001e70 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e54:	d004      	beq.n	8001e60 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5e:	d107      	bne.n	8001e70 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e78:	d10f      	bne.n	8001e9a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e00f      	b.n	8001ece <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	bf0c      	ite	eq
 8001ebe:	2301      	moveq	r3, #1
 8001ec0:	2300      	movne	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d1a3      	bne.n	8001e14 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af02      	add	r7, sp, #8
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eea:	d111      	bne.n	8001f10 <SPI_EndRxTransaction+0x3a>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ef4:	d004      	beq.n	8001f00 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efe:	d107      	bne.n	8001f10 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f0e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f18:	d12a      	bne.n	8001f70 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d012      	beq.n	8001f4a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7ff ff67 	bl	8001e02 <SPI_WaitFlagStateUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d02d      	beq.n	8001f96 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f043 0220 	orr.w	r2, r3, #32
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e026      	b.n	8001f98 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2200      	movs	r2, #0
 8001f52:	2101      	movs	r1, #1
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f7ff ff54 	bl	8001e02 <SPI_WaitFlagStateUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01a      	beq.n	8001f96 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f043 0220 	orr.w	r2, r3, #32
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e013      	b.n	8001f98 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2200      	movs	r2, #0
 8001f78:	2101      	movs	r1, #1
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f7ff ff41 	bl	8001e02 <SPI_WaitFlagStateUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	f043 0220 	orr.w	r2, r3, #32
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e000      	b.n	8001f98 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <SPI_EndRxTxTransaction+0x7c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1b      	ldr	r2, [pc, #108]	; (8002020 <SPI_EndRxTxTransaction+0x80>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	0d5b      	lsrs	r3, r3, #21
 8001fb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fbc:	fb02 f303 	mul.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fca:	d112      	bne.n	8001ff2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7ff ff13 	bl	8001e02 <SPI_WaitFlagStateUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f043 0220 	orr.w	r2, r3, #32
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e00f      	b.n	8002012 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002008:	2b80      	cmp	r3, #128	; 0x80
 800200a:	d0f2      	beq.n	8001ff2 <SPI_EndRxTxTransaction+0x52>
 800200c:	e000      	b.n	8002010 <SPI_EndRxTxTransaction+0x70>
        break;
 800200e:	bf00      	nop
  }

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000008 	.word	0x20000008
 8002020:	165e9f81 	.word	0x165e9f81

08002024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e01d      	b.n	8002072 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f001 ffa0 	bl	8003f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f000 f9bc 	bl	80023e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e01d      	b.n	80020c8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d106      	bne.n	80020a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f815 	bl	80020d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2202      	movs	r2, #2
 80020aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3304      	adds	r3, #4
 80020b6:	4619      	mov	r1, r3
 80020b8:	4610      	mov	r0, r2
 80020ba:	f000 f991 	bl	80023e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e0b4      	b.n	8002268 <HAL_TIM_PWM_ConfigChannel+0x184>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2202      	movs	r2, #2
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b0c      	cmp	r3, #12
 8002112:	f200 809f 	bhi.w	8002254 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002116:	a201      	add	r2, pc, #4	; (adr r2, 800211c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	08002151 	.word	0x08002151
 8002120:	08002255 	.word	0x08002255
 8002124:	08002255 	.word	0x08002255
 8002128:	08002255 	.word	0x08002255
 800212c:	08002191 	.word	0x08002191
 8002130:	08002255 	.word	0x08002255
 8002134:	08002255 	.word	0x08002255
 8002138:	08002255 	.word	0x08002255
 800213c:	080021d3 	.word	0x080021d3
 8002140:	08002255 	.word	0x08002255
 8002144:	08002255 	.word	0x08002255
 8002148:	08002255 	.word	0x08002255
 800214c:	08002213 	.word	0x08002213
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f9e2 	bl	8002520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0208 	orr.w	r2, r2, #8
 800216a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0204 	bic.w	r2, r2, #4
 800217a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6999      	ldr	r1, [r3, #24]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	619a      	str	r2, [r3, #24]
      break;
 800218e:	e062      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fa32 	bl	8002600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6999      	ldr	r1, [r3, #24]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	021a      	lsls	r2, r3, #8
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	619a      	str	r2, [r3, #24]
      break;
 80021d0:	e041      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68b9      	ldr	r1, [r7, #8]
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fa87 	bl	80026ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0208 	orr.w	r2, r2, #8
 80021ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	69da      	ldr	r2, [r3, #28]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0204 	bic.w	r2, r2, #4
 80021fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69d9      	ldr	r1, [r3, #28]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	61da      	str	r2, [r3, #28]
      break;
 8002210:	e021      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fadb 	bl	80027d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800222c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69d9      	ldr	r1, [r3, #28]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	021a      	lsls	r2, r3, #8
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	61da      	str	r2, [r3, #28]
      break;
 8002252:	e000      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002254:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_TIM_ConfigClockSource+0x18>
 8002284:	2302      	movs	r3, #2
 8002286:	e0a6      	b.n	80023d6 <HAL_TIM_ConfigClockSource+0x166>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b40      	cmp	r3, #64	; 0x40
 80022be:	d067      	beq.n	8002390 <HAL_TIM_ConfigClockSource+0x120>
 80022c0:	2b40      	cmp	r3, #64	; 0x40
 80022c2:	d80b      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x6c>
 80022c4:	2b10      	cmp	r3, #16
 80022c6:	d073      	beq.n	80023b0 <HAL_TIM_ConfigClockSource+0x140>
 80022c8:	2b10      	cmp	r3, #16
 80022ca:	d802      	bhi.n	80022d2 <HAL_TIM_ConfigClockSource+0x62>
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d06f      	beq.n	80023b0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80022d0:	e078      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d06c      	beq.n	80023b0 <HAL_TIM_ConfigClockSource+0x140>
 80022d6:	2b30      	cmp	r3, #48	; 0x30
 80022d8:	d06a      	beq.n	80023b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80022da:	e073      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80022dc:	2b70      	cmp	r3, #112	; 0x70
 80022de:	d00d      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x8c>
 80022e0:	2b70      	cmp	r3, #112	; 0x70
 80022e2:	d804      	bhi.n	80022ee <HAL_TIM_ConfigClockSource+0x7e>
 80022e4:	2b50      	cmp	r3, #80	; 0x50
 80022e6:	d033      	beq.n	8002350 <HAL_TIM_ConfigClockSource+0xe0>
 80022e8:	2b60      	cmp	r3, #96	; 0x60
 80022ea:	d041      	beq.n	8002370 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80022ec:	e06a      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80022ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f2:	d066      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0x152>
 80022f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f8:	d017      	beq.n	800232a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80022fa:	e063      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6899      	ldr	r1, [r3, #8]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f000 fb32 	bl	8002974 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800231e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	609a      	str	r2, [r3, #8]
      break;
 8002328:	e04c      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6899      	ldr	r1, [r3, #8]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f000 fb1b 	bl	8002974 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800234c:	609a      	str	r2, [r3, #8]
      break;
 800234e:	e039      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	461a      	mov	r2, r3
 800235e:	f000 fa8f 	bl	8002880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2150      	movs	r1, #80	; 0x50
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fae8 	bl	800293e <TIM_ITRx_SetConfig>
      break;
 800236e:	e029      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	461a      	mov	r2, r3
 800237e:	f000 faae 	bl	80028de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2160      	movs	r1, #96	; 0x60
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fad8 	bl	800293e <TIM_ITRx_SetConfig>
      break;
 800238e:	e019      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	461a      	mov	r2, r3
 800239e:	f000 fa6f 	bl	8002880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2140      	movs	r1, #64	; 0x40
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fac8 	bl	800293e <TIM_ITRx_SetConfig>
      break;
 80023ae:	e009      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	4610      	mov	r0, r2
 80023bc:	f000 fabf 	bl	800293e <TIM_ITRx_SetConfig>
      break;
 80023c0:	e000      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80023c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a40      	ldr	r2, [pc, #256]	; (80024f4 <TIM_Base_SetConfig+0x114>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d013      	beq.n	8002420 <TIM_Base_SetConfig+0x40>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fe:	d00f      	beq.n	8002420 <TIM_Base_SetConfig+0x40>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a3d      	ldr	r2, [pc, #244]	; (80024f8 <TIM_Base_SetConfig+0x118>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00b      	beq.n	8002420 <TIM_Base_SetConfig+0x40>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a3c      	ldr	r2, [pc, #240]	; (80024fc <TIM_Base_SetConfig+0x11c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <TIM_Base_SetConfig+0x40>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a3b      	ldr	r2, [pc, #236]	; (8002500 <TIM_Base_SetConfig+0x120>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d003      	beq.n	8002420 <TIM_Base_SetConfig+0x40>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a3a      	ldr	r2, [pc, #232]	; (8002504 <TIM_Base_SetConfig+0x124>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d108      	bne.n	8002432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a2f      	ldr	r2, [pc, #188]	; (80024f4 <TIM_Base_SetConfig+0x114>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d02b      	beq.n	8002492 <TIM_Base_SetConfig+0xb2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002440:	d027      	beq.n	8002492 <TIM_Base_SetConfig+0xb2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a2c      	ldr	r2, [pc, #176]	; (80024f8 <TIM_Base_SetConfig+0x118>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d023      	beq.n	8002492 <TIM_Base_SetConfig+0xb2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a2b      	ldr	r2, [pc, #172]	; (80024fc <TIM_Base_SetConfig+0x11c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d01f      	beq.n	8002492 <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a2a      	ldr	r2, [pc, #168]	; (8002500 <TIM_Base_SetConfig+0x120>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01b      	beq.n	8002492 <TIM_Base_SetConfig+0xb2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a29      	ldr	r2, [pc, #164]	; (8002504 <TIM_Base_SetConfig+0x124>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d017      	beq.n	8002492 <TIM_Base_SetConfig+0xb2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a28      	ldr	r2, [pc, #160]	; (8002508 <TIM_Base_SetConfig+0x128>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <TIM_Base_SetConfig+0xb2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <TIM_Base_SetConfig+0x12c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00f      	beq.n	8002492 <TIM_Base_SetConfig+0xb2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a26      	ldr	r2, [pc, #152]	; (8002510 <TIM_Base_SetConfig+0x130>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00b      	beq.n	8002492 <TIM_Base_SetConfig+0xb2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a25      	ldr	r2, [pc, #148]	; (8002514 <TIM_Base_SetConfig+0x134>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <TIM_Base_SetConfig+0xb2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a24      	ldr	r2, [pc, #144]	; (8002518 <TIM_Base_SetConfig+0x138>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d003      	beq.n	8002492 <TIM_Base_SetConfig+0xb2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a23      	ldr	r2, [pc, #140]	; (800251c <TIM_Base_SetConfig+0x13c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d108      	bne.n	80024a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <TIM_Base_SetConfig+0x114>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d003      	beq.n	80024d8 <TIM_Base_SetConfig+0xf8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a0c      	ldr	r2, [pc, #48]	; (8002504 <TIM_Base_SetConfig+0x124>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d103      	bne.n	80024e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	615a      	str	r2, [r3, #20]
}
 80024e6:	bf00      	nop
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40000400 	.word	0x40000400
 80024fc:	40000800 	.word	0x40000800
 8002500:	40000c00 	.word	0x40000c00
 8002504:	40010400 	.word	0x40010400
 8002508:	40014000 	.word	0x40014000
 800250c:	40014400 	.word	0x40014400
 8002510:	40014800 	.word	0x40014800
 8002514:	40001800 	.word	0x40001800
 8002518:	40001c00 	.word	0x40001c00
 800251c:	40002000 	.word	0x40002000

08002520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	f023 0201 	bic.w	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0303 	bic.w	r3, r3, #3
 8002556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f023 0302 	bic.w	r3, r3, #2
 8002568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <TIM_OC1_SetConfig+0xd8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d003      	beq.n	8002584 <TIM_OC1_SetConfig+0x64>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a1f      	ldr	r2, [pc, #124]	; (80025fc <TIM_OC1_SetConfig+0xdc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d10c      	bne.n	800259e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f023 0308 	bic.w	r3, r3, #8
 800258a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a15      	ldr	r2, [pc, #84]	; (80025f8 <TIM_OC1_SetConfig+0xd8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d003      	beq.n	80025ae <TIM_OC1_SetConfig+0x8e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a14      	ldr	r2, [pc, #80]	; (80025fc <TIM_OC1_SetConfig+0xdc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d111      	bne.n	80025d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	621a      	str	r2, [r3, #32]
}
 80025ec:	bf00      	nop
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40010000 	.word	0x40010000
 80025fc:	40010400 	.word	0x40010400

08002600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	f023 0210 	bic.w	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800262e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f023 0320 	bic.w	r3, r3, #32
 800264a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <TIM_OC2_SetConfig+0xe4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d003      	beq.n	8002668 <TIM_OC2_SetConfig+0x68>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <TIM_OC2_SetConfig+0xe8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10d      	bne.n	8002684 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800266e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002682:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <TIM_OC2_SetConfig+0xe4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d003      	beq.n	8002694 <TIM_OC2_SetConfig+0x94>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <TIM_OC2_SetConfig+0xe8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d113      	bne.n	80026bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800269a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	621a      	str	r2, [r3, #32]
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40010000 	.word	0x40010000
 80026e8:	40010400 	.word	0x40010400

080026ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0303 	bic.w	r3, r3, #3
 8002722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a21      	ldr	r2, [pc, #132]	; (80027cc <TIM_OC3_SetConfig+0xe0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d003      	beq.n	8002752 <TIM_OC3_SetConfig+0x66>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <TIM_OC3_SetConfig+0xe4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d10d      	bne.n	800276e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800276c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a16      	ldr	r2, [pc, #88]	; (80027cc <TIM_OC3_SetConfig+0xe0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d003      	beq.n	800277e <TIM_OC3_SetConfig+0x92>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <TIM_OC3_SetConfig+0xe4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d113      	bne.n	80027a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800278c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	621a      	str	r2, [r3, #32]
}
 80027c0:	bf00      	nop
 80027c2:	371c      	adds	r7, #28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40010000 	.word	0x40010000
 80027d0:	40010400 	.word	0x40010400

080027d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800281e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	031b      	lsls	r3, r3, #12
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <TIM_OC4_SetConfig+0xa4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d003      	beq.n	800283c <TIM_OC4_SetConfig+0x68>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a11      	ldr	r2, [pc, #68]	; (800287c <TIM_OC4_SetConfig+0xa8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d109      	bne.n	8002850 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002842:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	019b      	lsls	r3, r3, #6
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	621a      	str	r2, [r3, #32]
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40010000 	.word	0x40010000
 800287c:	40010400 	.word	0x40010400

08002880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	f023 0201 	bic.w	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f023 030a 	bic.w	r3, r3, #10
 80028bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	621a      	str	r2, [r3, #32]
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028de:	b480      	push	{r7}
 80028e0:	b087      	sub	sp, #28
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f023 0210 	bic.w	r2, r3, #16
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	031b      	lsls	r3, r3, #12
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800291a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	621a      	str	r2, [r3, #32]
}
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	f043 0307 	orr.w	r3, r3, #7
 8002960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	609a      	str	r2, [r3, #8]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800298e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	021a      	lsls	r2, r3, #8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	431a      	orrs	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4313      	orrs	r3, r2
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	609a      	str	r2, [r3, #8]
}
 80029a8:	bf00      	nop
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e05a      	b.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a21      	ldr	r2, [pc, #132]	; (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d022      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a18:	d01d      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1d      	ldr	r2, [pc, #116]	; (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d018      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1a      	ldr	r2, [pc, #104]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10c      	bne.n	8002a70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40010000 	.word	0x40010000
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40000800 	.word	0x40000800
 8002a9c:	40000c00 	.word	0x40000c00
 8002aa0:	40010400 	.word	0x40010400
 8002aa4:	40014000 	.word	0x40014000
 8002aa8:	40001800 	.word	0x40001800

08002aac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e03d      	b.n	8002b44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e03f      	b.n	8002be2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f001 fa90 	bl	800409c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2224      	movs	r2, #36	; 0x24
 8002b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f90b 	bl	8002db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b088      	sub	sp, #32
 8002bee:	af02      	add	r7, sp, #8
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	603b      	str	r3, [r7, #0]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	f040 8083 	bne.w	8002d12 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Transmit+0x2e>
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e07b      	b.n	8002d14 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Transmit+0x40>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e074      	b.n	8002d14 <HAL_UART_Transmit+0x12a>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2221      	movs	r2, #33	; 0x21
 8002c3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c40:	f7fd fcc8 	bl	80005d4 <HAL_GetTick>
 8002c44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002c5a:	e042      	b.n	8002ce2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c72:	d122      	bne.n	8002cba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f84c 	bl	8002d1c <UART_WaitOnFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e042      	b.n	8002d14 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	3302      	adds	r3, #2
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	e017      	b.n	8002ce2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	e013      	b.n	8002ce2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f829 	bl	8002d1c <UART_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e01f      	b.n	8002d14 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	60ba      	str	r2, [r7, #8]
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1b7      	bne.n	8002c5c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2140      	movs	r1, #64	; 0x40
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f810 	bl	8002d1c <UART_WaitOnFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e006      	b.n	8002d14 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e000      	b.n	8002d14 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
  }
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d2c:	e02c      	b.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d028      	beq.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d3c:	f7fd fc4a 	bl	80005d4 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d21d      	bcs.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e00f      	b.n	8002da8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4013      	ands	r3, r2
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d0c3      	beq.n	8002d2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	b085      	sub	sp, #20
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002df2:	f023 030c 	bic.w	r3, r3, #12
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e1e:	f040 818b 	bne.w	8003138 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4ac1      	ldr	r2, [pc, #772]	; (800312c <UART_SetConfig+0x37c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d005      	beq.n	8002e38 <UART_SetConfig+0x88>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4abf      	ldr	r2, [pc, #764]	; (8003130 <UART_SetConfig+0x380>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	f040 80bd 	bne.w	8002fb2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e38:	f7fd ff92 	bl	8000d60 <HAL_RCC_GetPCLK2Freq>
 8002e3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	461d      	mov	r5, r3
 8002e42:	f04f 0600 	mov.w	r6, #0
 8002e46:	46a8      	mov	r8, r5
 8002e48:	46b1      	mov	r9, r6
 8002e4a:	eb18 0308 	adds.w	r3, r8, r8
 8002e4e:	eb49 0409 	adc.w	r4, r9, r9
 8002e52:	4698      	mov	r8, r3
 8002e54:	46a1      	mov	r9, r4
 8002e56:	eb18 0805 	adds.w	r8, r8, r5
 8002e5a:	eb49 0906 	adc.w	r9, r9, r6
 8002e5e:	f04f 0100 	mov.w	r1, #0
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e72:	4688      	mov	r8, r1
 8002e74:	4691      	mov	r9, r2
 8002e76:	eb18 0005 	adds.w	r0, r8, r5
 8002e7a:	eb49 0106 	adc.w	r1, r9, r6
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	461d      	mov	r5, r3
 8002e84:	f04f 0600 	mov.w	r6, #0
 8002e88:	196b      	adds	r3, r5, r5
 8002e8a:	eb46 0406 	adc.w	r4, r6, r6
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4623      	mov	r3, r4
 8002e92:	f7fd f9b9 	bl	8000208 <__aeabi_uldivmod>
 8002e96:	4603      	mov	r3, r0
 8002e98:	460c      	mov	r4, r1
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4ba5      	ldr	r3, [pc, #660]	; (8003134 <UART_SetConfig+0x384>)
 8002e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	461d      	mov	r5, r3
 8002eac:	f04f 0600 	mov.w	r6, #0
 8002eb0:	46a9      	mov	r9, r5
 8002eb2:	46b2      	mov	sl, r6
 8002eb4:	eb19 0309 	adds.w	r3, r9, r9
 8002eb8:	eb4a 040a 	adc.w	r4, sl, sl
 8002ebc:	4699      	mov	r9, r3
 8002ebe:	46a2      	mov	sl, r4
 8002ec0:	eb19 0905 	adds.w	r9, r9, r5
 8002ec4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ec8:	f04f 0100 	mov.w	r1, #0
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ed4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ed8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002edc:	4689      	mov	r9, r1
 8002ede:	4692      	mov	sl, r2
 8002ee0:	eb19 0005 	adds.w	r0, r9, r5
 8002ee4:	eb4a 0106 	adc.w	r1, sl, r6
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	461d      	mov	r5, r3
 8002eee:	f04f 0600 	mov.w	r6, #0
 8002ef2:	196b      	adds	r3, r5, r5
 8002ef4:	eb46 0406 	adc.w	r4, r6, r6
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4623      	mov	r3, r4
 8002efc:	f7fd f984 	bl	8000208 <__aeabi_uldivmod>
 8002f00:	4603      	mov	r3, r0
 8002f02:	460c      	mov	r4, r1
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b8b      	ldr	r3, [pc, #556]	; (8003134 <UART_SetConfig+0x384>)
 8002f08:	fba3 1302 	umull	r1, r3, r3, r2
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	2164      	movs	r1, #100	; 0x64
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	3332      	adds	r3, #50	; 0x32
 8002f1a:	4a86      	ldr	r2, [pc, #536]	; (8003134 <UART_SetConfig+0x384>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f28:	4498      	add	r8, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	f04f 0600 	mov.w	r6, #0
 8002f32:	46a9      	mov	r9, r5
 8002f34:	46b2      	mov	sl, r6
 8002f36:	eb19 0309 	adds.w	r3, r9, r9
 8002f3a:	eb4a 040a 	adc.w	r4, sl, sl
 8002f3e:	4699      	mov	r9, r3
 8002f40:	46a2      	mov	sl, r4
 8002f42:	eb19 0905 	adds.w	r9, r9, r5
 8002f46:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f5e:	4689      	mov	r9, r1
 8002f60:	4692      	mov	sl, r2
 8002f62:	eb19 0005 	adds.w	r0, r9, r5
 8002f66:	eb4a 0106 	adc.w	r1, sl, r6
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	461d      	mov	r5, r3
 8002f70:	f04f 0600 	mov.w	r6, #0
 8002f74:	196b      	adds	r3, r5, r5
 8002f76:	eb46 0406 	adc.w	r4, r6, r6
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4623      	mov	r3, r4
 8002f7e:	f7fd f943 	bl	8000208 <__aeabi_uldivmod>
 8002f82:	4603      	mov	r3, r0
 8002f84:	460c      	mov	r4, r1
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <UART_SetConfig+0x384>)
 8002f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2164      	movs	r1, #100	; 0x64
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	3332      	adds	r3, #50	; 0x32
 8002f9c:	4a65      	ldr	r2, [pc, #404]	; (8003134 <UART_SetConfig+0x384>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	f003 0207 	and.w	r2, r3, #7
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4442      	add	r2, r8
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	e26f      	b.n	8003492 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fb2:	f7fd fec1 	bl	8000d38 <HAL_RCC_GetPCLK1Freq>
 8002fb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	461d      	mov	r5, r3
 8002fbc:	f04f 0600 	mov.w	r6, #0
 8002fc0:	46a8      	mov	r8, r5
 8002fc2:	46b1      	mov	r9, r6
 8002fc4:	eb18 0308 	adds.w	r3, r8, r8
 8002fc8:	eb49 0409 	adc.w	r4, r9, r9
 8002fcc:	4698      	mov	r8, r3
 8002fce:	46a1      	mov	r9, r4
 8002fd0:	eb18 0805 	adds.w	r8, r8, r5
 8002fd4:	eb49 0906 	adc.w	r9, r9, r6
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fe4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fe8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fec:	4688      	mov	r8, r1
 8002fee:	4691      	mov	r9, r2
 8002ff0:	eb18 0005 	adds.w	r0, r8, r5
 8002ff4:	eb49 0106 	adc.w	r1, r9, r6
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	461d      	mov	r5, r3
 8002ffe:	f04f 0600 	mov.w	r6, #0
 8003002:	196b      	adds	r3, r5, r5
 8003004:	eb46 0406 	adc.w	r4, r6, r6
 8003008:	461a      	mov	r2, r3
 800300a:	4623      	mov	r3, r4
 800300c:	f7fd f8fc 	bl	8000208 <__aeabi_uldivmod>
 8003010:	4603      	mov	r3, r0
 8003012:	460c      	mov	r4, r1
 8003014:	461a      	mov	r2, r3
 8003016:	4b47      	ldr	r3, [pc, #284]	; (8003134 <UART_SetConfig+0x384>)
 8003018:	fba3 2302 	umull	r2, r3, r3, r2
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	461d      	mov	r5, r3
 8003026:	f04f 0600 	mov.w	r6, #0
 800302a:	46a9      	mov	r9, r5
 800302c:	46b2      	mov	sl, r6
 800302e:	eb19 0309 	adds.w	r3, r9, r9
 8003032:	eb4a 040a 	adc.w	r4, sl, sl
 8003036:	4699      	mov	r9, r3
 8003038:	46a2      	mov	sl, r4
 800303a:	eb19 0905 	adds.w	r9, r9, r5
 800303e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003042:	f04f 0100 	mov.w	r1, #0
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800304e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003052:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003056:	4689      	mov	r9, r1
 8003058:	4692      	mov	sl, r2
 800305a:	eb19 0005 	adds.w	r0, r9, r5
 800305e:	eb4a 0106 	adc.w	r1, sl, r6
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	461d      	mov	r5, r3
 8003068:	f04f 0600 	mov.w	r6, #0
 800306c:	196b      	adds	r3, r5, r5
 800306e:	eb46 0406 	adc.w	r4, r6, r6
 8003072:	461a      	mov	r2, r3
 8003074:	4623      	mov	r3, r4
 8003076:	f7fd f8c7 	bl	8000208 <__aeabi_uldivmod>
 800307a:	4603      	mov	r3, r0
 800307c:	460c      	mov	r4, r1
 800307e:	461a      	mov	r2, r3
 8003080:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <UART_SetConfig+0x384>)
 8003082:	fba3 1302 	umull	r1, r3, r3, r2
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2164      	movs	r1, #100	; 0x64
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	3332      	adds	r3, #50	; 0x32
 8003094:	4a27      	ldr	r2, [pc, #156]	; (8003134 <UART_SetConfig+0x384>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030a2:	4498      	add	r8, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	461d      	mov	r5, r3
 80030a8:	f04f 0600 	mov.w	r6, #0
 80030ac:	46a9      	mov	r9, r5
 80030ae:	46b2      	mov	sl, r6
 80030b0:	eb19 0309 	adds.w	r3, r9, r9
 80030b4:	eb4a 040a 	adc.w	r4, sl, sl
 80030b8:	4699      	mov	r9, r3
 80030ba:	46a2      	mov	sl, r4
 80030bc:	eb19 0905 	adds.w	r9, r9, r5
 80030c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030d8:	4689      	mov	r9, r1
 80030da:	4692      	mov	sl, r2
 80030dc:	eb19 0005 	adds.w	r0, r9, r5
 80030e0:	eb4a 0106 	adc.w	r1, sl, r6
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	461d      	mov	r5, r3
 80030ea:	f04f 0600 	mov.w	r6, #0
 80030ee:	196b      	adds	r3, r5, r5
 80030f0:	eb46 0406 	adc.w	r4, r6, r6
 80030f4:	461a      	mov	r2, r3
 80030f6:	4623      	mov	r3, r4
 80030f8:	f7fd f886 	bl	8000208 <__aeabi_uldivmod>
 80030fc:	4603      	mov	r3, r0
 80030fe:	460c      	mov	r4, r1
 8003100:	461a      	mov	r2, r3
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <UART_SetConfig+0x384>)
 8003104:	fba3 1302 	umull	r1, r3, r3, r2
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	2164      	movs	r1, #100	; 0x64
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	3332      	adds	r3, #50	; 0x32
 8003116:	4a07      	ldr	r2, [pc, #28]	; (8003134 <UART_SetConfig+0x384>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	f003 0207 	and.w	r2, r3, #7
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4442      	add	r2, r8
 8003128:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800312a:	e1b2      	b.n	8003492 <UART_SetConfig+0x6e2>
 800312c:	40011000 	.word	0x40011000
 8003130:	40011400 	.word	0x40011400
 8003134:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4ad7      	ldr	r2, [pc, #860]	; (800349c <UART_SetConfig+0x6ec>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d005      	beq.n	800314e <UART_SetConfig+0x39e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4ad6      	ldr	r2, [pc, #856]	; (80034a0 <UART_SetConfig+0x6f0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	f040 80d1 	bne.w	80032f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800314e:	f7fd fe07 	bl	8000d60 <HAL_RCC_GetPCLK2Freq>
 8003152:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	469a      	mov	sl, r3
 8003158:	f04f 0b00 	mov.w	fp, #0
 800315c:	46d0      	mov	r8, sl
 800315e:	46d9      	mov	r9, fp
 8003160:	eb18 0308 	adds.w	r3, r8, r8
 8003164:	eb49 0409 	adc.w	r4, r9, r9
 8003168:	4698      	mov	r8, r3
 800316a:	46a1      	mov	r9, r4
 800316c:	eb18 080a 	adds.w	r8, r8, sl
 8003170:	eb49 090b 	adc.w	r9, r9, fp
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003180:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003184:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003188:	4688      	mov	r8, r1
 800318a:	4691      	mov	r9, r2
 800318c:	eb1a 0508 	adds.w	r5, sl, r8
 8003190:	eb4b 0609 	adc.w	r6, fp, r9
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4619      	mov	r1, r3
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	f04f 0400 	mov.w	r4, #0
 80031a6:	0094      	lsls	r4, r2, #2
 80031a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031ac:	008b      	lsls	r3, r1, #2
 80031ae:	461a      	mov	r2, r3
 80031b0:	4623      	mov	r3, r4
 80031b2:	4628      	mov	r0, r5
 80031b4:	4631      	mov	r1, r6
 80031b6:	f7fd f827 	bl	8000208 <__aeabi_uldivmod>
 80031ba:	4603      	mov	r3, r0
 80031bc:	460c      	mov	r4, r1
 80031be:	461a      	mov	r2, r3
 80031c0:	4bb8      	ldr	r3, [pc, #736]	; (80034a4 <UART_SetConfig+0x6f4>)
 80031c2:	fba3 2302 	umull	r2, r3, r3, r2
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	469b      	mov	fp, r3
 80031d0:	f04f 0c00 	mov.w	ip, #0
 80031d4:	46d9      	mov	r9, fp
 80031d6:	46e2      	mov	sl, ip
 80031d8:	eb19 0309 	adds.w	r3, r9, r9
 80031dc:	eb4a 040a 	adc.w	r4, sl, sl
 80031e0:	4699      	mov	r9, r3
 80031e2:	46a2      	mov	sl, r4
 80031e4:	eb19 090b 	adds.w	r9, r9, fp
 80031e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031ec:	f04f 0100 	mov.w	r1, #0
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003200:	4689      	mov	r9, r1
 8003202:	4692      	mov	sl, r2
 8003204:	eb1b 0509 	adds.w	r5, fp, r9
 8003208:	eb4c 060a 	adc.w	r6, ip, sl
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4619      	mov	r1, r3
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	f04f 0400 	mov.w	r4, #0
 800321e:	0094      	lsls	r4, r2, #2
 8003220:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003224:	008b      	lsls	r3, r1, #2
 8003226:	461a      	mov	r2, r3
 8003228:	4623      	mov	r3, r4
 800322a:	4628      	mov	r0, r5
 800322c:	4631      	mov	r1, r6
 800322e:	f7fc ffeb 	bl	8000208 <__aeabi_uldivmod>
 8003232:	4603      	mov	r3, r0
 8003234:	460c      	mov	r4, r1
 8003236:	461a      	mov	r2, r3
 8003238:	4b9a      	ldr	r3, [pc, #616]	; (80034a4 <UART_SetConfig+0x6f4>)
 800323a:	fba3 1302 	umull	r1, r3, r3, r2
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	2164      	movs	r1, #100	; 0x64
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	3332      	adds	r3, #50	; 0x32
 800324c:	4a95      	ldr	r2, [pc, #596]	; (80034a4 <UART_SetConfig+0x6f4>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003258:	4498      	add	r8, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	469b      	mov	fp, r3
 800325e:	f04f 0c00 	mov.w	ip, #0
 8003262:	46d9      	mov	r9, fp
 8003264:	46e2      	mov	sl, ip
 8003266:	eb19 0309 	adds.w	r3, r9, r9
 800326a:	eb4a 040a 	adc.w	r4, sl, sl
 800326e:	4699      	mov	r9, r3
 8003270:	46a2      	mov	sl, r4
 8003272:	eb19 090b 	adds.w	r9, r9, fp
 8003276:	eb4a 0a0c 	adc.w	sl, sl, ip
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003286:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800328a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800328e:	4689      	mov	r9, r1
 8003290:	4692      	mov	sl, r2
 8003292:	eb1b 0509 	adds.w	r5, fp, r9
 8003296:	eb4c 060a 	adc.w	r6, ip, sl
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4619      	mov	r1, r3
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	0094      	lsls	r4, r2, #2
 80032ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032b2:	008b      	lsls	r3, r1, #2
 80032b4:	461a      	mov	r2, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	4628      	mov	r0, r5
 80032ba:	4631      	mov	r1, r6
 80032bc:	f7fc ffa4 	bl	8000208 <__aeabi_uldivmod>
 80032c0:	4603      	mov	r3, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b77      	ldr	r3, [pc, #476]	; (80034a4 <UART_SetConfig+0x6f4>)
 80032c8:	fba3 1302 	umull	r1, r3, r3, r2
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	2164      	movs	r1, #100	; 0x64
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	3332      	adds	r3, #50	; 0x32
 80032da:	4a72      	ldr	r2, [pc, #456]	; (80034a4 <UART_SetConfig+0x6f4>)
 80032dc:	fba2 2303 	umull	r2, r3, r2, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	f003 020f 	and.w	r2, r3, #15
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4442      	add	r2, r8
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	e0d0      	b.n	8003492 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80032f0:	f7fd fd22 	bl	8000d38 <HAL_RCC_GetPCLK1Freq>
 80032f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	469a      	mov	sl, r3
 80032fa:	f04f 0b00 	mov.w	fp, #0
 80032fe:	46d0      	mov	r8, sl
 8003300:	46d9      	mov	r9, fp
 8003302:	eb18 0308 	adds.w	r3, r8, r8
 8003306:	eb49 0409 	adc.w	r4, r9, r9
 800330a:	4698      	mov	r8, r3
 800330c:	46a1      	mov	r9, r4
 800330e:	eb18 080a 	adds.w	r8, r8, sl
 8003312:	eb49 090b 	adc.w	r9, r9, fp
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003322:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003326:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800332a:	4688      	mov	r8, r1
 800332c:	4691      	mov	r9, r2
 800332e:	eb1a 0508 	adds.w	r5, sl, r8
 8003332:	eb4b 0609 	adc.w	r6, fp, r9
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4619      	mov	r1, r3
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	f04f 0400 	mov.w	r4, #0
 8003348:	0094      	lsls	r4, r2, #2
 800334a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800334e:	008b      	lsls	r3, r1, #2
 8003350:	461a      	mov	r2, r3
 8003352:	4623      	mov	r3, r4
 8003354:	4628      	mov	r0, r5
 8003356:	4631      	mov	r1, r6
 8003358:	f7fc ff56 	bl	8000208 <__aeabi_uldivmod>
 800335c:	4603      	mov	r3, r0
 800335e:	460c      	mov	r4, r1
 8003360:	461a      	mov	r2, r3
 8003362:	4b50      	ldr	r3, [pc, #320]	; (80034a4 <UART_SetConfig+0x6f4>)
 8003364:	fba3 2302 	umull	r2, r3, r3, r2
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	469b      	mov	fp, r3
 8003372:	f04f 0c00 	mov.w	ip, #0
 8003376:	46d9      	mov	r9, fp
 8003378:	46e2      	mov	sl, ip
 800337a:	eb19 0309 	adds.w	r3, r9, r9
 800337e:	eb4a 040a 	adc.w	r4, sl, sl
 8003382:	4699      	mov	r9, r3
 8003384:	46a2      	mov	sl, r4
 8003386:	eb19 090b 	adds.w	r9, r9, fp
 800338a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800339a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800339e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033a2:	4689      	mov	r9, r1
 80033a4:	4692      	mov	sl, r2
 80033a6:	eb1b 0509 	adds.w	r5, fp, r9
 80033aa:	eb4c 060a 	adc.w	r6, ip, sl
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4619      	mov	r1, r3
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	f04f 0400 	mov.w	r4, #0
 80033c0:	0094      	lsls	r4, r2, #2
 80033c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033c6:	008b      	lsls	r3, r1, #2
 80033c8:	461a      	mov	r2, r3
 80033ca:	4623      	mov	r3, r4
 80033cc:	4628      	mov	r0, r5
 80033ce:	4631      	mov	r1, r6
 80033d0:	f7fc ff1a 	bl	8000208 <__aeabi_uldivmod>
 80033d4:	4603      	mov	r3, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	461a      	mov	r2, r3
 80033da:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <UART_SetConfig+0x6f4>)
 80033dc:	fba3 1302 	umull	r1, r3, r3, r2
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	2164      	movs	r1, #100	; 0x64
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	3332      	adds	r3, #50	; 0x32
 80033ee:	4a2d      	ldr	r2, [pc, #180]	; (80034a4 <UART_SetConfig+0x6f4>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033fa:	4498      	add	r8, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	469b      	mov	fp, r3
 8003400:	f04f 0c00 	mov.w	ip, #0
 8003404:	46d9      	mov	r9, fp
 8003406:	46e2      	mov	sl, ip
 8003408:	eb19 0309 	adds.w	r3, r9, r9
 800340c:	eb4a 040a 	adc.w	r4, sl, sl
 8003410:	4699      	mov	r9, r3
 8003412:	46a2      	mov	sl, r4
 8003414:	eb19 090b 	adds.w	r9, r9, fp
 8003418:	eb4a 0a0c 	adc.w	sl, sl, ip
 800341c:	f04f 0100 	mov.w	r1, #0
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003428:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800342c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003430:	4689      	mov	r9, r1
 8003432:	4692      	mov	sl, r2
 8003434:	eb1b 0509 	adds.w	r5, fp, r9
 8003438:	eb4c 060a 	adc.w	r6, ip, sl
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4619      	mov	r1, r3
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	f04f 0400 	mov.w	r4, #0
 800344e:	0094      	lsls	r4, r2, #2
 8003450:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003454:	008b      	lsls	r3, r1, #2
 8003456:	461a      	mov	r2, r3
 8003458:	4623      	mov	r3, r4
 800345a:	4628      	mov	r0, r5
 800345c:	4631      	mov	r1, r6
 800345e:	f7fc fed3 	bl	8000208 <__aeabi_uldivmod>
 8003462:	4603      	mov	r3, r0
 8003464:	460c      	mov	r4, r1
 8003466:	461a      	mov	r2, r3
 8003468:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <UART_SetConfig+0x6f4>)
 800346a:	fba3 1302 	umull	r1, r3, r3, r2
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2164      	movs	r1, #100	; 0x64
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	3332      	adds	r3, #50	; 0x32
 800347c:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <UART_SetConfig+0x6f4>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	f003 020f 	and.w	r2, r3, #15
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4442      	add	r2, r8
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	e7ff      	b.n	8003492 <UART_SetConfig+0x6e2>
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349c:	40011000 	.word	0x40011000
 80034a0:	40011400 	.word	0x40011400
 80034a4:	51eb851f 	.word	0x51eb851f

080034a8 <NRF24_init>:

/* Functions */

// NRF24 Initialization function (20 and 53 page in the datasheet)
void NRF24_init(SPI_HandleTypeDef *nrfSPI)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	// Copy SPI handle
	nrf24_hspi = nrfSPI;
 80034b0:	4a51      	ldr	r2, [pc, #324]	; (80035f8 <NRF24_init+0x150>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6013      	str	r3, [r2, #0]

	// Put Pins To Idle State
	NRF24_CSN(HIGH);
 80034b6:	2001      	movs	r0, #1
 80034b8:	f000 f8a0 	bl	80035fc <NRF24_CSN>
	NRF24_CE(LOW);
 80034bc:	2000      	movs	r0, #0
 80034be:	f000 f8b9 	bl	8003634 <NRF24_CE>

	// Initial Delay
	HAL_Delay(5);
 80034c2:	2005      	movs	r0, #5
 80034c4:	f7fd f892 	bl	80005ec <HAL_Delay>

	// Soft Reset Registers
	NRF24_write_register(REG_CONFIG, 		_DS(1, CONFIG_CRCO) | _DS(1, CONFIG_EN_CRC));
 80034c8:	210c      	movs	r1, #12
 80034ca:	2000      	movs	r0, #0
 80034cc:	f000 f8ce 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 		0x00);
 80034d0:	2100      	movs	r1, #0
 80034d2:	2001      	movs	r0, #1
 80034d4:	f000 f8ca 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 	_DS(1, EN_RXADDR_ERX_P0) | _DS(1, EN_RXADDR_ERX_P1));
 80034d8:	2103      	movs	r1, #3
 80034da:	2002      	movs	r0, #2
 80034dc:	f000 f8c6 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 		_DS(3, SETUP_AW_AW));
 80034e0:	2103      	movs	r1, #3
 80034e2:	2003      	movs	r0, #3
 80034e4:	f000 f8c2 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 	_DS(15, SETUP_RETR_ARC) | _DS(4, SETUP_RETR_ARD));
 80034e8:	214f      	movs	r1, #79	; 0x4f
 80034ea:	2004      	movs	r0, #4
 80034ec:	f000 f8be 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 		_DS(52, RF_CH_RF_CH));
 80034f0:	2134      	movs	r1, #52	; 0x34
 80034f2:	2005      	movs	r0, #5
 80034f4:	f000 f8ba 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 		_DS(1, RF_SETUP_LNA_HCURR) | _DS(3, RF_SETUP_RF_PWR));
 80034f8:	2107      	movs	r1, #7
 80034fa:	2006      	movs	r0, #6
 80034fc:	f000 f8b6 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 		0x00);
 8003500:	2100      	movs	r1, #0
 8003502:	2007      	movs	r0, #7
 8003504:	f000 f8b2 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 	0x00);
 8003508:	2100      	movs	r1, #0
 800350a:	2008      	movs	r0, #8
 800350c:	f000 f8ae 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_CD, 			0x00);
 8003510:	2100      	movs	r1, #0
 8003512:	2009      	movs	r0, #9
 8003514:	f000 f8aa 	bl	800366c <NRF24_write_register>

	uint8_t pipeAddrVar[6];
	pipeAddrVar[4] = 0xE7;
 8003518:	23e7      	movs	r3, #231	; 0xe7
 800351a:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xE7;
 800351c:	23e7      	movs	r3, #231	; 0xe7
 800351e:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xE7;
 8003520:	23e7      	movs	r3, #231	; 0xe7
 8003522:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xE7;
 8003524:	23e7      	movs	r3, #231	; 0xe7
 8003526:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xE7;
 8003528:	23e7      	movs	r3, #231	; 0xe7
 800352a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 800352c:	f107 0308 	add.w	r3, r7, #8
 8003530:	2205      	movs	r2, #5
 8003532:	4619      	mov	r1, r3
 8003534:	200a      	movs	r0, #10
 8003536:	f000 f8bd 	bl	80036b4 <NRF24_write_registerN>

	pipeAddrVar[4] = 0xC2;
 800353a:	23c2      	movs	r3, #194	; 0xc2
 800353c:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xC2;
 800353e:	23c2      	movs	r3, #194	; 0xc2
 8003540:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xC2;
 8003542:	23c2      	movs	r3, #194	; 0xc2
 8003544:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xC2;
 8003546:	23c2      	movs	r3, #194	; 0xc2
 8003548:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xC2;
 800354a:	23c2      	movs	r3, #194	; 0xc2
 800354c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 800354e:	f107 0308 	add.w	r3, r7, #8
 8003552:	2205      	movs	r2, #5
 8003554:	4619      	mov	r1, r3
 8003556:	200b      	movs	r0, #11
 8003558:	f000 f8ac 	bl	80036b4 <NRF24_write_registerN>

	NRF24_write_register(REG_RX_ADDR_P2, 	0xC3);
 800355c:	21c3      	movs	r1, #195	; 0xc3
 800355e:	200c      	movs	r0, #12
 8003560:	f000 f884 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 	0xC4);
 8003564:	21c4      	movs	r1, #196	; 0xc4
 8003566:	200d      	movs	r0, #13
 8003568:	f000 f880 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 	0xC5);
 800356c:	21c5      	movs	r1, #197	; 0xc5
 800356e:	200e      	movs	r0, #14
 8003570:	f000 f87c 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 	0xC6);
 8003574:	21c6      	movs	r1, #198	; 0xc6
 8003576:	200f      	movs	r0, #15
 8003578:	f000 f878 	bl	800366c <NRF24_write_register>

	pipeAddrVar[4] = 0xE7;
 800357c:	23e7      	movs	r3, #231	; 0xe7
 800357e:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xE7;
 8003580:	23e7      	movs	r3, #231	; 0xe7
 8003582:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xE7;
 8003584:	23e7      	movs	r3, #231	; 0xe7
 8003586:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xE7;
 8003588:	23e7      	movs	r3, #231	; 0xe7
 800358a:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xE7;
 800358c:	23e7      	movs	r3, #231	; 0xe7
 800358e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 8003590:	f107 0308 	add.w	r3, r7, #8
 8003594:	2205      	movs	r2, #5
 8003596:	4619      	mov	r1, r3
 8003598:	2010      	movs	r0, #16
 800359a:	f000 f88b 	bl	80036b4 <NRF24_write_registerN>

	NRF24_write_register(REG_RX_PW_P0, 		0x00);
 800359e:	2100      	movs	r1, #0
 80035a0:	2011      	movs	r0, #17
 80035a2:	f000 f863 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 		0x00);
 80035a6:	2100      	movs	r1, #0
 80035a8:	2012      	movs	r0, #18
 80035aa:	f000 f85f 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 		0x00);
 80035ae:	2100      	movs	r1, #0
 80035b0:	2013      	movs	r0, #19
 80035b2:	f000 f85b 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 		0x00);
 80035b6:	2100      	movs	r1, #0
 80035b8:	2014      	movs	r0, #20
 80035ba:	f000 f857 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 		0x00);
 80035be:	2100      	movs	r1, #0
 80035c0:	2015      	movs	r0, #21
 80035c2:	f000 f853 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 		0x00);
 80035c6:	2100      	movs	r1, #0
 80035c8:	2016      	movs	r0, #22
 80035ca:	f000 f84f 	bl	800366c <NRF24_write_register>

	NRF24_write_register(REG_DYNPD, 		0x00);
 80035ce:	2100      	movs	r1, #0
 80035d0:	201c      	movs	r0, #28
 80035d2:	f000 f84b 	bl	800366c <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 		0x00);
 80035d6:	2100      	movs	r1, #0
 80035d8:	201d      	movs	r0, #29
 80035da:	f000 f847 	bl	800366c <NRF24_write_register>

	NRF24_resetStatus();
 80035de:	f000 f8bb 	bl	8003758 <NRF24_resetStatus>

	NRF24_flush_TX();
 80035e2:	f000 f8c1 	bl	8003768 <NRF24_flush_TX>
	NRF24_flush_RX();
 80035e6:	f000 f8c7 	bl	8003778 <NRF24_flush_RX>

	NRF24_power(LOW);
 80035ea:	2000      	movs	r0, #0
 80035ec:	f000 f8cc 	bl	8003788 <NRF24_power>
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	20000028 	.word	0x20000028

080035fc <NRF24_CSN>:

// CSN Pin operations
static void NRF24_CSN(uint8_t state)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
	if (state)
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <NRF24_CSN+0x1e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800360c:	2201      	movs	r2, #1
 800360e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003612:	4807      	ldr	r0, [pc, #28]	; (8003630 <NRF24_CSN+0x34>)
 8003614:	f7fd fa84 	bl	8000b20 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
}
 8003618:	e005      	b.n	8003626 <NRF24_CSN+0x2a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800361a:	2200      	movs	r2, #0
 800361c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003620:	4803      	ldr	r0, [pc, #12]	; (8003630 <NRF24_CSN+0x34>)
 8003622:	f7fd fa7d 	bl	8000b20 <HAL_GPIO_WritePin>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40020800 	.word	0x40020800

08003634 <NRF24_CE>:

// CE Pin operations
static void NRF24_CE(uint8_t state)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
	if (state)
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d006      	beq.n	8003652 <NRF24_CE+0x1e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003644:	2201      	movs	r2, #1
 8003646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800364a:	4807      	ldr	r0, [pc, #28]	; (8003668 <NRF24_CE+0x34>)
 800364c:	f7fd fa68 	bl	8000b20 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
}
 8003650:	e005      	b.n	800365e <NRF24_CE+0x2a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8003652:	2200      	movs	r2, #0
 8003654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003658:	4803      	ldr	r0, [pc, #12]	; (8003668 <NRF24_CE+0x34>)
 800365a:	f7fd fa61 	bl	8000b20 <HAL_GPIO_WritePin>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40020800 	.word	0x40020800

0800366c <NRF24_write_register>:

// Write 1B to specific register (W_REGISTER command - 46 page in the datasheet)
static void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	460a      	mov	r2, r1
 8003676:	71fb      	strb	r3, [r7, #7]
 8003678:	4613      	mov	r3, r2
 800367a:	71bb      	strb	r3, [r7, #6]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 800367c:	2000      	movs	r0, #0
 800367e:	f7ff ffbd 	bl	80035fc <NRF24_CSN>

	//Transmit register address and data
	SPI_Buf[0] = reg | CMD_W_REGISTER;
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	f043 0320 	orr.w	r3, r3, #32
 8003688:	b2db      	uxtb	r3, r3
 800368a:	733b      	strb	r3, [r7, #12]
	SPI_Buf[1] = value;
 800368c:	79bb      	ldrb	r3, [r7, #6]
 800368e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(nrf24_hspi, SPI_Buf, 2, 100);
 8003690:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <NRF24_write_register+0x44>)
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	f107 010c 	add.w	r1, r7, #12
 8003698:	2364      	movs	r3, #100	; 0x64
 800369a:	2202      	movs	r2, #2
 800369c:	f7fd ffd2 	bl	8001644 <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 80036a0:	2001      	movs	r0, #1
 80036a2:	f7ff ffab 	bl	80035fc <NRF24_CSN>
}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000028 	.word	0x20000028

080036b4 <NRF24_write_registerN>:

// Write >1B to specific register (W_REGISTER command - 46 page in the datasheet)
static void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	6039      	str	r1, [r7, #0]
 80036be:	71fb      	strb	r3, [r7, #7]
 80036c0:	4613      	mov	r3, r2
 80036c2:	71bb      	strb	r3, [r7, #6]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 80036c4:	2000      	movs	r0, #0
 80036c6:	f7ff ff99 	bl	80035fc <NRF24_CSN>

	//Transmit register address and data
	SPI_Buf[0] = reg | CMD_W_REGISTER;
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	f043 0320 	orr.w	r3, r3, #32
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, SPI_Buf, 1, 100);
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <NRF24_write_registerN+0x50>)
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	f107 010c 	add.w	r1, r7, #12
 80036dc:	2364      	movs	r3, #100	; 0x64
 80036de:	2201      	movs	r2, #1
 80036e0:	f7fd ffb0 	bl	8001644 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf24_hspi, (uint8_t*)buf, len, 100);
 80036e4:	4b07      	ldr	r3, [pc, #28]	; (8003704 <NRF24_write_registerN+0x50>)
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	79bb      	ldrb	r3, [r7, #6]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	2364      	movs	r3, #100	; 0x64
 80036ee:	6839      	ldr	r1, [r7, #0]
 80036f0:	f7fd ffa8 	bl	8001644 <HAL_SPI_Transmit>

	NRF24_CSN(HIGH);
 80036f4:	2001      	movs	r0, #1
 80036f6:	f7ff ff81 	bl	80035fc <NRF24_CSN>
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000028 	.word	0x20000028

08003708 <NRF24_read_register>:

// Read 1B from specific register (R_REGISTER command - 46 page in the datasheet)
static uint8_t NRF24_read_register(uint8_t reg)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	71fb      	strb	r3, [r7, #7]
	uint8_t SPI_Buf[3];

	NRF24_CSN(LOW);
 8003712:	2000      	movs	r0, #0
 8003714:	f7ff ff72 	bl	80035fc <NRF24_CSN>

	//Transmit register address
	SPI_Buf[0] = reg & 0x1F;
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	b2db      	uxtb	r3, r3
 8003720:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(nrf24_hspi, SPI_Buf, 1, 100);
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <NRF24_read_register+0x4c>)
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	f107 010c 	add.w	r1, r7, #12
 800372a:	2364      	movs	r3, #100	; 0x64
 800372c:	2201      	movs	r2, #1
 800372e:	f7fd ff89 	bl	8001644 <HAL_SPI_Transmit>

	//Receive data
	HAL_SPI_Receive(nrf24_hspi, &SPI_Buf[1], 1, 100);
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <NRF24_read_register+0x4c>)
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	f107 030c 	add.w	r3, r7, #12
 800373a:	1c59      	adds	r1, r3, #1
 800373c:	2364      	movs	r3, #100	; 0x64
 800373e:	2201      	movs	r2, #1
 8003740:	f7fe f8b4 	bl	80018ac <HAL_SPI_Receive>

	NRF24_CSN(HIGH);
 8003744:	2001      	movs	r0, #1
 8003746:	f7ff ff59 	bl	80035fc <NRF24_CSN>

	return SPI_Buf[1];
 800374a:	7b7b      	ldrb	r3, [r7, #13]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000028 	.word	0x20000028

08003758 <NRF24_resetStatus>:

// Reset Status (write 1 to clear - 55 page in the datasheet)
static void NRF24_resetStatus(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS, _DS(1, STATUS_MAX_RT) | _DS(1, STATUS_TX_DS) | _DS(1, STATUS_RX_DR));
 800375c:	2170      	movs	r1, #112	; 0x70
 800375e:	2007      	movs	r0, #7
 8003760:	f7ff ff84 	bl	800366c <NRF24_write_register>
}
 8003764:	bf00      	nop
 8003766:	bd80      	pop	{r7, pc}

08003768 <NRF24_flush_TX>:

// Flush TX Buffer (46 page in the datasheet)
static void NRF24_flush_TX(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800376c:	21ff      	movs	r1, #255	; 0xff
 800376e:	20e1      	movs	r0, #225	; 0xe1
 8003770:	f7ff ff7c 	bl	800366c <NRF24_write_register>
}
 8003774:	bf00      	nop
 8003776:	bd80      	pop	{r7, pc}

08003778 <NRF24_flush_RX>:

// Flush RX Buffer (46 page in the datasheet)
static void NRF24_flush_RX(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800377c:	21ff      	movs	r1, #255	; 0xff
 800377e:	20e2      	movs	r0, #226	; 0xe2
 8003780:	f7ff ff74 	bl	800366c <NRF24_write_register>
}
 8003784:	bf00      	nop
 8003786:	bd80      	pop	{r7, pc}

08003788 <NRF24_power>:

// Power Up (PWR_UP_bit change - 53 page in the datasheet)
static void NRF24_power(uint8_t state)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
	if(state)
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <NRF24_power+0x28>
		NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | _DS(1, CONFIG_PWR_UP));
 8003798:	2000      	movs	r0, #0
 800379a:	f7ff ffb5 	bl	8003708 <NRF24_read_register>
 800379e:	4603      	mov	r3, r0
 80037a0:	f043 0302 	orr.w	r3, r3, #2
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4619      	mov	r1, r3
 80037a8:	2000      	movs	r0, #0
 80037aa:	f7ff ff5f 	bl	800366c <NRF24_write_register>
	else
		NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) & ~_DS(1, CONFIG_PWR_UP));
}
 80037ae:	e00a      	b.n	80037c6 <NRF24_power+0x3e>
		NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) & ~_DS(1, CONFIG_PWR_UP));
 80037b0:	2000      	movs	r0, #0
 80037b2:	f7ff ffa9 	bl	8003708 <NRF24_read_register>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f023 0302 	bic.w	r3, r3, #2
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	4619      	mov	r1, r3
 80037c0:	2000      	movs	r0, #0
 80037c2:	f7ff ff53 	bl	800366c <NRF24_write_register>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <NRF24_openReadingPipe>:
	NRF24_write_register(REG_RX_PW_P0, payload_size);
}

// Open RX Pipe (65 and 66 page in the datasheet)
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4601      	mov	r1, r0
 80037d8:	e9c7 2300 	strd	r2, r3, [r7]
 80037dc:	460b      	mov	r3, r1
 80037de:	73fb      	strb	r3, [r7, #15]
	// Data in vectors for better code quality
	const uint8_t NRF24_ADDR_PX[] = {
 80037e0:	4a25      	ldr	r2, [pc, #148]	; (8003878 <NRF24_openReadingPipe+0xa8>)
 80037e2:	f107 0318 	add.w	r3, r7, #24
 80037e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037ea:	6018      	str	r0, [r3, #0]
 80037ec:	3304      	adds	r3, #4
 80037ee:	8019      	strh	r1, [r3, #0]
			REG_RX_ADDR_P2,
			REG_RX_ADDR_P3,
			REG_RX_ADDR_P4,
			REG_RX_ADDR_P5
	};
	const uint8_t NRF24_RX_PW_PX[] = {
 80037f0:	4a22      	ldr	r2, [pc, #136]	; (800387c <NRF24_openReadingPipe+0xac>)
 80037f2:	f107 0310 	add.w	r3, r7, #16
 80037f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037fa:	6018      	str	r0, [r3, #0]
 80037fc:	3304      	adds	r3, #4
 80037fe:	8019      	strh	r1, [r3, #0]
			REG_RX_PW_P3,
			REG_RX_PW_P4,
			REG_RX_PW_P5
	};

	if(number < 2){
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d80b      	bhi.n	800381e <NRF24_openReadingPipe+0x4e>
		// Write 5B address to pipe (55 page in the datasheet)
		NRF24_write_registerN(NRF24_ADDR_PX[number], (uint8_t *)(&address), 5);
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	f107 0220 	add.w	r2, r7, #32
 800380c:	4413      	add	r3, r2
 800380e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003812:	4639      	mov	r1, r7
 8003814:	2205      	movs	r2, #5
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff ff4c 	bl	80036b4 <NRF24_write_registerN>
 800381c:	e00a      	b.n	8003834 <NRF24_openReadingPipe+0x64>
	}
	else{
		// Write LSB, because only this differs from P1 address (55 page in the datasheet)
		NRF24_write_registerN(NRF24_ADDR_PX[number], (uint8_t *)(&address), 1);
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	f107 0220 	add.w	r2, r7, #32
 8003824:	4413      	add	r3, r2
 8003826:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800382a:	4639      	mov	r1, r7
 800382c:	2201      	movs	r2, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff ff40 	bl	80036b4 <NRF24_write_registerN>
	}

	// Write payload size
	NRF24_write_register(NRF24_RX_PW_PX[number], payload_size);
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	f107 0220 	add.w	r2, r7, #32
 800383a:	4413      	add	r3, r2
 800383c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003840:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <NRF24_openReadingPipe+0xb0>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f7ff ff10 	bl	800366c <NRF24_write_register>

	// Enable pipe
	NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _DS(1, number));
 800384c:	2002      	movs	r0, #2
 800384e:	f7ff ff5b 	bl	8003708 <NRF24_read_register>
 8003852:	4603      	mov	r3, r0
 8003854:	b25a      	sxtb	r2, r3
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2101      	movs	r1, #1
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	b25b      	sxtb	r3, r3
 8003860:	4313      	orrs	r3, r2
 8003862:	b25b      	sxtb	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	4619      	mov	r1, r3
 8003868:	2002      	movs	r0, #2
 800386a:	f7ff feff 	bl	800366c <NRF24_write_register>
}
 800386e:	bf00      	nop
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	080041f0 	.word	0x080041f0
 800387c:	080041f8 	.word	0x080041f8
 8003880:	20000005 	.word	0x20000005

08003884 <NRF24_read>:
	return (uint8_t)(NRF24_read_register(REG_STATUS) & _DS(1, STATUS_TX_DS));
}

// Read Data - function returns 1 if RX FIFO is empty (described below)
uint8_t NRF24_read(void* buf, uint8_t len)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;

	NRF24_CSN(LOW);
 8003890:	2000      	movs	r0, #0
 8003892:	f7ff feb3 	bl	80035fc <NRF24_CSN>

	// Read payload with proper command (46 page in the datasheet)
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8003896:	2361      	movs	r3, #97	; 0x61
 8003898:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(nrf24_hspi, &cmdRxBuf, 1, 100);
 800389a:	4b10      	ldr	r3, [pc, #64]	; (80038dc <NRF24_read+0x58>)
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	f107 010f 	add.w	r1, r7, #15
 80038a2:	2364      	movs	r3, #100	; 0x64
 80038a4:	2201      	movs	r2, #1
 80038a6:	f7fd fecd 	bl	8001644 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf24_hspi, buf, len, 100);
 80038aa:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <NRF24_read+0x58>)
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	2364      	movs	r3, #100	; 0x64
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	f7fd fff9 	bl	80018ac <HAL_SPI_Receive>

	NRF24_CSN(HIGH);
 80038ba:	2001      	movs	r0, #1
 80038bc:	f7ff fe9e 	bl	80035fc <NRF24_CSN>

	NRF24_flush_RX();
 80038c0:	f7ff ff5a 	bl	8003778 <NRF24_flush_RX>

	return (uint8_t)(NRF24_read_register(REG_FIFO_STATUS) & _DS(1, FIFO_STATUS_RX_EMPTY));
 80038c4:	2017      	movs	r0, #23
 80038c6:	f7ff ff1f 	bl	8003708 <NRF24_read_register>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	b2db      	uxtb	r3, r3
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000028 	.word	0x20000028

080038e0 <NRF24_startListening>:

// Start Listening On Pipes
void NRF24_startListening(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
	// Power up and set RX mode (65 and 66 page in the datasheet)
	NRF24_power(HIGH);
 80038e4:	2001      	movs	r0, #1
 80038e6:	f7ff ff4f 	bl	8003788 <NRF24_power>
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | _DS(1, CONFIG_PRIM_RX));
 80038ea:	2000      	movs	r0, #0
 80038ec:	f7ff ff0c 	bl	8003708 <NRF24_read_register>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4619      	mov	r1, r3
 80038fa:	2000      	movs	r0, #0
 80038fc:	f7ff feb6 	bl	800366c <NRF24_write_register>

	// Flush buffers
	NRF24_flush_TX();
 8003900:	f7ff ff32 	bl	8003768 <NRF24_flush_TX>
	NRF24_flush_RX();
 8003904:	f7ff ff38 	bl	8003778 <NRF24_flush_RX>

	NRF24_CE(HIGH);
 8003908:	2001      	movs	r0, #1
 800390a:	f7ff fe93 	bl	8003634 <NRF24_CE>

	// Wait 1 ms for radio to come on (20 page of the datasheet)
	HAL_Delay(1);
 800390e:	2001      	movs	r0, #1
 8003910:	f7fc fe6c 	bl	80005ec <HAL_Delay>
}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}

08003918 <NRF24_available>:

// Check For Available Data To Read
uint8_t NRF24_available(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
	uint8_t result = (NRF24_read_register(REG_STATUS) & _DS(1, STATUS_RX_DR));
 800391e:	2007      	movs	r0, #7
 8003920:	f7ff fef2 	bl	8003708 <NRF24_read_register>
 8003924:	4603      	mov	r3, r0
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	71fb      	strb	r3, [r7, #7]

	if (result){
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <NRF24_available+0x22>
		// Clear the status bit
		NRF24_write_register(REG_STATUS, _DS(1, STATUS_RX_DR));
 8003932:	2140      	movs	r1, #64	; 0x40
 8003934:	2007      	movs	r0, #7
 8003936:	f7ff fe99 	bl	800366c <NRF24_write_register>
	}
	return result;
 800393a:	79fb      	ldrb	r3, [r7, #7]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	; 0x28
 8003948:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394a:	f107 0314 	add.w	r3, r7, #20
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	609a      	str	r2, [r3, #8]
 8003956:	60da      	str	r2, [r3, #12]
 8003958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <MX_GPIO_Init+0xf8>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	4a36      	ldr	r2, [pc, #216]	; (8003a3c <MX_GPIO_Init+0xf8>)
 8003964:	f043 0304 	orr.w	r3, r3, #4
 8003968:	6313      	str	r3, [r2, #48]	; 0x30
 800396a:	4b34      	ldr	r3, [pc, #208]	; (8003a3c <MX_GPIO_Init+0xf8>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	4b30      	ldr	r3, [pc, #192]	; (8003a3c <MX_GPIO_Init+0xf8>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a2f      	ldr	r2, [pc, #188]	; (8003a3c <MX_GPIO_Init+0xf8>)
 8003980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b2d      	ldr	r3, [pc, #180]	; (8003a3c <MX_GPIO_Init+0xf8>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <MX_GPIO_Init+0xf8>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <MX_GPIO_Init+0xf8>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6313      	str	r3, [r2, #48]	; 0x30
 80039a2:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <MX_GPIO_Init+0xf8>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	607b      	str	r3, [r7, #4]
 80039b2:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <MX_GPIO_Init+0xf8>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	4a21      	ldr	r2, [pc, #132]	; (8003a3c <MX_GPIO_Init+0xf8>)
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	6313      	str	r3, [r2, #48]	; 0x30
 80039be:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <MX_GPIO_Init+0xf8>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80039ca:	2200      	movs	r2, #0
 80039cc:	2120      	movs	r1, #32
 80039ce:	481c      	ldr	r0, [pc, #112]	; (8003a40 <MX_GPIO_Init+0xfc>)
 80039d0:	f7fd f8a6 	bl	8000b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 80039d4:	2200      	movs	r2, #0
 80039d6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80039da:	481a      	ldr	r0, [pc, #104]	; (8003a44 <MX_GPIO_Init+0x100>)
 80039dc:	f7fd f8a0 	bl	8000b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80039e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039e6:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <MX_GPIO_Init+0x104>)
 80039e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80039ee:	f107 0314 	add.w	r3, r7, #20
 80039f2:	4619      	mov	r1, r3
 80039f4:	4813      	ldr	r0, [pc, #76]	; (8003a44 <MX_GPIO_Init+0x100>)
 80039f6:	f7fc ff01 	bl	80007fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80039fa:	2320      	movs	r3, #32
 80039fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039fe:	2301      	movs	r3, #1
 8003a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a06:	2300      	movs	r3, #0
 8003a08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003a0a:	f107 0314 	add.w	r3, r7, #20
 8003a0e:	4619      	mov	r1, r3
 8003a10:	480b      	ldr	r0, [pc, #44]	; (8003a40 <MX_GPIO_Init+0xfc>)
 8003a12:	f7fc fef3 	bl	80007fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8003a16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a24:	2300      	movs	r3, #0
 8003a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4805      	ldr	r0, [pc, #20]	; (8003a44 <MX_GPIO_Init+0x100>)
 8003a30:	f7fc fee4 	bl	80007fc <HAL_GPIO_Init>

}
 8003a34:	bf00      	nop
 8003a36:	3728      	adds	r7, #40	; 0x28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40020000 	.word	0x40020000
 8003a44:	40020800 	.word	0x40020800
 8003a48:	10210000 	.word	0x10210000
 8003a4c:	00000000 	.word	0x00000000

08003a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a50:	b5b0      	push	{r4, r5, r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a56:	f7fc fd57 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a5a:	f000 f85d 	bl	8003b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a5e:	f7ff ff71 	bl	8003944 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003a62:	f000 faf1 	bl	8004048 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8003a66:	f000 f8cd 	bl	8003c04 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003a6a:	f000 f9e5 	bl	8003e38 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_init(&hspi2);
 8003a6e:	4826      	ldr	r0, [pc, #152]	; (8003b08 <main+0xb8>)
 8003a70:	f7ff fd1a 	bl	80034a8 <NRF24_init>

  NRF24_openReadingPipe(1, rx_pipe_addr);
 8003a74:	a422      	add	r4, pc, #136	; (adr r4, 8003b00 <main+0xb0>)
 8003a76:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4623      	mov	r3, r4
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f7ff fea6 	bl	80037d0 <NRF24_openReadingPipe>
  NRF24_startListening();
 8003a84:	f7ff ff2c 	bl	80038e0 <NRF24_startListening>

  uint32_t watchdog = HAL_GetTick();
 8003a88:	f7fc fda4 	bl	80005d4 <HAL_GetTick>
 8003a8c:	6178      	str	r0, [r7, #20]
  uint8_t error_msg[] = "Connection Lost\r\n";
 8003a8e:	4b1f      	ldr	r3, [pc, #124]	; (8003b0c <main+0xbc>)
 8003a90:	463c      	mov	r4, r7
 8003a92:	461d      	mov	r5, r3
 8003a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	8023      	strh	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(NRF24_available()){
 8003a9c:	f7ff ff3c 	bl	8003918 <NRF24_available>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d013      	beq.n	8003ace <main+0x7e>
		  NRF24_read(my_rx_data, PAYLOAD_SIZE);
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	4819      	ldr	r0, [pc, #100]	; (8003b10 <main+0xc0>)
 8003aaa:	f7ff feeb 	bl	8003884 <NRF24_read>

		  my_rx_data[PAYLOAD_SIZE] = '\r';
 8003aae:	4b18      	ldr	r3, [pc, #96]	; (8003b10 <main+0xc0>)
 8003ab0:	220d      	movs	r2, #13
 8003ab2:	709a      	strb	r2, [r3, #2]
		  my_rx_data[PAYLOAD_SIZE + 1] = '\n';
 8003ab4:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <main+0xc0>)
 8003ab6:	220a      	movs	r2, #10
 8003ab8:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit(&huart2, my_rx_data, PAYLOAD_SIZE + 2, 100);
 8003aba:	2364      	movs	r3, #100	; 0x64
 8003abc:	2204      	movs	r2, #4
 8003abe:	4914      	ldr	r1, [pc, #80]	; (8003b10 <main+0xc0>)
 8003ac0:	4814      	ldr	r0, [pc, #80]	; (8003b14 <main+0xc4>)
 8003ac2:	f7ff f892 	bl	8002bea <HAL_UART_Transmit>

		  watchdog = HAL_GetTick();
 8003ac6:	f7fc fd85 	bl	80005d4 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]
 8003acc:	e7e6      	b.n	8003a9c <main+0x4c>
	  }
	  else if((HAL_GetTick() - watchdog) > MAX_TIMEOUT ){
 8003ace:	f7fc fd81 	bl	80005d4 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003adc:	d9de      	bls.n	8003a9c <main+0x4c>
		  my_rx_data[0] = IDLE_STATE;
 8003ade:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <main+0xc0>)
 8003ae0:	224a      	movs	r2, #74	; 0x4a
 8003ae2:	701a      	strb	r2, [r3, #0]
		  my_rx_data[1] = IDLE_STATE;
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <main+0xc0>)
 8003ae6:	224a      	movs	r2, #74	; 0x4a
 8003ae8:	705a      	strb	r2, [r3, #1]
		  HAL_UART_Transmit(&huart2, error_msg, sizeof(error_msg), 100);
 8003aea:	4639      	mov	r1, r7
 8003aec:	2364      	movs	r3, #100	; 0x64
 8003aee:	2212      	movs	r2, #18
 8003af0:	4808      	ldr	r0, [pc, #32]	; (8003b14 <main+0xc4>)
 8003af2:	f7ff f87a 	bl	8002bea <HAL_UART_Transmit>

		  HAL_Delay(350);
 8003af6:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003afa:	f7fc fd77 	bl	80005ec <HAL_Delay>
	  if(NRF24_available()){
 8003afe:	e7cd      	b.n	8003a9c <main+0x4c>
 8003b00:	223344aa 	.word	0x223344aa
 8003b04:	00000011 	.word	0x00000011
 8003b08:	20000054 	.word	0x20000054
 8003b0c:	08004200 	.word	0x08004200
 8003b10:	20000030 	.word	0x20000030
 8003b14:	200000ec 	.word	0x200000ec

08003b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b094      	sub	sp, #80	; 0x50
 8003b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b1e:	f107 031c 	add.w	r3, r7, #28
 8003b22:	2234      	movs	r2, #52	; 0x34
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fb4e 	bl	80041c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b2c:	f107 0308 	add.w	r3, r7, #8
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <SystemClock_Config+0xd4>)
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	4a29      	ldr	r2, [pc, #164]	; (8003bec <SystemClock_Config+0xd4>)
 8003b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <SystemClock_Config+0xd4>)
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003b58:	2300      	movs	r3, #0
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <SystemClock_Config+0xd8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003b64:	4a22      	ldr	r2, [pc, #136]	; (8003bf0 <SystemClock_Config+0xd8>)
 8003b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <SystemClock_Config+0xd8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b74:	603b      	str	r3, [r7, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b80:	2310      	movs	r3, #16
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b84:	2302      	movs	r3, #2
 8003b86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003b90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003b94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003b96:	2304      	movs	r3, #4
 8003b98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ba2:	f107 031c 	add.w	r3, r7, #28
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd fa8e 	bl	80010c8 <HAL_RCC_OscConfig>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003bb2:	f000 f81f 	bl	8003bf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bb6:	230f      	movs	r3, #15
 8003bb8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003bcc:	f107 0308 	add.w	r3, r7, #8
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fc ffbe 	bl	8000b54 <HAL_RCC_ClockConfig>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003bde:	f000 f809 	bl	8003bf4 <Error_Handler>
  }
}
 8003be2:	bf00      	nop
 8003be4:	3750      	adds	r7, #80	; 0x50
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40007000 	.word	0x40007000

08003bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003c08:	4b17      	ldr	r3, [pc, #92]	; (8003c68 <MX_SPI2_Init+0x64>)
 8003c0a:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <MX_SPI2_Init+0x68>)
 8003c0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c0e:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <MX_SPI2_Init+0x64>)
 8003c10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <MX_SPI2_Init+0x64>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <MX_SPI2_Init+0x64>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <MX_SPI2_Init+0x64>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <MX_SPI2_Init+0x64>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c2e:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <MX_SPI2_Init+0x64>)
 8003c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003c36:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <MX_SPI2_Init+0x64>)
 8003c38:	2220      	movs	r2, #32
 8003c3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <MX_SPI2_Init+0x64>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <MX_SPI2_Init+0x64>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c48:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <MX_SPI2_Init+0x64>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <MX_SPI2_Init+0x64>)
 8003c50:	220a      	movs	r2, #10
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c54:	4804      	ldr	r0, [pc, #16]	; (8003c68 <MX_SPI2_Init+0x64>)
 8003c56:	f7fd fc91 	bl	800157c <HAL_SPI_Init>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003c60:	f7ff ffc8 	bl	8003bf4 <Error_Handler>
  }

}
 8003c64:	bf00      	nop
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000054 	.word	0x20000054
 8003c6c:	40003800 	.word	0x40003800

08003c70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]
 8003c86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a30      	ldr	r2, [pc, #192]	; (8003d50 <HAL_SPI_MspInit+0xe0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d15a      	bne.n	8003d48 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <HAL_SPI_MspInit+0xe4>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	4a2e      	ldr	r2, [pc, #184]	; (8003d54 <HAL_SPI_MspInit+0xe4>)
 8003c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca2:	4b2c      	ldr	r3, [pc, #176]	; (8003d54 <HAL_SPI_MspInit+0xe4>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	4b28      	ldr	r3, [pc, #160]	; (8003d54 <HAL_SPI_MspInit+0xe4>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	4a27      	ldr	r2, [pc, #156]	; (8003d54 <HAL_SPI_MspInit+0xe4>)
 8003cb8:	f043 0304 	orr.w	r3, r3, #4
 8003cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbe:	4b25      	ldr	r3, [pc, #148]	; (8003d54 <HAL_SPI_MspInit+0xe4>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <HAL_SPI_MspInit+0xe4>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4a20      	ldr	r2, [pc, #128]	; (8003d54 <HAL_SPI_MspInit+0xe4>)
 8003cd4:	f043 0302 	orr.w	r3, r3, #2
 8003cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <HAL_SPI_MspInit+0xe4>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cea:	2302      	movs	r3, #2
 8003cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8003cf6:	2307      	movs	r3, #7
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cfa:	f107 0314 	add.w	r3, r7, #20
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4815      	ldr	r0, [pc, #84]	; (8003d58 <HAL_SPI_MspInit+0xe8>)
 8003d02:	f7fc fd7b 	bl	80007fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d06:	2304      	movs	r3, #4
 8003d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d12:	2303      	movs	r3, #3
 8003d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d16:	2305      	movs	r3, #5
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d1a:	f107 0314 	add.w	r3, r7, #20
 8003d1e:	4619      	mov	r1, r3
 8003d20:	480d      	ldr	r0, [pc, #52]	; (8003d58 <HAL_SPI_MspInit+0xe8>)
 8003d22:	f7fc fd6b 	bl	80007fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d34:	2303      	movs	r3, #3
 8003d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d38:	2305      	movs	r3, #5
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	4619      	mov	r1, r3
 8003d42:	4806      	ldr	r0, [pc, #24]	; (8003d5c <HAL_SPI_MspInit+0xec>)
 8003d44:	f7fc fd5a 	bl	80007fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003d48:	bf00      	nop
 8003d4a:	3728      	adds	r7, #40	; 0x28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40003800 	.word	0x40003800
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40020800 	.word	0x40020800
 8003d5c:	40020400 	.word	0x40020400

08003d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <HAL_MspInit+0x4c>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	4a0f      	ldr	r2, [pc, #60]	; (8003dac <HAL_MspInit+0x4c>)
 8003d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d74:	6453      	str	r3, [r2, #68]	; 0x44
 8003d76:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <HAL_MspInit+0x4c>)
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	603b      	str	r3, [r7, #0]
 8003d86:	4b09      	ldr	r3, [pc, #36]	; (8003dac <HAL_MspInit+0x4c>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	4a08      	ldr	r2, [pc, #32]	; (8003dac <HAL_MspInit+0x4c>)
 8003d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d90:	6413      	str	r3, [r2, #64]	; 0x40
 8003d92:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_MspInit+0x4c>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003d9e:	2007      	movs	r0, #7
 8003da0:	f7fc fcf8 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40023800 	.word	0x40023800

08003db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dc2:	e7fe      	b.n	8003dc2 <HardFault_Handler+0x4>

08003dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dc8:	e7fe      	b.n	8003dc8 <MemManage_Handler+0x4>

08003dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dce:	e7fe      	b.n	8003dce <BusFault_Handler+0x4>

08003dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dd4:	e7fe      	b.n	8003dd4 <UsageFault_Handler+0x4>

08003dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003de8:	bf00      	nop
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003df2:	b480      	push	{r7}
 8003df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003df6:	bf00      	nop
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e04:	f7fc fbd2 	bl	80005ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e08:	bf00      	nop
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <SystemInit+0x28>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	4a07      	ldr	r2, [pc, #28]	; (8003e34 <SystemInit+0x28>)
 8003e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <SystemInit+0x28>)
 8003e22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e26:	609a      	str	r2, [r3, #8]
#endif
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b096      	sub	sp, #88	; 0x58
 8003e3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	605a      	str	r2, [r3, #4]
 8003e60:	609a      	str	r2, [r3, #8]
 8003e62:	60da      	str	r2, [r3, #12]
 8003e64:	611a      	str	r2, [r3, #16]
 8003e66:	615a      	str	r2, [r3, #20]
 8003e68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e6a:	1d3b      	adds	r3, r7, #4
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 f9a9 	bl	80041c8 <memset>

  htim1.Instance = TIM1;
 8003e76:	4b44      	ldr	r3, [pc, #272]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003e78:	4a44      	ldr	r2, [pc, #272]	; (8003f8c <MX_TIM1_Init+0x154>)
 8003e7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 839;
 8003e7c:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003e7e:	f240 3247 	movw	r2, #839	; 0x347
 8003e82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e84:	4b40      	ldr	r3, [pc, #256]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8003e8a:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003e8c:	2263      	movs	r2, #99	; 0x63
 8003e8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e90:	4b3d      	ldr	r3, [pc, #244]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e96:	4b3c      	ldr	r3, [pc, #240]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e9c:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ea2:	4839      	ldr	r0, [pc, #228]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003ea4:	f7fe f8be 	bl	8002024 <HAL_TIM_Base_Init>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003eae:	f7ff fea1 	bl	8003bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003eb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4832      	ldr	r0, [pc, #200]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003ec0:	f7fe f9d6 	bl	8002270 <HAL_TIM_ConfigClockSource>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003eca:	f7ff fe93 	bl	8003bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ece:	482e      	ldr	r0, [pc, #184]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003ed0:	f7fe f8d3 	bl	800207a <HAL_TIM_PWM_Init>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003eda:	f7ff fe8b 	bl	8003bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ee6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003eea:	4619      	mov	r1, r3
 8003eec:	4826      	ldr	r0, [pc, #152]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003eee:	f7fe fd61 	bl	80029b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003ef8:	f7ff fe7c 	bl	8003bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003efc:	2360      	movs	r3, #96	; 0x60
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f10:	2300      	movs	r3, #0
 8003f12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f14:	2300      	movs	r3, #0
 8003f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4819      	ldr	r0, [pc, #100]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003f22:	f7fe f8df 	bl	80020e4 <HAL_TIM_PWM_ConfigChannel>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003f2c:	f7ff fe62 	bl	8003bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f34:	2204      	movs	r2, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	4813      	ldr	r0, [pc, #76]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003f3a:	f7fe f8d3 	bl	80020e4 <HAL_TIM_PWM_ConfigChannel>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003f44:	f7ff fe56 	bl	8003bf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4807      	ldr	r0, [pc, #28]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003f6c:	f7fe fd9e 	bl	8002aac <HAL_TIMEx_ConfigBreakDeadTime>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8003f76:	f7ff fe3d 	bl	8003bf4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003f7a:	4803      	ldr	r0, [pc, #12]	; (8003f88 <MX_TIM1_Init+0x150>)
 8003f7c:	f000 f82a 	bl	8003fd4 <HAL_TIM_MspPostInit>

}
 8003f80:	bf00      	nop
 8003f82:	3758      	adds	r7, #88	; 0x58
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	200000ac 	.word	0x200000ac
 8003f8c:	40010000 	.word	0x40010000

08003f90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <HAL_TIM_Base_MspInit+0x3c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d10d      	bne.n	8003fbe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <HAL_TIM_Base_MspInit+0x40>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <HAL_TIM_Base_MspInit+0x40>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <HAL_TIM_Base_MspInit+0x40>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40010000 	.word	0x40010000
 8003fd0:	40023800 	.word	0x40023800

08003fd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a12      	ldr	r2, [pc, #72]	; (800403c <HAL_TIM_MspPostInit+0x68>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d11e      	bne.n	8004034 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_TIM_MspPostInit+0x6c>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	4a10      	ldr	r2, [pc, #64]	; (8004040 <HAL_TIM_MspPostInit+0x6c>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6313      	str	r3, [r2, #48]	; 0x30
 8004006:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <HAL_TIM_MspPostInit+0x6c>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004012:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004016:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004018:	2302      	movs	r3, #2
 800401a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004020:	2300      	movs	r3, #0
 8004022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004024:	2301      	movs	r3, #1
 8004026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004028:	f107 030c 	add.w	r3, r7, #12
 800402c:	4619      	mov	r1, r3
 800402e:	4805      	ldr	r0, [pc, #20]	; (8004044 <HAL_TIM_MspPostInit+0x70>)
 8004030:	f7fc fbe4 	bl	80007fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004034:	bf00      	nop
 8004036:	3720      	adds	r7, #32
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40010000 	.word	0x40010000
 8004040:	40023800 	.word	0x40023800
 8004044:	40020000 	.word	0x40020000

08004048 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800404c:	4b11      	ldr	r3, [pc, #68]	; (8004094 <MX_USART2_UART_Init+0x4c>)
 800404e:	4a12      	ldr	r2, [pc, #72]	; (8004098 <MX_USART2_UART_Init+0x50>)
 8004050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <MX_USART2_UART_Init+0x4c>)
 8004054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800405a:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <MX_USART2_UART_Init+0x4c>)
 800405c:	2200      	movs	r2, #0
 800405e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <MX_USART2_UART_Init+0x4c>)
 8004062:	2200      	movs	r2, #0
 8004064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <MX_USART2_UART_Init+0x4c>)
 8004068:	2200      	movs	r2, #0
 800406a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800406c:	4b09      	ldr	r3, [pc, #36]	; (8004094 <MX_USART2_UART_Init+0x4c>)
 800406e:	220c      	movs	r2, #12
 8004070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004072:	4b08      	ldr	r3, [pc, #32]	; (8004094 <MX_USART2_UART_Init+0x4c>)
 8004074:	2200      	movs	r2, #0
 8004076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <MX_USART2_UART_Init+0x4c>)
 800407a:	2200      	movs	r2, #0
 800407c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800407e:	4805      	ldr	r0, [pc, #20]	; (8004094 <MX_USART2_UART_Init+0x4c>)
 8004080:	f7fe fd66 	bl	8002b50 <HAL_UART_Init>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800408a:	f7ff fdb3 	bl	8003bf4 <Error_Handler>
  }

}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	200000ec 	.word	0x200000ec
 8004098:	40004400 	.word	0x40004400

0800409c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a4:	f107 0314 	add.w	r3, r7, #20
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a19      	ldr	r2, [pc, #100]	; (8004120 <HAL_UART_MspInit+0x84>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d12b      	bne.n	8004116 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	4b18      	ldr	r3, [pc, #96]	; (8004124 <HAL_UART_MspInit+0x88>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	4a17      	ldr	r2, [pc, #92]	; (8004124 <HAL_UART_MspInit+0x88>)
 80040c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040cc:	6413      	str	r3, [r2, #64]	; 0x40
 80040ce:	4b15      	ldr	r3, [pc, #84]	; (8004124 <HAL_UART_MspInit+0x88>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	4b11      	ldr	r3, [pc, #68]	; (8004124 <HAL_UART_MspInit+0x88>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	4a10      	ldr	r2, [pc, #64]	; (8004124 <HAL_UART_MspInit+0x88>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ea:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <HAL_UART_MspInit+0x88>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80040f6:	230c      	movs	r3, #12
 80040f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fa:	2302      	movs	r3, #2
 80040fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004102:	2303      	movs	r3, #3
 8004104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004106:	2307      	movs	r3, #7
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800410a:	f107 0314 	add.w	r3, r7, #20
 800410e:	4619      	mov	r1, r3
 8004110:	4805      	ldr	r0, [pc, #20]	; (8004128 <HAL_UART_MspInit+0x8c>)
 8004112:	f7fc fb73 	bl	80007fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004116:	bf00      	nop
 8004118:	3728      	adds	r7, #40	; 0x28
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40004400 	.word	0x40004400
 8004124:	40023800 	.word	0x40023800
 8004128:	40020000 	.word	0x40020000

0800412c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800412c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004164 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004130:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004132:	e003      	b.n	800413c <LoopCopyDataInit>

08004134 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004134:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004136:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004138:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800413a:	3104      	adds	r1, #4

0800413c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800413c:	480b      	ldr	r0, [pc, #44]	; (800416c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800413e:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004140:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004142:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004144:	d3f6      	bcc.n	8004134 <CopyDataInit>
  ldr  r2, =_sbss
 8004146:	4a0b      	ldr	r2, [pc, #44]	; (8004174 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004148:	e002      	b.n	8004150 <LoopFillZerobss>

0800414a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800414a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800414c:	f842 3b04 	str.w	r3, [r2], #4

08004150 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004152:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004154:	d3f9      	bcc.n	800414a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004156:	f7ff fe59 	bl	8003e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800415a:	f000 f811 	bl	8004180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800415e:	f7ff fc77 	bl	8003a50 <main>
  bx  lr    
 8004162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004164:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004168:	0800423c 	.word	0x0800423c
  ldr  r0, =_sdata
 800416c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004170:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004174:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004178:	2000012c 	.word	0x2000012c

0800417c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800417c:	e7fe      	b.n	800417c <ADC_IRQHandler>
	...

08004180 <__libc_init_array>:
 8004180:	b570      	push	{r4, r5, r6, lr}
 8004182:	4e0d      	ldr	r6, [pc, #52]	; (80041b8 <__libc_init_array+0x38>)
 8004184:	4c0d      	ldr	r4, [pc, #52]	; (80041bc <__libc_init_array+0x3c>)
 8004186:	1ba4      	subs	r4, r4, r6
 8004188:	10a4      	asrs	r4, r4, #2
 800418a:	2500      	movs	r5, #0
 800418c:	42a5      	cmp	r5, r4
 800418e:	d109      	bne.n	80041a4 <__libc_init_array+0x24>
 8004190:	4e0b      	ldr	r6, [pc, #44]	; (80041c0 <__libc_init_array+0x40>)
 8004192:	4c0c      	ldr	r4, [pc, #48]	; (80041c4 <__libc_init_array+0x44>)
 8004194:	f000 f820 	bl	80041d8 <_init>
 8004198:	1ba4      	subs	r4, r4, r6
 800419a:	10a4      	asrs	r4, r4, #2
 800419c:	2500      	movs	r5, #0
 800419e:	42a5      	cmp	r5, r4
 80041a0:	d105      	bne.n	80041ae <__libc_init_array+0x2e>
 80041a2:	bd70      	pop	{r4, r5, r6, pc}
 80041a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041a8:	4798      	blx	r3
 80041aa:	3501      	adds	r5, #1
 80041ac:	e7ee      	b.n	800418c <__libc_init_array+0xc>
 80041ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041b2:	4798      	blx	r3
 80041b4:	3501      	adds	r5, #1
 80041b6:	e7f2      	b.n	800419e <__libc_init_array+0x1e>
 80041b8:	08004234 	.word	0x08004234
 80041bc:	08004234 	.word	0x08004234
 80041c0:	08004234 	.word	0x08004234
 80041c4:	08004238 	.word	0x08004238

080041c8 <memset>:
 80041c8:	4402      	add	r2, r0
 80041ca:	4603      	mov	r3, r0
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d100      	bne.n	80041d2 <memset+0xa>
 80041d0:	4770      	bx	lr
 80041d2:	f803 1b01 	strb.w	r1, [r3], #1
 80041d6:	e7f9      	b.n	80041cc <memset+0x4>

080041d8 <_init>:
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	bf00      	nop
 80041dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041de:	bc08      	pop	{r3}
 80041e0:	469e      	mov	lr, r3
 80041e2:	4770      	bx	lr

080041e4 <_fini>:
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	bf00      	nop
 80041e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ea:	bc08      	pop	{r3}
 80041ec:	469e      	mov	lr, r3
 80041ee:	4770      	bx	lr
